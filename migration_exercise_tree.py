import sqlite3
import os
from datetime import datetime


def migrate_exercise_tree_table_fixed():
    """Script migration s·ª≠a l·ªói SQLite default value"""

    db_path = "data/giasu_management.db"

    if not os.path.exists(db_path):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y database: {db_path}")
        return False

    try:
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row
        c = conn.cursor()

        print("üîç Ki·ªÉm tra c·∫•u tr√∫c b·∫£ng exercise_tree...")

        # Ki·ªÉm tra b·∫£ng c√≥ t·ªìn t·∫°i kh√¥ng
        c.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='exercise_tree'")
        if not c.fetchone():
            print("üìù T·∫°o b·∫£ng exercise_tree m·ªõi...")
            c.execute("""
                CREATE TABLE exercise_tree (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    parent_id INTEGER,
                    name TEXT NOT NULL,
                    level TEXT NOT NULL,
                    description TEXT DEFAULT '',
                    created_at TEXT DEFAULT '',
                    FOREIGN KEY (parent_id) REFERENCES exercise_tree (id)
                )
            """)
            print("‚úÖ ƒê√£ t·∫°o b·∫£ng exercise_tree")
        else:
            # Ki·ªÉm tra c√°c c·ªôt
            c.execute("PRAGMA table_info(exercise_tree)")
            columns = [column[1] for column in c.fetchall()]
            print(f"üìã C√°c c·ªôt hi·ªán c√≥: {columns}")

            # Th√™m c·ªôt description n·∫øu thi·∫øu
            if 'description' not in columns:
                print("‚ûï Th√™m c·ªôt description...")
                c.execute("ALTER TABLE exercise_tree ADD COLUMN description TEXT DEFAULT ''")
                print("‚úÖ ƒê√£ th√™m c·ªôt description")
            else:
                print("‚úÖ C·ªôt description ƒë√£ t·ªìn t·∫°i")

            # Th√™m c·ªôt created_at n·∫øu thi·∫øu
            if 'created_at' not in columns:
                print("‚ûï Th√™m c·ªôt created_at...")
                c.execute("ALTER TABLE exercise_tree ADD COLUMN created_at TEXT DEFAULT ''")

                # C·∫≠p nh·∫≠t created_at cho c√°c record hi·ªán c√≥
                current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                c.execute("UPDATE exercise_tree SET created_at = ? WHERE created_at = '' OR created_at IS NULL",
                          (current_time,))

                print("‚úÖ ƒê√£ th√™m c·ªôt created_at v√† c·∫≠p nh·∫≠t d·ªØ li·ªáu")
            else:
                print("‚úÖ C·ªôt created_at ƒë√£ t·ªìn t·∫°i")

        conn.commit()
        conn.close()

        print("üéâ Migration ho√†n t·∫•t!")
        return True

    except sqlite3.Error as e:
        print(f"‚ùå L·ªói migration: {e}")
        return False


if __name__ == "__main__":
    migrate_exercise_tree_table_fixed()