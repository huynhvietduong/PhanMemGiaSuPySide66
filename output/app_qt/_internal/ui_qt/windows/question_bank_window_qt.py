from __future__ import annotations
import json
import os
import base64
import io
from typing import List, Dict, Optional
from datetime import datetime

# Import PySide6
from PySide6 import QtCore, QtGui, QtWidgets
from PySide6.QtCore import Qt, QByteArray, QBuffer, QIODevice, Signal
from PySide6.QtWidgets import (
    QMenu, QFileDialog, QMessageBox, QDialog,
    QVBoxLayout, QHBoxLayout, QFormLayout,
    QWidget, QLabel, QLineEdit, QTextEdit,
    QPushButton, QComboBox, QSpinBox,
    QToolBar, QGroupBox, QSplitter,
    QStackedWidget, QScrollArea,
    QTableWidget, QTableWidgetItem,
    QTreeWidget, QTreeWidgetItem,
    QHeaderView, QAbstractItemView
)
from PySide6.QtGui import (
    QKeySequence, QShortcut, QPixmap, QImage,
    QTextDocument, QTextCursor, QColor, QBrush,
    QAction, QIcon
)
from PySide6.QtPrintSupport import QPrintPreviewDialog, QPrinter

class QuestionBankWindowQt(QtWidgets.QWidget):
    # ========== NH√ìM 1: KH·ªûI T·∫†O V√Ä THI·∫æT L·∫¨P ========== #
    def __init__(self, db_manager, parent=None):
        super().__init__(parent)
        self.db = db_manager
        self.setObjectName("QuestionBankWindowQt")
        self.setWindowTitle("Ng√¢n h√†ng c√¢u h·ªèi")
        self.resize(1200, 680)

        # ƒê·∫£m b·∫£o b·∫£ng t·ªìn t·∫°i
        self._ensure_tables()

        self.current_question_id: int | None = None
        self.tree_nodes: Dict[str, int] = {}

        root = QtWidgets.QVBoxLayout(self)

        # T·∫°o toolbar ch√≠nh
        main_toolbar = QtWidgets.QToolBar()
        main_toolbar.setToolButtonStyle(Qt.ToolButtonTextBesideIcon)
        main_toolbar.setMovable(False)
        main_toolbar.setStyleSheet("""
            QToolBar { 
                background: #f8f9fa; 
                border: 1px solid #dee2e6; 
                spacing: 8px; 
                padding: 4px;
            }
            QToolBar::separator { 
                background: #dee2e6; 
                width: 2px; 
                margin: 0 4px;
            }
        """)
        root.addWidget(main_toolbar)

        # Nh√≥m qu·∫£n l√Ω c√¢y
        toggle_action = main_toolbar.addAction("üå≤ ·∫®n/Hi·ªán c√¢y")
        toggle_action.triggered.connect(self.toggle_tree_panel)

        manage_action = main_toolbar.addAction("‚öôÔ∏è Qu·∫£n l√Ω c√¢y")
        manage_action.triggered.connect(self.open_tree_manager)

        main_toolbar.addSeparator()

        # Nh√≥m t√¨m ki·∫øm
        search_widget = QtWidgets.QWidget()
        search_layout = QtWidgets.QHBoxLayout(search_widget)
        search_layout.setContentsMargins(0, 0, 0, 0)

        search_layout.addWidget(QtWidgets.QLabel("üîç"))

        self.search_edit = QtWidgets.QLineEdit()
        self.search_edit.setPlaceholderText("T√¨m ki·∫øm c√¢u h·ªèi...")
        self.search_edit.setMinimumWidth(200)
        self.search_edit.setStyleSheet("padding: 4px; border: 1px solid #ced4da; border-radius: 4px;")
        search_layout.addWidget(self.search_edit)

        main_toolbar.addWidget(search_widget)

        search_action = main_toolbar.addAction("T√¨m")
        search_action.triggered.connect(self.search_questions)

        main_toolbar.addSeparator()

        # Th√™m n√∫t t·∫°o c√¢u h·ªèi n·ªïi b·∫≠t
        add_question_action = main_toolbar.addAction("‚ûï Th√™m c√¢u h·ªèi")
        add_question_action.triggered.connect(self.open_add_question_dialog)
        # Style cho n√∫t
        add_btn_widget = main_toolbar.widgetForAction(add_question_action)
        if add_btn_widget:
            add_btn_widget.setStyleSheet("""
                QToolButton {
                    background: #28a745;
                    color: white;
                    font-weight: bold;
                    padding: 6px 12px;
                    border-radius: 4px;
                }
                QToolButton:hover {
                    background: #218838;
                }
            """)
        # Nh√≥m t·∫°o m·ªõi
        new_action = main_toolbar.addAction("‚ûï T·∫°o m·ªõi")
        new_action.triggered.connect(self.new_question)

        template_action = main_toolbar.addAction("üìã Template")
        template_action.triggered.connect(self.show_template_dialog)

        main_toolbar.addSeparator()

        # Nh√≥m import/export
        import_action = main_toolbar.addAction("üì• Import Word")
        import_action.triggered.connect(self.import_from_word)

        export_action = main_toolbar.addAction("üì§ Export Word")
        export_action.triggered.connect(self.export_to_word)

        export_pdf_action = main_toolbar.addAction("üìÑ Export PDF")
        export_pdf_action.triggered.connect(self.export_to_pdf)

        main_toolbar.addSeparator()

        # Toolbar ph·ª• cho filters
        filter_toolbar = QtWidgets.QToolBar()
        filter_toolbar.setStyleSheet("QToolBar { background: #e9ecef; border: 1px solid #dee2e6; }")
        root.addWidget(filter_toolbar)

        self._create_filter_controls(filter_toolbar)

        # Splitter 3 c·ªôt
        split = QtWidgets.QSplitter(Qt.Horizontal)
        root.addWidget(split, 1)

        # --- C·ªôt tr√°i: C√¢y ---
        left = QtWidgets.QWidget()
        left_l = QtWidgets.QVBoxLayout(left)
        left_l.setContentsMargins(6, 6, 6, 6)

        left_l.addWidget(QtWidgets.QLabel("C√¢y th∆∞ m·ª•c"))
        self.tree = QtWidgets.QTreeWidget()
        self.tree.setHeaderHidden(True)
        self.tree.itemSelectionChanged.connect(self.on_tree_select)
        left_l.addWidget(self.tree, 1)

        split.addWidget(left)

        # --- C·ªôt gi·ªØa: Danh s√°ch c√¢u h·ªèi ---
        mid = QtWidgets.QWidget()
        mid_l = QtWidgets.QVBoxLayout(mid)
        mid_l.setContentsMargins(6, 6, 6, 6)

        mid_l.addWidget(QtWidgets.QLabel("Danh s√°ch c√¢u h·ªèi"))

        # B·∫£ng c√¢u h·ªèi
        self.q_table = QtWidgets.QTableWidget(0, 8)
        headers = ["‚òëÔ∏è", "ID", "N·ªôi dung", "S·ªë ƒë√°p √°n", "ƒê√°p √°n ƒë√∫ng", "D·∫°ng", "M·ª©c ƒë·ªô", "üè∑Ô∏è"]
        self.q_table.setHorizontalHeaderLabels(headers)

        # C·∫•u h√¨nh resize mode
        header = self.q_table.horizontalHeader()
        header.setSectionResizeMode(0, QtWidgets.QHeaderView.ResizeToContents)
        header.setSectionResizeMode(1, QtWidgets.QHeaderView.ResizeToContents)
        header.setSectionResizeMode(2, QtWidgets.QHeaderView.Stretch)
        header.setSectionResizeMode(3, QtWidgets.QHeaderView.ResizeToContents)
        header.setSectionResizeMode(4, QtWidgets.QHeaderView.ResizeToContents)
        header.setSectionResizeMode(5, QtWidgets.QHeaderView.ResizeToContents)
        header.setSectionResizeMode(6, QtWidgets.QHeaderView.ResizeToContents)
        header.setSectionResizeMode(7, QtWidgets.QHeaderView.ResizeToContents)

        self.q_table.setSortingEnabled(True)
        self.q_table.setContextMenuPolicy(Qt.CustomContextMenu)
        self.q_table.customContextMenuRequested.connect(self.show_table_context_menu)
        self.q_table.setAlternatingRowColors(True)
        self.q_table.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.q_table.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)

        self.q_table.setStyleSheet("""
            QTableWidget {
                gridline-color: #e9ecef;
                background-color: white;
                alternate-background-color: #f8f9fa;
            }
            QTableWidget::item {
                padding: 8px;
                border-bottom: 1px solid #e9ecef;
            }
            QTableWidget::item:selected {
                background-color: #007bff;
                color: white;
            }
        """)

        mid_l.addWidget(self.q_table, 1)
        split.addWidget(mid)

        self.q_table.itemSelectionChanged.connect(self.on_question_select)

        # --- C·ªôt ph·∫£i: Panel chi ti·∫øt v·ªõi tabs ---
        right_tabs = QtWidgets.QTabWidget()
        right_tabs.setStyleSheet("""
            QTabWidget::pane {
                border: 1px solid #dee2e6;
                background: white;
            }
            QTabBar::tab {
                background: #f8f9fa;
                padding: 8px 16px;
                margin-right: 2px;
                border: 1px solid #dee2e6;
                border-bottom: none;
            }
            QTabBar::tab:selected {
                background: white;
                border-bottom: 1px solid white;
            }
        """)

        # Tab 1: Ch·ªânh s·ª≠a c√¢u h·ªèi
        edit_tab = QtWidgets.QWidget()
        edit_layout = QtWidgets.QVBoxLayout(edit_tab)
        edit_layout.setContentsMargins(10, 10, 10, 10)

        self._create_edit_tab_content(edit_layout)
        right_tabs.addTab(edit_tab, "‚úèÔ∏è Ch·ªânh s·ª≠a")

        # Tab 2: Xem tr∆∞·ªõc
        preview_tab = QtWidgets.QWidget()
        preview_layout = QtWidgets.QVBoxLayout(preview_tab)
        preview_layout.setContentsMargins(10, 10, 10, 10)

        self._create_preview_tab_content(preview_layout)
        right_tabs.addTab(preview_tab, "üëÅÔ∏è Xem tr∆∞·ªõc")

        # Tab 3: Th·ªëng k√™
        stats_tab = QtWidgets.QWidget()
        stats_layout = QtWidgets.QVBoxLayout(stats_tab)
        stats_layout.setContentsMargins(10, 10, 10, 10)

        self._create_stats_tab_content(stats_layout)
        right_tabs.addTab(stats_tab, "üìä Th·ªëng k√™")

        # Tab 4: L·ªãch s·ª≠
        history_tab = QtWidgets.QWidget()
        history_layout = QtWidgets.QVBoxLayout(history_tab)
        history_layout.setContentsMargins(10, 10, 10, 10)

        self._create_history_tab_content(history_layout)
        right_tabs.addTab(history_tab, "üìú L·ªãch s·ª≠")

        split.addWidget(right_tabs)
        split.setSizes([240, 520, 440])

        # Init d·ªØ li·ªáu
        self.refresh_tree()
        self.load_available_subjects()
        self.load_available_grades()

        # Signal cho combobox
        self.subject_cb.currentIndexChanged.connect(self.load_available_topics)
        self.grade_cb.currentIndexChanged.connect(self.load_available_topics)
        self.topic_cb.currentIndexChanged.connect(self.load_available_types)

        # Keyboard shortcuts
        QShortcut("Ctrl+N", self, self.new_question)
        QShortcut("Ctrl+S", self, self.save_question)
        QShortcut("Ctrl+F", self, self.focus_search)
        QShortcut("Delete", self, self.delete_question)
        QShortcut("F5", self, self.refresh_all)

        self.setAcceptDrops(True)
        self.q_table.setDragDropMode(QtWidgets.QAbstractItemView.InternalMove)

        self._setup_tree_management()
    def open_add_question_dialog(self):
        """M·ªü dialog th√™m c√¢u h·ªèi m·ªõi"""
        tree_id = self._current_tree_id()
        if not tree_id:
            QtWidgets.QMessageBox.warning(self, "Ch∆∞a ch·ªçn th∆∞ m·ª•c",
                                          "Vui l√≤ng ch·ªçn th∆∞ m·ª•c trong c√¢y ƒë·ªÉ l∆∞u c√¢u h·ªèi")
            return

        dialog = QuestionEditDialog(self.db, tree_id=tree_id, parent=self)
        if dialog.exec() == QtWidgets.QDialog.Accepted:
            # Refresh danh s√°ch c√¢u h·ªèi
            self.on_tree_select()

    def _ensure_tables(self):
        """T·∫°o c·∫•u tr√∫c b·∫£ng c∆° b·∫£n"""
        # T·∫°o b·∫£ng question_bank v·ªõi ƒë·∫ßy ƒë·ªß c·ªôt t·ª´ ƒë·∫ßu
        self.db.execute_query("""
            CREATE TABLE IF NOT EXISTS question_bank (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                content_text TEXT,
                options TEXT,
                correct TEXT,
                tree_id INTEGER,
                difficulty_level TEXT,
                content_type TEXT DEFAULT 'text',
                content_data BLOB,
                answer_type TEXT DEFAULT 'text',
                answer_data BLOB,
                created_date TEXT DEFAULT CURRENT_TIMESTAMP,
                modified_date TEXT DEFAULT CURRENT_TIMESTAMP
            );
        """)

        # Ki·ªÉm tra v√† th√™m c·ªôt m·ªõi n·∫øu b·∫£ng ƒë√£ t·ªìn t·∫°i t·ª´ tr∆∞·ªõc
        c = self.db.conn.cursor()
        c.execute("PRAGMA table_info(question_bank)")
        existing_columns = [column[1] for column in c.fetchall()]

        # Th√™m c·ªôt content_type n·∫øu ch∆∞a c√≥
        if 'content_type' not in existing_columns:
            try:
                self.db.execute_query("ALTER TABLE question_bank ADD COLUMN content_type TEXT DEFAULT 'text'")
                print("‚úÖ ƒê√£ th√™m c·ªôt content_type")
            except Exception as e:
                if "duplicate column name" not in str(e).lower():
                    print(f"‚ö†Ô∏è L·ªói th√™m c·ªôt content_type: {e}")

        # Th√™m c·ªôt content_data n·∫øu ch∆∞a c√≥
        if 'content_data' not in existing_columns:
            try:
                self.db.execute_query("ALTER TABLE question_bank ADD COLUMN content_data BLOB")
                print("‚úÖ ƒê√£ th√™m c·ªôt content_data")
            except Exception as e:
                if "duplicate column name" not in str(e).lower():
                    print(f"‚ö†Ô∏è L·ªói th√™m c·ªôt content_data: {e}")

        # Th√™m c·ªôt answer_type n·∫øu ch∆∞a c√≥
        if 'answer_type' not in existing_columns:
            try:
                self.db.execute_query("ALTER TABLE question_bank ADD COLUMN answer_type TEXT DEFAULT 'text'")
                print("‚úÖ ƒê√£ th√™m c·ªôt answer_type")
            except Exception as e:
                if "duplicate column name" not in str(e).lower():
                    print(f"‚ö†Ô∏è L·ªói th√™m c·ªôt answer_type: {e}")

        # Th√™m c·ªôt answer_data n·∫øu ch∆∞a c√≥
        if 'answer_data' not in existing_columns:
            try:
                self.db.execute_query("ALTER TABLE question_bank ADD COLUMN answer_data BLOB")
                print("‚úÖ ƒê√£ th√™m c·ªôt answer_data")
            except Exception as e:
                if "duplicate column name" not in str(e).lower():
                    print(f"‚ö†Ô∏è L·ªói th√™m c·ªôt answer_data: {e}")

        # T·∫°o b·∫£ng exercise_tree
        self.db.execute_query("""
            CREATE TABLE IF NOT EXISTS exercise_tree (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                parent_id INTEGER,
                name TEXT NOT NULL,
                level TEXT NOT NULL,
                description TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (parent_id) REFERENCES exercise_tree (id)
            )
        """)

        # T·∫°o b·∫£ng question_tags
        self.db.execute_query("""
            CREATE TABLE IF NOT EXISTS question_tags (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                question_id INTEGER,
                tag_name TEXT,
                color TEXT DEFAULT '#3498db',
                created_date TEXT DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (question_id) REFERENCES question_bank(id) ON DELETE CASCADE,
                UNIQUE(question_id, tag_name)
            );
        """)

        # T·∫°o b·∫£ng question_history
        self.db.execute_query("""
            CREATE TABLE IF NOT EXISTS question_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                question_id INTEGER,
                action_type TEXT,
                old_content TEXT,
                new_content TEXT,
                changed_date TEXT DEFAULT CURRENT_TIMESTAMP,
                user_note TEXT,
                FOREIGN KEY (question_id) REFERENCES question_bank(id) ON DELETE CASCADE
            );
        """)

        # T·∫°o indexes
        self.db.execute_query("CREATE INDEX IF NOT EXISTS idx_question_tree_id ON question_bank(tree_id)")
        self.db.execute_query("CREATE INDEX IF NOT EXISTS idx_question_tags_question_id ON question_tags(question_id)")
    def _insert_sample_tree_data(self):
        """Th√™m d·ªØ li·ªáu m·∫´u cho c√¢y th∆∞ m·ª•c"""
        sample_data = [
            (None, "To√°n", "M√¥n", "M√¥n To√°n h·ªçc"),
            (None, "L√Ω", "M√¥n", "M√¥n V·∫≠t l√Ω"),
            (None, "H√≥a", "M√¥n", "M√¥n H√≥a h·ªçc"),
            (1, "L·ªõp 10", "L·ªõp", "To√°n l·ªõp 10"),
            (1, "L·ªõp 11", "L·ªõp", "To√°n l·ªõp 11"),
            (1, "L·ªõp 12", "L·ªõp", "To√°n l·ªõp 12"),
            (4, "M·ªánh ƒë·ªÅ - T·∫≠p h·ª£p", "Ch·ªß ƒë·ªÅ", "Ch∆∞∆°ng 1"),
            (4, "H√†m s·ªë", "Ch·ªß ƒë·ªÅ", "Ch∆∞∆°ng 2"),
            (7, "Nh·∫≠n bi·∫øt", "M·ª©c ƒë·ªô", "C√¢u h·ªèi nh·∫≠n bi·∫øt c∆° b·∫£n"),
            (7, "Th√¥ng hi·ªÉu", "M·ª©c ƒë·ªô", "C√¢u h·ªèi th√¥ng hi·ªÉu"),
            (7, "V·∫≠n d·ª•ng", "M·ª©c ƒë·ªô", "C√¢u h·ªèi v·∫≠n d·ª•ng"),
        ]

        for parent_id, name, level, description in sample_data:
            self.db.execute_query(
                "INSERT INTO exercise_tree (parent_id, name, level, description) VALUES (?, ?, ?, ?)",
                (parent_id, name, level, description)
            )

    # ========== NH√ìM 2: T·∫†O GIAO DI·ªÜN ========== #
    def _create_filter_controls(self, toolbar):
        """T·∫°o c√°c combobox filter"""
        toolbar.addWidget(QtWidgets.QLabel("M√¥n:"))
        self.subject_cb = QtWidgets.QComboBox()
        self.subject_cb.setMinimumWidth(120)
        toolbar.addWidget(self.subject_cb)

        toolbar.addWidget(QtWidgets.QLabel("L·ªõp:"))
        self.grade_cb = QtWidgets.QComboBox()
        self.grade_cb.setMinimumWidth(100)
        toolbar.addWidget(self.grade_cb)

        toolbar.addWidget(QtWidgets.QLabel("Ch·ªß ƒë·ªÅ:"))
        self.topic_cb = QtWidgets.QComboBox()
        self.topic_cb.setMinimumWidth(150)
        toolbar.addWidget(self.topic_cb)

        toolbar.addWidget(QtWidgets.QLabel("D·∫°ng:"))
        self.type_cb = QtWidgets.QComboBox()
        self.type_cb.setMinimumWidth(120)
        toolbar.addWidget(self.type_cb)

        toolbar.addWidget(QtWidgets.QLabel("M·ª©c ƒë·ªô:"))
        self.level_cb = QtWidgets.QComboBox()
        self.level_cb.addItems(["", "Nh·∫≠n bi·∫øt", "Th√¥ng hi·ªÉu", "V·∫≠n d·ª•ng", "V·∫≠n d·ª•ng cao"])
        self.level_cb.setMinimumWidth(120)
        toolbar.addWidget(self.level_cb)

        toolbar.addSeparator()

        filter_btn = toolbar.addAction("üîΩ L·ªçc")
        filter_btn.triggered.connect(self.filter_by_combobox)

        clear_filter_btn = toolbar.addAction("üîÑ X√≥a l·ªçc")
        clear_filter_btn.triggered.connect(self.clear_filters)
    def _create_edit_tab_content(self, layout):
        """T·∫°o n·ªôi dung tab ch·ªânh s·ª≠a v·ªõi h·ªó tr·ª£ ƒëa media"""
        # Container cho n·ªôi dung
        self.content_container = QtWidgets.QStackedWidget()

        # Text editor
        self.content_text = QtWidgets.QTextEdit()
        self.content_text.setMinimumHeight(150)
        self.content_container.addWidget(self.content_text)

        # Image viewer cho review
        self.content_image_viewer = ImageViewer()
        self.content_container.addWidget(self.content_image_viewer)

        # PDF viewer cho review
        self.content_pdf_viewer = PDFViewer()
        self.content_container.addWidget(self.content_pdf_viewer)

        layout.addWidget(QtWidgets.QLabel("N·ªôi dung c√¢u h·ªèi:"))
        layout.addWidget(self.content_container)

        # T∆∞∆°ng t·ª± cho ƒë√°p √°n
        layout.addWidget(QtWidgets.QLabel("ƒê√°p √°n:"))
        self.answer_container = QtWidgets.QStackedWidget()

        self.answer_text = QtWidgets.QTextEdit()
        self.answer_text.setMaximumHeight(100)
        self.answer_container.addWidget(self.answer_text)

        self.answer_image_viewer = ImageViewer()
        self.answer_container.addWidget(self.answer_image_viewer)

        layout.addWidget(self.answer_container)

        # Tags (gi·ªØ nguy√™n)
        tags_group = QtWidgets.QGroupBox("üè∑Ô∏è Th·∫ª")
        tags_layout = QtWidgets.QHBoxLayout(tags_group)

        self.tags_edit = QtWidgets.QLineEdit()
        self.tags_edit.setPlaceholderText("Nh·∫≠p th·∫ª, ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y")
        tags_layout.addWidget(self.tags_edit)

        layout.addWidget(tags_group)

        # Buttons
        buttons_layout = QtWidgets.QHBoxLayout()

        self.btn_edit = QtWidgets.QPushButton("‚úèÔ∏è S·ª≠a c√¢u h·ªèi")
        self.btn_edit.clicked.connect(self.edit_current_question)
        self.btn_edit.setStyleSheet("QPushButton { background: #007bff; color: white; padding: 8px 16px; }")

        self.btn_delete = QtWidgets.QPushButton("üóëÔ∏è X√≥a")
        self.btn_delete.clicked.connect(self.delete_question)
        self.btn_delete.setStyleSheet("QPushButton { background: #dc3545; color: white; padding: 8px 16px; }")

        buttons_layout.addWidget(self.btn_edit)
        buttons_layout.addWidget(self.btn_delete)

        layout.addLayout(buttons_layout)
    def _create_preview_tab_content(self, layout):
        """T·∫°o n·ªôi dung tab preview"""
        layout.addWidget(QtWidgets.QLabel("üìã Xem tr∆∞·ªõc c√¢u h·ªèi:"))

        self.preview_widget = QtWidgets.QTextEdit()
        self.preview_widget.setReadOnly(True)
        self.preview_widget.setStyleSheet("""
            QTextEdit {
                background: white;
                border: 2px solid #e9ecef;
                border-radius: 8px;
                padding: 16px;
                font-size: 14px;
            }
        """)
        layout.addWidget(self.preview_widget)
    def _create_stats_tab_content(self, layout):
        """T·∫°o n·ªôi dung tab th·ªëng k√™"""
        layout.addWidget(QtWidgets.QLabel("üìä Th·ªëng k√™ ng√¢n h√†ng c√¢u h·ªèi:"))

        self.stats_widget = QtWidgets.QTextEdit()
        self.stats_widget.setReadOnly(True)
        layout.addWidget(self.stats_widget)

        update_stats_btn = QtWidgets.QPushButton("üîÑ C·∫≠p nh·∫≠t th·ªëng k√™")
        update_stats_btn.clicked.connect(self.update_statistics)
        layout.addWidget(update_stats_btn)
    def _create_history_tab_content(self, layout):
        """T·∫°o n·ªôi dung tab l·ªãch s·ª≠"""
        layout.addWidget(QtWidgets.QLabel("üìú L·ªãch s·ª≠ ch·ªânh s·ª≠a:"))

        self.history_table = QtWidgets.QTableWidget(0, 4)
        self.history_table.setHorizontalHeaderLabels(["Th·ªùi gian", "H√†nh ƒë·ªông", "N·ªôi dung c≈©", "N·ªôi dung m·ªõi"])
        header = self.history_table.horizontalHeader()
        header.setSectionResizeMode(0, QtWidgets.QHeaderView.ResizeToContents)
        header.setSectionResizeMode(1, QtWidgets.QHeaderView.ResizeToContents)
        header.setSectionResizeMode(2, QtWidgets.QHeaderView.Stretch)
        header.setSectionResizeMode(3, QtWidgets.QHeaderView.Stretch)

        layout.addWidget(self.history_table)

    # ========== NH√ìM 3: QU·∫¢N L√ù C√ÇY TH∆Ø M·ª§C ========== #
    def refresh_tree(self):
        """L√†m m·ªõi c√¢y th∆∞ m·ª•c"""
        try:
            self.tree.clear()
            self.tree_nodes.clear()

            rows = self.db.execute_query(
                "SELECT id, parent_id, name, level FROM exercise_tree ORDER BY parent_id, level, name",
                fetch='all'
            ) or []

            if not rows:
                self._insert_sample_tree_data()
                rows = self.db.execute_query(
                    "SELECT id, parent_id, name, level FROM exercise_tree ORDER BY parent_id, level, name",
                    fetch='all'
                ) or []

            children: Dict[int | None, list] = {}
            for r in rows:
                children.setdefault(r["parent_id"], []).append(r)

            def build(parent_db_id: int | None, parent_item: QtWidgets.QTreeWidgetItem | None):
                for node in children.get(parent_db_id, []):
                    icon_text = self._get_level_icon(node["level"])
                    item_text = f"{icon_text} {node['name']}"

                    item = QtWidgets.QTreeWidgetItem([item_text])
                    item.setData(0, Qt.UserRole, node["id"])
                    item.setToolTip(0, f"Level: {node['level']}\nID: {node['id']}")

                    self.tree_nodes[str(id(item))] = node["id"]

                    if parent_item is None:
                        self.tree.addTopLevelItem(item)
                    else:
                        parent_item.addChild(item)
                    build(node["id"], item)

            build(None, None)
            self.tree.expandAll()

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ t·∫£i c√¢y th∆∞ m·ª•c: {e}")

    def _get_level_icon(self, level: str) -> str:
        """Tr·∫£ v·ªÅ icon cho t·ª´ng level"""
        icons = {
            "M√¥n": "üìö",
            "L·ªõp": "üéì",
            "Ch·ªß ƒë·ªÅ": "üìñ",
            "D·∫°ng": "üìù",
            "M·ª©c ƒë·ªô": "‚≠ê"
        }
        return icons.get(level, "üìÅ")

    def on_tree_select(self):
        """X·ª≠ l√Ω khi ch·ªçn node tr√™n c√¢y"""
        items = self.tree.selectedItems()
        if not items:
            return
        tree_id = items[0].data(0, Qt.UserRole)
        if not tree_id:
            return

        rows = self.db.execute_query("SELECT * FROM question_bank WHERE tree_id=?", (tree_id,), fetch="all") or []
        self._load_question_rows(rows)

    def toggle_tree_panel(self):
        """·∫®n/hi·ªán panel c√¢y"""
        w = self.tree.parentWidget()
        w.setVisible(not w.isVisible())

    def open_tree_manager(self):
        """M·ªü c·ª≠a s·ªï qu·∫£n l√Ω c√¢y"""
        QtWidgets.QMessageBox.information(self, "Th√¥ng tin", "Ch·ª©c nƒÉng qu·∫£n l√Ω c√¢y ƒëang ph√°t tri·ªÉn.")
    def _setup_tree_management(self):
        """Thi·∫øt l·∫≠p ch·ª©c nƒÉng qu·∫£n l√Ω c√¢y th∆∞ m·ª•c"""
        # Th√™m context menu cho tree
        self.tree.setContextMenuPolicy(Qt.CustomContextMenu)
        self.tree.customContextMenuRequested.connect(self._show_tree_context_menu)

        # Th√™m double-click ƒë·ªÉ edit
        self.tree.itemDoubleClicked.connect(self._edit_tree_node)

        # Th√™m keyboard shortcuts
        self._setup_tree_shortcuts()

    def _setup_tree_shortcuts(self):
        """Thi·∫øt l·∫≠p keyboard shortcuts cho tree"""
        # F2 ƒë·ªÉ edit node ƒë∆∞·ª£c ch·ªçn
        edit_shortcut = QShortcut(QKeySequence("F2"), self.tree)
        edit_shortcut.activated.connect(self._edit_selected_tree_node)

        # Delete ƒë·ªÉ x√≥a node
        delete_shortcut = QShortcut(QKeySequence("Delete"), self.tree)
        delete_shortcut.activated.connect(self._delete_selected_tree_node)

        # Ctrl+N ƒë·ªÉ th√™m node m·ªõi
        add_shortcut = QShortcut(QKeySequence("Ctrl+Shift+N"), self.tree)
        add_shortcut.activated.connect(self._add_tree_node)

    def _show_tree_context_menu(self, position):
        """Hi·ªÉn th·ªã context menu cho tree"""
        item = self.tree.itemAt(position)

        menu = QtWidgets.QMenu(self)

        # Th√™m node m·ªõi
        add_action = menu.addAction("‚ûï Th√™m nh√°nh m·ªõi")
        add_action.triggered.connect(lambda: self._add_tree_node(item))

        if item:  # N·∫øu click v√†o node
            menu.addSeparator()

            # Th√™m node con
            add_child_action = menu.addAction("üìÅ Th√™m nh√°nh con")
            add_child_action.triggered.connect(lambda: self._add_child_node(item))

            # S·ª≠a node
            edit_action = menu.addAction("‚úèÔ∏è S·ª≠a t√™n nh√°nh")
            edit_action.triggered.connect(lambda: self._edit_tree_node(item))

            # Sao ch√©p node
            copy_action = menu.addAction("üìã Sao ch√©p nh√°nh")
            copy_action.triggered.connect(lambda: self._copy_tree_node(item))

            menu.addSeparator()

            # X√≥a node
            delete_action = menu.addAction("üóëÔ∏è X√≥a nh√°nh")
            delete_action.triggered.connect(lambda: self._delete_tree_node(item))

            menu.addSeparator()

            # Th√¥ng tin node
            info_action = menu.addAction("‚ÑπÔ∏è Th√¥ng tin")
            info_action.triggered.connect(lambda: self._show_node_info(item))

        # L√†m m·ªõi c√¢y
        menu.addSeparator()
        refresh_action = menu.addAction("üîÑ L√†m m·ªõi")
        refresh_action.triggered.connect(self.refresh_tree)

        # Hi·ªÉn th·ªã menu
        menu.exec(self.tree.mapToGlobal(position))

    def _add_tree_node(self, parent_item=None):
        """Th√™m node m·ªõi"""
        try:
            dialog = TreeNodeDialog(self.db, mode="add", parent=self)

            # N·∫øu c√≥ parent item, set l√†m parent
            parent_id = None
            if parent_item:
                parent_id = parent_item.data(0, Qt.UserRole)
                if parent_id:
                    dialog.set_parent_id(parent_id)

            if dialog.exec() == QtWidgets.QDialog.Accepted:
                # Refresh tree sau khi th√™m
                self.refresh_tree()

                # T√¨m l·∫°i parent item sau khi refresh
                if parent_id:
                    self._expand_node_by_id(parent_id)

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ th√™m node: {e}")

    def _add_child_node(self, parent_item):
        """Th√™m node con"""
        if not parent_item:
            return

        parent_id = parent_item.data(0, Qt.UserRole)
        if not parent_id:
            return

        try:
            dialog = TreeNodeDialog(self.db, mode="add", parent=self)
            dialog.set_parent_id(parent_id)

            if dialog.exec() == QtWidgets.QDialog.Accepted:
                self.refresh_tree()
                # T√¨m l·∫°i v√† expand parent sau khi refresh
                self._expand_node_by_id(parent_id)

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ th√™m node con: {e}")

    def _edit_tree_node(self, item):
        """S·ª≠a node"""
        if not item:
            return

        node_id = item.data(0, Qt.UserRole)
        if not node_id:
            return

        try:
            dialog = TreeNodeDialog(self.db, mode="edit", node_id=node_id, parent=self)

            if dialog.exec() == QtWidgets.QDialog.Accepted:
                self.refresh_tree()
                # T√¨m l·∫°i v√† select node sau khi refresh
                self._select_node_by_id(node_id)

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ s·ª≠a node: {e}")

    def _edit_selected_tree_node(self):
        """S·ª≠a node ƒë∆∞·ª£c ch·ªçn"""
        selected_items = self.tree.selectedItems()
        if selected_items:
            self._edit_tree_node(selected_items[0])

    def _copy_tree_node(self, item):
        """Sao ch√©p node"""
        if not item:
            return

        node_id = item.data(0, Qt.UserRole)
        if not node_id:
            return

        try:
            # L·∫•y th√¥ng tin node g·ªëc
            row = self.db.execute_query(
                "SELECT name, level, description, parent_id FROM exercise_tree WHERE id = ?",
                (node_id,), fetch="one"
            )

            if row:
                new_name = f"{row['name']} (Sao ch√©p)"

                # T·∫°o node m·ªõi
                description = row.get('description', '') if row.get('description') else ''

                self.db.execute_query(
                    "INSERT INTO exercise_tree (parent_id, name, level, description) VALUES (?, ?, ?, ?)",
                    (row['parent_id'], new_name, row['level'], description)
                )

                self.refresh_tree()
                QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ sao ch√©p '{new_name}'")

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ sao ch√©p node: {e}")

    def _delete_tree_node(self, item):
        """X√≥a node v·ªõi x√°c nh·∫≠n"""
        if not item:
            return

        node_id = item.data(0, Qt.UserRole)
        node_name = item.text(0)

        if not node_id:
            return

        try:
            # Ki·ªÉm tra node con
            children_count = self.db.execute_query(
                "SELECT COUNT(*) as count FROM exercise_tree WHERE parent_id = ?",
                (node_id,), fetch="one"
            )

            # Ki·ªÉm tra c√¢u h·ªèi trong node
            questions_count = self.db.execute_query(
                "SELECT COUNT(*) as count FROM question_bank WHERE tree_id = ?",
                (node_id,), fetch="one"
            )

            warning_msg = f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a nh√°nh '{node_name}'?"

            if children_count and children_count["count"] > 0:
                warning_msg += f"\n\n‚ö†Ô∏è Nh√°nh n√†y c√≥ {children_count['count']} nh√°nh con."

            if questions_count and questions_count["count"] > 0:
                warning_msg += f"\n‚ö†Ô∏è Nh√°nh n√†y ch·ª©a {questions_count['count']} c√¢u h·ªèi."
                warning_msg += "\n\nT·∫•t c·∫£ d·ªØ li·ªáu s·∫Ω b·ªã x√≥a vƒ©nh vi·ªÖn!"

            reply = QtWidgets.QMessageBox.question(
                self, "X√°c nh·∫≠n x√≥a",
                warning_msg,
                QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
                QtWidgets.QMessageBox.No
            )

            if reply == QtWidgets.QMessageBox.Yes:
                # X√≥a node v√† t·∫•t c·∫£ con
                self.db.execute_query("DELETE FROM exercise_tree WHERE id = ?", (node_id,))
                self.refresh_tree()
                QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ x√≥a nh√°nh '{node_name}'")

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ x√≥a node: {e}")

    def _delete_selected_tree_node(self):
        """X√≥a node ƒë∆∞·ª£c ch·ªçn"""
        selected_items = self.tree.selectedItems()
        if selected_items:
            self._delete_tree_node(selected_items[0])

    def _show_node_info(self, item):
        """Hi·ªÉn th·ªã th√¥ng tin node"""
        if not item:
            return

        node_id = item.data(0, Qt.UserRole)
        if not node_id:
            return

        try:
            # L·∫•y th√¥ng tin node
            node = self.db.execute_query(
                "SELECT * FROM exercise_tree WHERE id = ?",
                (node_id,), fetch="one"
            )

            if node:
                # ƒê·∫øm s·ªë l∆∞·ª£ng con
                children_count = self.db.execute_query(
                    "SELECT COUNT(*) as count FROM exercise_tree WHERE parent_id = ?",
                    (node_id,), fetch="one"
                )["count"]

                # ƒê·∫øm s·ªë c√¢u h·ªèi
                questions_count = self.db.execute_query(
                    "SELECT COUNT(*) as count FROM question_bank WHERE tree_id = ?",
                    (node_id,), fetch="one"
                )["count"]

                info_text = f"""
                üìÅ TH√îNG TIN NH√ÅNH
                
                ID: {node['id']}
                T√™n: {node['name']}
                C·∫•p ƒë·ªô: {node['level']}
                M√¥ t·∫£: {node.get('description', 'Kh√¥ng c√≥')}
                
                üìä TH·ªêNG K√ä:
                - S·ªë nh√°nh con: {children_count}
                - S·ªë c√¢u h·ªèi: {questions_count}
                
                üïê Ng√†y t·∫°o: {node.get('created_at', 'Kh√¥ng r√µ')}
                """

                QtWidgets.QMessageBox.information(self, "Th√¥ng tin nh√°nh", info_text)

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ l·∫•y th√¥ng tin: {e}")

    def _expand_node_by_id(self, node_id):
        """T√¨m v√† expand node theo ID"""
        try:
            root = self.tree.invisibleRootItem()
            self._find_and_expand_recursive(root, node_id)
        except Exception:
            pass

    def _find_and_expand_recursive(self, parent_item, target_id):
        """ƒê·ªá quy t√¨m v√† expand node"""
        for i in range(parent_item.childCount()):
            child = parent_item.child(i)
            if child and child.data(0, Qt.UserRole) == target_id:
                child.setExpanded(True)
                return True

            if self._find_and_expand_recursive(child, target_id):
                return True

        return False

    def _select_node_by_id(self, node_id):
        """T√¨m v√† select node theo ID"""
        try:
            root = self.tree.invisibleRootItem()
            self._find_and_select_recursive(root, node_id)
        except Exception:
            pass

    def _find_and_select_recursive(self, parent_item, target_id):
        """ƒê·ªá quy t√¨m v√† select node"""
        for i in range(parent_item.childCount()):
            child = parent_item.child(i)
            if child and child.data(0, Qt.UserRole) == target_id:
                self.tree.setCurrentItem(child)
                return True

            if self._find_and_select_recursive(child, target_id):
                return True

        return False

    def open_tree_manager(self):
        """M·ªü c·ª≠a s·ªï qu·∫£n l√Ω c√¢y n√¢ng cao"""
        dialog = TreeManagerDialog(self.db, parent=self)
        dialog.exec()
        self.refresh_tree()
    # ========== NH√ìM 4: QU·∫¢N L√ù DANH S√ÅCH C√ÇU H·ªéI ========== #
    def _load_question_rows(self, rows):
        """Load danh s√°ch c√¢u h·ªèi v√†o b·∫£ng"""
        self.q_table.setRowCount(0)

        for r in rows:
            # Chuy·ªÉn sqlite3.Row th√†nh dict ƒë·ªÉ d·ªÖ x·ª≠ l√Ω
            row_dict = dict(r)

            checkbox = QtWidgets.QCheckBox()
            checkbox.setChecked(False)

            # L·∫•y n·ªôi dung preview
            content_text = row_dict.get("content_text", "") or ""
            content_preview = content_text[:50].replace("\n", " ").strip()

            row_id = row_dict.get("id", 0)
            tree_id = row_dict.get("tree_id", 0)

            # L·∫•y lo·∫°i n·ªôi dung (text, image, pdf, word)
            content_type = row_dict.get("content_type", "text")
            type_icon = {
                "text": "üìù",
                "image": "üñºÔ∏è",
                "pdf": "üìÑ",
                "word": "üìò"
            }.get(content_type, "üìù")

            # L·∫•y th√¥ng tin t·ª´ options n·∫øu c√≥
            opts_json = row_dict.get("options", "[]") or "[]"
            try:
                opts = json.loads(opts_json) if opts_json else []
                so_dapan = len(opts)
            except:
                so_dapan = 0

            dap_an = row_dict.get("correct", "-") or "-"

            # L·∫•y chu·ªói d·∫°ng/m·ª©c ƒë·ªô t·ª´ path
            path = self.get_tree_path(tree_id) if tree_id else []
            path_dict = {p["level"]: p["name"] for p in path}
            dang = path_dict.get("D·∫°ng", "-")
            muc_do = path_dict.get("M·ª©c ƒë·ªô", "-")

            # L·∫•y tags
            tags = self.db.execute_query(
                "SELECT tag_name FROM question_tags WHERE question_id=?",
                (row_id,), fetch="all"
            ) or []
            tags_text = ", ".join([dict(tag)["tag_name"] for tag in tags]) if tags else ""

            # Th√™m row v√†o table
            row_idx = self.q_table.rowCount()
            self.q_table.insertRow(row_idx)

            self.q_table.setCellWidget(row_idx, 0, checkbox)
            self.q_table.setItem(row_idx, 1, QtWidgets.QTableWidgetItem(str(row_id)))
            self.q_table.setItem(row_idx, 2, QtWidgets.QTableWidgetItem(content_preview))
            self.q_table.setItem(row_idx, 3, QtWidgets.QTableWidgetItem(type_icon))  # Lo·∫°i
            self.q_table.setItem(row_idx, 4, QtWidgets.QTableWidgetItem(str(so_dapan)))
            self.q_table.setItem(row_idx, 5, QtWidgets.QTableWidgetItem(dap_an))
            self.q_table.setItem(row_idx, 6, QtWidgets.QTableWidgetItem(dang))
            self.q_table.setItem(row_idx, 7, QtWidgets.QTableWidgetItem(muc_do))

            tags_item = QtWidgets.QTableWidgetItem(tags_text)
            if tags_text:
                tags_item.setBackground(QtGui.QColor("#e3f2fd"))
            self.q_table.setItem(row_idx, 8, tags_item)
    def on_question_select(self):
        """Load c√¢u h·ªèi ƒë∆∞·ª£c ch·ªçn v·ªõi h·ªó tr·ª£ multi-media"""
        items = self.q_table.selectedItems()
        if not items:
            return
        row = items[0].row()
        item_text = self.q_table.item(row, 1).text()

        try:
            qid = int(item_text)
        except (ValueError, IndexError):
            return

        q = self.db.execute_query("SELECT * FROM question_bank WHERE id=?", (qid,), fetch="one")
        if not q:
            return

        self.current_question_id = qid

        # Load n·ªôi dung theo lo·∫°i
        content_type = q.get("content_type", "text")

        if content_type == "text":
            self.content_container.setCurrentWidget(self.content_text)
            self.content_text.setPlainText(q.get("content_text", "") or "")
        elif content_type == "image":
            self.content_container.setCurrentWidget(self.content_image_viewer)
            # Load image t·ª´ content_data (BLOB)
            if q.get("content_data"):
                pixmap = QPixmap()
                pixmap.loadFromData(q["content_data"])
                self.content_image_viewer.set_pixmap(pixmap)
        elif content_type == "pdf":
            self.content_container.setCurrentWidget(self.content_pdf_viewer)
            # Load PDF info

        # T∆∞∆°ng t·ª± cho ƒë√°p √°n
        answer_type = q.get("answer_type", "text")
        if answer_type == "text":
            self.answer_container.setCurrentWidget(self.answer_text)
            self.answer_text.setPlainText(q.get("correct", "") or "")
        elif answer_type == "image":
            self.answer_container.setCurrentWidget(self.answer_image_viewer)
            if q.get("answer_data"):
                pixmap = QPixmap()
                pixmap.loadFromData(q["answer_data"])
                self.answer_image_viewer.set_pixmap(pixmap)

        # Load tags (gi·ªØ nguy√™n)
        if hasattr(self, 'tags_edit'):
            tags = self.db.execute_query(
                "SELECT tag_name FROM question_tags WHERE question_id=? ORDER BY tag_name",
                (qid,), fetch="all"
            ) or []
            tags_text = ", ".join([tag["tag_name"] for tag in tags])
            self.tags_edit.setText(tags_text)

        # Update preview
        self.update_preview()
    def show_table_context_menu(self, position):
        """Hi·ªÉn th·ªã context menu cho b·∫£ng"""
        if not self.q_table.itemAt(position):
            return

        menu = QtWidgets.QMenu(self)

        edit_action = menu.addAction("‚úèÔ∏è Ch·ªânh s·ª≠a")
        edit_action.triggered.connect(self.on_question_select)

        menu.addSeparator()

        export_menu = menu.addMenu("üì§ Xu·∫•t")
        export_menu.addAction("Xu·∫•t ra Word").triggered.connect(self.export_to_word)
        export_menu.addAction("Xu·∫•t ra PDF").triggered.connect(self.export_to_pdf)

        menu.addSeparator()

        delete_action = menu.addAction("üóëÔ∏è X√≥a")
        delete_action.triggered.connect(self.delete_question)

        menu.exec(self.q_table.mapToGlobal(position))

    def get_tree_path(self, tree_id: int) -> List[dict]:
        """L·∫•y ƒë∆∞·ªùng d·∫´n c·ªßa node"""
        path = []
        while tree_id:
            row = self.db.execute_query(
                "SELECT id, parent_id, name, level FROM exercise_tree WHERE id=?",
                (tree_id,), fetch="one"
            )
            if row:
                path.insert(0, row)
                tree_id = row["parent_id"]
            else:
                break
        return path

    # ========== NH√ìM 5: L∆ØU/C·∫¨P NH·∫¨T/X√ìA C√ÇU H·ªéI ========== #
    def save_question(self):
        """L∆∞u c√¢u h·ªèi"""
        tree_id = self._current_tree_id()
        if not tree_id:
            QtWidgets.QMessageBox.warning(self, "Ch∆∞a ch·ªçn th∆∞ m·ª•c", "Vui l√≤ng ch·ªçn v·ªã tr√≠ l∆∞u trong c√¢y.")
            return

        content = self.content_text.toPlainText().strip()
        answer = self.answer_text.toPlainText().strip()

        if not content:
            QtWidgets.QMessageBox.warning(self, "L·ªói", "N·ªôi dung c√¢u h·ªèi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
            return

        try:
            if self.current_question_id:
                # C·∫≠p nh·∫≠t
                self.db.execute_query(
                    "UPDATE question_bank SET content_text=?, correct=?, tree_id=?, modified_date=CURRENT_TIMESTAMP WHERE id=?",
                    (content, answer, tree_id, self.current_question_id)
                )
                self._save_question_history(self.current_question_id, "UPDATE", "", content)
                QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ c·∫≠p nh·∫≠t c√¢u h·ªèi.")
            else:
                # Th√™m m·ªõi
                new_id = self.db.execute_query(
                    "INSERT INTO question_bank(content_text, correct, tree_id) VALUES (?,?,?)",
                    (content, answer, tree_id)
                )
                self.current_question_id = new_id
                self._save_question_history(new_id, "CREATE", "", content)
                QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ l∆∞u c√¢u h·ªèi m·ªõi.")

            # Save tags
            self._save_question_tags()

            # Reload
            rows = self.db.execute_query("SELECT * FROM question_bank WHERE tree_id=?", (tree_id,), fetch="all") or []
            self._load_question_rows(rows)

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ l∆∞u: {e}")

    def delete_question(self):
        """X√≥a c√¢u h·ªèi"""
        if not self.current_question_id:
            QtWidgets.QMessageBox.warning(self, "Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn c√¢u h·ªèi ƒë·ªÉ x√≥a.")
            return

        if QtWidgets.QMessageBox.question(self, "X√°c nh·∫≠n",
                                          "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a c√¢u h·ªèi n√†y?") != QtWidgets.QMessageBox.Yes:
            return

        try:
            self.db.execute_query("DELETE FROM question_bank WHERE id=?", (self.current_question_id,))
            self.clear_question_form()

            tree_id = self._current_tree_id()
            if tree_id:
                rows = self.db.execute_query("SELECT * FROM question_bank WHERE tree_id=?", (tree_id,),
                                             fetch="all") or []
                self._load_question_rows(rows)

            QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ x√≥a c√¢u h·ªèi.")
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ x√≥a: {e}")

    def new_question(self):
        """T·∫°o c√¢u h·ªèi m·ªõi"""
        self.clear_question_form()
        self.content_text.setFocus()

    def clear_question_form(self):
        """X√≥a form"""
        self.current_question_id = None
        if hasattr(self, 'content_text'):
            self.content_text.clear()
        if hasattr(self, 'answer_text'):
            self.answer_text.clear()
        if hasattr(self, 'tags_edit'):
            self.tags_edit.clear()

    def _current_tree_id(self) -> int | None:
        """L·∫•y tree_id hi·ªán t·∫°i"""
        items = self.tree.selectedItems()
        if not items:
            return None
        return items[0].data(0, Qt.UserRole)

    def _save_question_tags(self):
        """L∆∞u tags cho c√¢u h·ªèi"""
        if not self.current_question_id or not hasattr(self, 'tags_edit'):
            return

        tags_text = self.tags_edit.text().strip()
        if not tags_text:
            return

        # X√≥a tags c≈©
        self.db.execute_query("DELETE FROM question_tags WHERE question_id=?", (self.current_question_id,))

        # Th√™m tags m·ªõi
        tag_names = [tag.strip() for tag in tags_text.split(',') if tag.strip()]
        for tag_name in tag_names:
            try:
                self.db.execute_query(
                    "INSERT INTO question_tags(question_id, tag_name) VALUES (?,?)",
                    (self.current_question_id, tag_name)
                )
            except:
                pass

    def _save_question_history(self, question_id, action_type, old_content, new_content):
        """L∆∞u l·ªãch s·ª≠ thay ƒë·ªïi"""
        try:
            self.db.execute_query(
                "INSERT INTO question_history(question_id, action_type, old_content, new_content) VALUES (?,?,?,?)",
                (question_id, action_type, old_content, new_content)
            )
        except:
            pass

    def _load_question_history(self, question_id):
        """Load l·ªãch s·ª≠ thay ƒë·ªïi"""
        if not hasattr(self, 'history_table'):
            return

        history = self.db.execute_query(
            "SELECT * FROM question_history WHERE question_id=? ORDER BY changed_date DESC LIMIT 50",
            (question_id,), fetch="all"
        ) or []

        self.history_table.setRowCount(0)

        for h in history:
            row_idx = self.history_table.rowCount()
            self.history_table.insertRow(row_idx)

            time_str = h.get("changed_date", "")

            self.history_table.setItem(row_idx, 0, QtWidgets.QTableWidgetItem(time_str))
            self.history_table.setItem(row_idx, 1, QtWidgets.QTableWidgetItem(h.get("action_type", "")))

            old_content = (h.get("old_content", "") or "")[:100]
            new_content = (h.get("new_content", "") or "")[:100]

            self.history_table.setItem(row_idx, 2, QtWidgets.QTableWidgetItem(old_content))
            self.history_table.setItem(row_idx, 3, QtWidgets.QTableWidgetItem(new_content))

    def edit_current_question(self):
        """M·ªü dialog edit c√¢u h·ªèi hi·ªán t·∫°i"""
        if not self.current_question_id:
            QtWidgets.QMessageBox.warning(self, "Ch∆∞a ch·ªçn c√¢u h·ªèi",
                                          "Vui l√≤ng ch·ªçn c√¢u h·ªèi ƒë·ªÉ ch·ªânh s·ª≠a")
            return

        tree_id = self._current_tree_id()
        dialog = QuestionEditDialog(self.db, tree_id=tree_id,
                                    question_id=self.current_question_id, parent=self)
        if dialog.exec() == QtWidgets.QDialog.Accepted:
            self.on_tree_select()
    # ========== NH√ìM 6: T√åM KI·∫æM V√Ä L·ªåC ========== #
    def search_questions(self):
        """T√¨m ki·∫øm c√¢u h·ªèi"""
        keyword = (self.search_edit.text() or "").strip().lower()
        if not keyword:
            self.on_tree_select()
            return

        items = self.tree.selectedItems()
        if not items:
            QtWidgets.QMessageBox.warning(self, "Ch∆∞a ch·ªçn", "H√£y ch·ªçn th∆∞ m·ª•c ƒë·ªÉ t√¨m.")
            return

        root_id = items[0].data(0, Qt.UserRole)
        all_ids = self.get_all_subtree_ids(root_id)
        if not all_ids:
            return

        placeholders = ",".join(["?"] * len(all_ids))
        query = f"SELECT * FROM question_bank WHERE tree_id IN ({placeholders})"
        rows = self.db.execute_query(query, tuple(all_ids), fetch="all") or []

        # Filter theo keyword
        rows = [r for r in rows if keyword in (r.get("content_text", "") or "").lower()]
        self._load_question_rows(rows)

    def get_all_subtree_ids(self, root_id: int) -> List[int]:
        """L·∫•y t·∫•t c·∫£ ID con"""
        ids = [root_id]
        children = self.db.execute_query("SELECT id FROM exercise_tree WHERE parent_id=?", (root_id,),
                                         fetch="all") or []
        for c in children:
            ids.extend(self.get_all_subtree_ids(c["id"]))
        return ids

    def focus_search(self):
        """Focus v√†o √¥ t√¨m ki·∫øm"""
        self.search_edit.setFocus()
        self.search_edit.selectAll()

    def filter_by_combobox(self):
        """L·ªçc theo combobox"""
        # Simplified filtering logic
        self.on_tree_select()

    def clear_filters(self):
        """X√≥a b·ªô l·ªçc"""
        self.subject_cb.setCurrentIndex(0)
        self.grade_cb.setCurrentIndex(0)
        self.topic_cb.setCurrentIndex(0)
        self.type_cb.setCurrentIndex(0)
        self.level_cb.setCurrentIndex(0)
        self.on_tree_select()

    # ========== NH√ìM 7: LOAD D·ªÆ LI·ªÜU COMBOBOX ========== #
    def load_available_subjects(self):
        """Load danh s√°ch m√¥n"""
        rows = self.db.execute_query(
            "SELECT DISTINCT name FROM exercise_tree WHERE level='M√¥n' ORDER BY name ASC",
            fetch="all"
        ) or []
        self.subject_cb.clear()
        self.subject_cb.addItem("")
        for r in rows:
            self.subject_cb.addItem(r["name"])

    def load_available_grades(self):
        """Load danh s√°ch l·ªõp"""
        rows = self.db.execute_query(
            "SELECT DISTINCT name FROM exercise_tree WHERE level='L·ªõp' ORDER BY name ASC",
            fetch="all"
        ) or []
        self.grade_cb.clear()
        self.grade_cb.addItem("")
        for r in rows:
            self.grade_cb.addItem(r["name"])

    def load_available_topics(self):
        """Load danh s√°ch ch·ªß ƒë·ªÅ"""
        subject = self.subject_cb.currentText().strip()
        grade = self.grade_cb.currentText().strip()

        if not subject or not grade:
            self.topic_cb.clear()
            self.type_cb.clear()
            return

        rows = self.db.execute_query("""
            SELECT name FROM exercise_tree 
            WHERE level='Ch·ªß ƒë·ªÅ' AND parent_id IN (
                SELECT id FROM exercise_tree 
                WHERE name=? AND level='L·ªõp' AND parent_id IN (
                    SELECT id FROM exercise_tree WHERE name=? AND level='M√¥n'
                )
            )
        """, (grade, subject), fetch="all") or []

        self.topic_cb.clear()
        self.topic_cb.addItem("")
        for r in rows:
            self.topic_cb.addItem(r["name"])

    def load_available_types(self):
        """Load danh s√°ch d·∫°ng"""
        topic = self.topic_cb.currentText().strip()
        if not topic:
            self.type_cb.clear()
            return

        rows = self.db.execute_query("""
            SELECT name FROM exercise_tree
            WHERE level='D·∫°ng' AND parent_id IN (
                SELECT id FROM exercise_tree WHERE level='Ch·ªß ƒë·ªÅ' AND name=?
            )
        """, (topic,), fetch="all") or []

        self.type_cb.clear()
        self.type_cb.addItem("")
        for r in rows:
            self.type_cb.addItem(r["name"])

    # ========== NH√ìM 8: IMPORT/EXPORT ========== #
    def import_from_word(self):
        """Import t·ª´ Word"""
        try:
            from docx import Document
        except ImportError:
            QtWidgets.QMessageBox.critical(self, "L·ªói", "C·∫ßn c√†i ƒë·∫∑t python-docx: pip install python-docx")
            return

        file_path, _ = QtWidgets.QFileDialog.getOpenFileName(
            self, "Ch·ªçn file Word", "", "Word files (*.docx)")
        if not file_path:
            return

        tree_id = self._current_tree_id()
        if not tree_id:
            QtWidgets.QMessageBox.warning(self, "Thi·∫øu th∆∞ m·ª•c", "Vui l√≤ng ch·ªçn n∆°i l∆∞u c√¢u h·ªèi.")
            return

        try:
            doc = Document(file_path)
            count = 0

            for para in doc.paragraphs:
                text = para.text.strip()
                if text:
                    # Simple import - just save as content
                    self.db.execute_query(
                        "INSERT INTO question_bank(content_text, tree_id) VALUES (?,?)",
                        (text, tree_id)
                    )
                    count += 1

            # Reload
            rows = self.db.execute_query("SELECT * FROM question_bank WHERE tree_id=?", (tree_id,), fetch="all") or []
            self._load_question_rows(rows)

            QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ import {count} c√¢u h·ªèi.")

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ import: {e}")

    def export_to_word(self):
        """Export ra Word"""
        tree_id = self._current_tree_id()
        if not tree_id:
            QtWidgets.QMessageBox.warning(self, "Ch∆∞a ch·ªçn th∆∞ m·ª•c", "Vui l√≤ng ch·ªçn th∆∞ m·ª•c ƒë·ªÉ xu·∫•t.")
            return

        file_path, _ = QtWidgets.QFileDialog.getSaveFileName(self, "L∆∞u file Word", "", "Word files (*.docx)")
        if not file_path:
            return

        try:
            from docx import Document

            doc = Document()
            doc.add_heading('NG√ÇN H√ÄNG C√ÇU H·ªéI', 0)

            # Th√¥ng tin ƒë∆∞·ªùng d·∫´n
            path_info = self.get_tree_path(tree_id)
            if path_info:
                path_text = " > ".join([p["name"] for p in path_info])
                doc.add_paragraph(f"ƒê∆∞·ªùng d·∫´n: {path_text}")

            # L·∫•y c√¢u h·ªèi
            rows = self.db.execute_query("SELECT * FROM question_bank WHERE tree_id=?", (tree_id,), fetch="all") or []

            for i, row in enumerate(rows, 1):
                doc.add_paragraph(f"C√¢u {i}: {row.get('content_text', '')}", style='Heading 3')

                if row.get('correct'):
                    doc.add_paragraph(f"ƒê√°p √°n: {row['correct']}")

                doc.add_paragraph("")  # D√≤ng tr·ªëng

            doc.save(file_path)
            QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ xu·∫•t {len(rows)} c√¢u h·ªèi ra file Word.")

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ xu·∫•t file: {e}")

    def export_to_pdf(self):
        """Export ra PDF"""
        tree_id = self._current_tree_id()
        if not tree_id:
            QtWidgets.QMessageBox.warning(self, "Ch∆∞a ch·ªçn th∆∞ m·ª•c", "Vui l√≤ng ch·ªçn th∆∞ m·ª•c ƒë·ªÉ xu·∫•t.")
            return

        file_path, _ = QtWidgets.QFileDialog.getSaveFileName(self, "L∆∞u file PDF", "", "PDF files (*.pdf)")
        if not file_path:
            return

        try:
            from reportlab.lib.pagesizes import A4
            from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
            from reportlab.lib.styles import getSampleStyleSheet
            from reportlab.lib.units import inch

            doc = SimpleDocTemplate(file_path, pagesize=A4)
            styles = getSampleStyleSheet()
            story = []

            # Ti√™u ƒë·ªÅ
            title = Paragraph("NG√ÇN H√ÄNG C√ÇU H·ªéI", styles['Title'])
            story.append(title)
            story.append(Spacer(1, 0.2 * inch))

            # L·∫•y c√¢u h·ªèi
            rows = self.db.execute_query("SELECT * FROM question_bank WHERE tree_id=?", (tree_id,), fetch="all") or []

            for i, row in enumerate(rows, 1):
                question_para = Paragraph(f"<b>C√¢u {i}:</b> {row.get('content_text', '')}", styles['Normal'])
                story.append(question_para)

                if row.get('correct'):
                    answer_para = Paragraph(f"<b>ƒê√°p √°n:</b> {row['correct']}", styles['Normal'])
                    story.append(answer_para)

                story.append(Spacer(1, 0.2 * inch))

            doc.build(story)
            QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ xu·∫•t {len(rows)} c√¢u h·ªèi ra file PDF.")

        except ImportError:
            QtWidgets.QMessageBox.critical(self, "L·ªói", "C·∫ßn c√†i ƒë·∫∑t reportlab: pip install reportlab")
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ xu·∫•t PDF: {e}")

    # ========== NH√ìM 9: TEMPLATE ========== #
    def show_template_dialog(self):
        """Hi·ªÉn th·ªã dialog template"""
        QtWidgets.QMessageBox.information(self, "Th√¥ng tin", "Ch·ª©c nƒÉng template ƒëang ph√°t tri·ªÉn.")

    # ========== NH√ìM 10: TAGS ========== #
    def add_new_tag(self):
        """Th√™m tag m·ªõi"""
        if not hasattr(self, 'tags_edit') or not self.current_question_id:
            return

        tags_text = self.tags_edit.text().strip()
        if not tags_text:
            return

        tag_names = [tag.strip() for tag in tags_text.split(',') if tag.strip()]

        added_count = 0
        for tag_name in tag_names:
            try:
                self.db.execute_query(
                    "INSERT INTO question_tags(question_id, tag_name) VALUES (?,?)",
                    (self.current_question_id, tag_name)
                )
                added_count += 1
            except:
                pass

        if added_count > 0:
            self.tags_edit.clear()
            tree_id = self._current_tree_id()
            if tree_id:
                rows = self.db.execute_query("SELECT * FROM question_bank WHERE tree_id=?", (tree_id,),
                                             fetch="all") or []
                self._load_question_rows(rows)

    # ========== NH√ìM 11: PREVIEW V√Ä TH·ªêNG K√ä ========== #
    def update_preview(self):
        """C·∫≠p nh·∫≠t preview"""
        if not hasattr(self, 'preview_widget'):
            return

        content = self.content_text.toPlainText() if hasattr(self, 'content_text') else ""
        answer = self.answer_text.toPlainText() if hasattr(self, 'answer_text') else ""

        html = f"""
        <div style="font-family: Arial, sans-serif;">
            <h3 style="color: #2c3e50;">üìù C√¢u h·ªèi</h3>
            <p style="background: #f8f9fa; padding: 15px; border-left: 4px solid #007bff;">
                {content or '<em>Ch∆∞a c√≥ n·ªôi dung...</em>'}
            </p>
            <h4 style="color: #2c3e50;">‚úÖ ƒê√°p √°n</h4>
            <p style="background: #e8f5e9; padding: 15px;">
                {answer or '<em>Ch∆∞a c√≥ ƒë√°p √°n...</em>'}
            </p>
        </div>
        """
        self.preview_widget.setHtml(html)

    def update_statistics(self):
        """C·∫≠p nh·∫≠t th·ªëng k√™"""
        if not hasattr(self, 'stats_widget'):
            return

        try:
            # T·ªïng s·ªë c√¢u h·ªèi
            total = self.db.execute_query("SELECT COUNT(*) as count FROM question_bank", fetch="one")["count"]

            # Th·ªëng k√™ theo m·ª©c ƒë·ªô
            level_stats = self.db.execute_query("""
                SELECT e.name, COUNT(q.id) as count 
                FROM question_bank q 
                JOIN exercise_tree e ON e.id = q.tree_id 
                WHERE e.level = 'M·ª©c ƒë·ªô'
                GROUP BY e.name
                ORDER BY count DESC
            """, fetch="all") or []

            # T·∫°o HTML th·ªëng k√™
            stats_html = f"""
            <div style="font-family: Arial, sans-serif;">
                <h2 style="color: #2c3e50;">üìä Th·ªëng k√™</h2>
                <p><strong>T·ªïng s·ªë c√¢u h·ªèi:</strong> {total}</p>

                <h3>Ph√¢n b·ªë theo m·ª©c ƒë·ªô:</h3>
                <ul>
            """

            for stat in level_stats:
                percentage = (stat["count"] / total * 100) if total > 0 else 0
                stats_html += f"<li>{stat['name']}: {stat['count']} ({percentage:.1f}%)</li>"

            stats_html += "</ul></div>"

            self.stats_widget.setHtml(stats_html)

        except Exception as e:
            self.stats_widget.setHtml(f"<p style='color: red;'>L·ªói: {e}</p>")

    def refresh_all(self):
        """L√†m m·ªõi to√†n b·ªô"""
        self.refresh_tree()
        self.load_available_subjects()
        self.load_available_grades()
        self.on_tree_select()
        self.update_statistics()
class ImageViewer(QtWidgets.QWidget):
    """Widget hi·ªÉn th·ªã v√† x·ª≠ l√Ω ·∫£nh"""

    def __init__(self):
        super().__init__()
        layout = QtWidgets.QVBoxLayout(self)

        # Scroll area ƒë·ªÉ hi·ªÉn th·ªã ·∫£nh l·ªõn
        scroll = QtWidgets.QScrollArea()
        self.image_label = QtWidgets.QLabel()
        self.image_label.setAlignment(Qt.AlignCenter)
        self.image_label.setScaledContents(False)  # Gi·ªØ t·ª∑ l·ªá ·∫£nh
        scroll.setWidget(self.image_label)
        scroll.setWidgetResizable(True)
        layout.addWidget(scroll)

        # Toolbar zoom
        toolbar = QtWidgets.QToolBar()
        toolbar.addAction("üîç+").triggered.connect(lambda: self.zoom(1.2))
        toolbar.addAction("üîç-").triggered.connect(lambda: self.zoom(0.8))
        toolbar.addAction("üíØ").triggered.connect(self.fit_to_window)
        toolbar.addAction("üìã Paste").triggered.connect(self.paste_image)
        layout.addWidget(toolbar)

        self.current_pixmap = None
        self.scale_factor = 1.0

        # Enable drop
        self.setAcceptDrops(True)

    def set_image(self, image):
        """Set QImage t·ª´ clipboard"""
        if isinstance(image, QtGui.QImage):
            self.current_pixmap = QtGui.QPixmap.fromImage(image)
            self.display_image()
            return True
        return False

    def set_pixmap(self, pixmap):
        """Set QPixmap"""
        if isinstance(pixmap, QtGui.QPixmap):
            self.current_pixmap = pixmap
            self.display_image()
            return True
        return False

    def display_image(self):
        if self.current_pixmap and not self.current_pixmap.isNull():
            # Scale ·∫£nh nh∆∞ng gi·ªØ t·ª∑ l·ªá
            scaled = self.current_pixmap.scaled(
                self.current_pixmap.size() * self.scale_factor,
                Qt.KeepAspectRatio,
                Qt.SmoothTransformation
            )
            self.image_label.setPixmap(scaled)

    def paste_image(self):
        """Paste ·∫£nh tr·ª±c ti·∫øp trong viewer"""
        clipboard = QtWidgets.QApplication.clipboard()
        mime_data = clipboard.mimeData()

        if mime_data.hasImage():
            image = clipboard.image()
            if not image.isNull():
                self.set_image(image)
                print("‚úÖ ƒê√£ paste ·∫£nh v√†o viewer")
        else:
            print("‚ùå Kh√¥ng c√≥ ·∫£nh trong clipboard")

    def dragEnterEvent(self, event):
        """X·ª≠ l√Ω k√©o th·∫£ file"""
        if event.mimeData().hasImage() or event.mimeData().hasUrls():
            event.acceptProposedAction()

    def dropEvent(self, event):
        """X·ª≠ l√Ω th·∫£ file"""
        mime_data = event.mimeData()

        if mime_data.hasImage():
            self.set_image(mime_data.imageData())
        elif mime_data.hasUrls():
            for url in mime_data.urls():
                file_path = url.toLocalFile()
                if file_path.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp')):
                    pixmap = QtGui.QPixmap(file_path)
                    if not pixmap.isNull():
                        self.set_pixmap(pixmap)
                        break

    # Th√™m v√†o class ImageViewer hi·ªán t·∫°i c·ªßa b·∫°n:

    def fit_to_window(self):
        """Reset zoom v·ªÅ 100%"""
        self.scale_factor = 1.0
        self.display_image()

    def zoom(self, factor):
        """Zoom ·∫£nh"""
        if not self.current_pixmap:
            return

        self.scale_factor *= factor
        # Gi·ªõi h·∫°n zoom t·ª´ 10% ƒë·∫øn 500%
        self.scale_factor = max(0.1, min(5.0, self.scale_factor))
        self.display_image()

    def paste_image(self):
        """Paste ·∫£nh t·ª´ clipboard"""
        clipboard = QtWidgets.QApplication.clipboard()
        if clipboard.mimeData().hasImage():
            image = clipboard.image()
            if not image.isNull():
                self.set_image(image)

    def clear_image(self):
        """X√≥a ·∫£nh"""
        self.current_pixmap = None
        self.image_label.clear()
class PDFViewer(QtWidgets.QWidget):
    """Widget hi·ªÉn th·ªã PDF (placeholder - c·∫ßn th√™m th∆∞ vi·ªán PDF)"""

    def __init__(self):
        super().__init__()
        layout = QtWidgets.QVBoxLayout(self)

        self.info_label = QtWidgets.QLabel("üìÑ PDF Viewer")
        self.info_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(self.info_label)

        # Toolbar cho PDF
        toolbar = QtWidgets.QToolBar()
        self.page_spin = QtWidgets.QSpinBox()
        self.page_spin.setMinimum(1)
        toolbar.addWidget(QtWidgets.QLabel("Trang:"))
        toolbar.addWidget(self.page_spin)
        toolbar.addAction("‚¨ÖÔ∏è").triggered.connect(self.prev_page)
        toolbar.addAction("‚û°Ô∏è").triggered.connect(self.next_page)
        layout.addWidget(toolbar)

        self.pdf_path = None
        self.current_page = 1
        self.total_pages = 1

    def load_pdf(self, file_path):
        """Load PDF file"""
        self.pdf_path = file_path
        self.info_label.setText(f"üìÑ {os.path.basename(file_path)}")
        # TODO: Implement PDF rendering v·ªõi PyMuPDF ho·∫∑c pdf2image

    def prev_page(self):
        if self.current_page > 1:
            self.current_page -= 1
            self.page_spin.setValue(self.current_page)

    def next_page(self):
        if self.current_page < self.total_pages:
            self.current_page += 1
            self.page_spin.setValue(self.current_page)
class LaTeXInputDialog(QtWidgets.QDialog):
    """Dialog nh·∫≠p c√¥ng th·ª©c LaTeX"""

    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("‚àë Nh·∫≠p c√¥ng th·ª©c LaTeX")
        self.resize(500, 300)

        layout = QtWidgets.QVBoxLayout(self)

        layout.addWidget(QtWidgets.QLabel("Nh·∫≠p c√¥ng th·ª©c LaTeX:"))

        self.latex_edit = QtWidgets.QTextEdit()
        self.latex_edit.setPlaceholderText(r"\frac{a}{b} ho·∫∑c \int_{0}^{1} x^2 dx")
        layout.addWidget(self.latex_edit)

        # Preview (n·∫øu c√≥ th∆∞ vi·ªán render LaTeX)
        self.preview_label = QtWidgets.QLabel("Preview s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y")
        self.preview_label.setAlignment(Qt.AlignCenter)
        self.preview_label.setStyleSheet("border: 1px solid #ccc; padding: 10px;")
        layout.addWidget(self.preview_label)

        # Buttons
        button_layout = QtWidgets.QHBoxLayout()
        ok_btn = QtWidgets.QPushButton("OK")
        ok_btn.clicked.connect(self.accept)
        cancel_btn = QtWidgets.QPushButton("H·ªßy")
        cancel_btn.clicked.connect(self.reject)
        button_layout.addWidget(cancel_btn)
        button_layout.addWidget(ok_btn)
        layout.addLayout(button_layout)

    def get_latex(self):
        return self.latex_edit.toPlainText()
class QuestionEditDialog(QtWidgets.QDialog):
    def __init__(self, db_manager, tree_id=None, question_id=None, parent=None):
        super().__init__(parent)
        self.db = db_manager
        self.tree_id = tree_id
        self.question_id = question_id
        self.content_type = "text"  # text, image, pdf, word
        self.answer_type = "text"
        self.content_data = None
        self.answer_data = None

        self.setup_ui()
        if question_id:
            self.load_question_data()

    def setup_ui(self):
        self.setWindowTitle("‚ûï Th√™m c√¢u h·ªèi m·ªõi" if not self.question_id else "‚úèÔ∏è Ch·ªânh s·ª≠a c√¢u h·ªèi")
        self.resize(900, 700)

        layout = QtWidgets.QVBoxLayout(self)

        # Toolbar cho ch·ªçn lo·∫°i n·ªôi dung
        toolbar = QtWidgets.QToolBar()
        toolbar.setToolButtonStyle(Qt.ToolButtonTextBesideIcon)

        # Nh√≥m n√∫t cho C√¢u h·ªèi
        toolbar.addWidget(QtWidgets.QLabel("üìù Th√™m c√¢u h·ªèi:"))

        text_action = toolbar.addAction("üìù VƒÉn b·∫£n")
        text_action.triggered.connect(lambda: self.add_content("text"))

        image_action = toolbar.addAction("üñºÔ∏è ·∫¢nh")
        image_action.triggered.connect(lambda: self.add_content("image"))

        pdf_action = toolbar.addAction("üìÑ PDF")
        pdf_action.triggered.connect(lambda: self.add_content("pdf"))

        word_action = toolbar.addAction("üìò Word")
        word_action.triggered.connect(lambda: self.add_content("word"))

        toolbar.addSeparator()

        latex_action = toolbar.addAction("‚àë LaTeX")
        latex_action.triggered.connect(self.insert_latex)

        layout.addWidget(toolbar)

        # Splitter cho c√¢u h·ªèi v√† ƒë√°p √°n
        splitter = QtWidgets.QSplitter(Qt.Vertical)

        # Ph·∫ßn 1: C√¢u h·ªèi
        question_group = QtWidgets.QGroupBox("üìã N·ªòI DUNG C√ÇU H·ªéI")
        question_layout = QtWidgets.QVBoxLayout(question_group)

        # Widget hi·ªÉn th·ªã n·ªôi dung (c√≥ th·ªÉ l√† text, image, pdf viewer)
        self.content_widget = QtWidgets.QStackedWidget()

        # Text editor cho vƒÉn b·∫£n
        self.text_editor = QtWidgets.QTextEdit()
        self.text_editor.installEventFilter(self)
        self.text_editor.setAcceptRichText(True)
        self.text_editor.setPlaceholderText("Nh·∫≠p n·ªôi dung c√¢u h·ªèi ho·∫∑c d√°n ·∫£nh (Ctrl+V)...")
        self.content_widget.addWidget(self.text_editor)

        # Image viewer
        self.image_viewer = ImageViewer()
        self.content_widget.addWidget(self.image_viewer)

        # PDF viewer
        self.pdf_viewer = PDFViewer()
        self.content_widget.addWidget(self.pdf_viewer)

        question_layout.addWidget(self.content_widget)
        splitter.addWidget(question_group)

        # Ph·∫ßn 2: ƒê√°p √°n (c√≥ th·ªÉ ·∫©n/hi·ªán)
        self.answer_group = QtWidgets.QGroupBox("‚úÖ ƒê√ÅP √ÅN")
        self.answer_group.setCheckable(True)
        self.answer_group.setChecked(True)
        answer_layout = QtWidgets.QVBoxLayout(self.answer_group)

        # Toolbar cho ƒë√°p √°n
        answer_toolbar = QtWidgets.QToolBar()
        answer_toolbar.addWidget(QtWidgets.QLabel("Th√™m ƒë√°p √°n:"))

        ans_text_action = answer_toolbar.addAction("üìù VƒÉn b·∫£n")
        ans_text_action.triggered.connect(lambda: self.add_answer("text"))

        ans_image_action = answer_toolbar.addAction("üñºÔ∏è ·∫¢nh")
        ans_image_action.triggered.connect(lambda: self.add_answer("image"))

        answer_layout.addWidget(answer_toolbar)

        # Widget hi·ªÉn th·ªã ƒë√°p √°n
        self.answer_widget = QtWidgets.QStackedWidget()

        self.answer_text_editor = QtWidgets.QTextEdit()
        self.answer_text_editor.setMaximumHeight(150)
        self.answer_widget.addWidget(self.answer_text_editor)

        self.answer_image_viewer = ImageViewer()
        self.answer_widget.addWidget(self.answer_image_viewer)

        answer_layout.addWidget(self.answer_widget)
        splitter.addWidget(self.answer_group)

        layout.addWidget(splitter)

        # Ph·∫ßn 3: Tags
        tags_group = QtWidgets.QGroupBox("üè∑Ô∏è TAGS")
        tags_layout = QtWidgets.QHBoxLayout(tags_group)

        self.tags_edit = QtWidgets.QLineEdit()
        self.tags_edit.setPlaceholderText("Nh·∫≠p tags: m√¥n, l·ªõp, ch·ªß ƒë·ªÅ, m·ª©c ƒë·ªô (ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y)")
        tags_layout.addWidget(self.tags_edit)

        layout.addWidget(tags_group)

        # Buttons
        button_layout = QtWidgets.QHBoxLayout()

        save_btn = QtWidgets.QPushButton("üíæ L∆∞u")
        save_btn.setStyleSheet("QPushButton { background: #28a745; color: white; padding: 10px 30px; }")
        save_btn.clicked.connect(self.save_question)

        cancel_btn = QtWidgets.QPushButton("‚ùå H·ªßy")
        cancel_btn.setStyleSheet("QPushButton { background: #6c757d; color: white; padding: 10px 30px; }")
        cancel_btn.clicked.connect(self.reject)

        button_layout.addStretch()
        button_layout.addWidget(cancel_btn)
        button_layout.addWidget(save_btn)

        layout.addLayout(button_layout)

        # Enable paste t·ª´ clipboard
        self.setup_clipboard()

    def setup_clipboard(self):
        """X·ª≠ l√Ω paste ·∫£nh t·ª´ clipboard"""
        shortcut = QShortcut(QKeySequence.Paste, self)  # ‚úÖ cross-platform (Ctrl+V / Cmd+V)
        shortcut.activated.connect(self.paste_from_clipboard)

    def paste_from_clipboard(self):
        """D√°n n·ªôi dung (∆∞u ti√™n ·∫£nh) t·ª´ clipboard v√†o n·ªôi dung c√¢u h·ªèi"""
        try:
            cb = QtWidgets.QApplication.clipboard()
            md = cb.mimeData()

            def qimage_from_clipboard():
                # 1) ·∫¢nh thu·∫ßn
                if md.hasImage():
                    img = cb.image()
                    if not img.isNull():
                        return img
                # 2) Fallback pixmap (Windows hay d√πng)
                pm = cb.pixmap()
                if not pm.isNull():
                    return pm.toImage()
                # 3) ·∫¢nh nh√∫ng base64 trong HTML
                if md.hasHtml():
                    import re, base64
                    html = md.html()
                    m = re.search(r'data:image/(png|jpeg|jpg);base64,([A-Za-z0-9+/=]+)', html, re.I)
                    if m:
                        fmt = m.group(1).upper()
                        ba = QtCore.QByteArray.fromBase64(m.group(2).encode('ascii'))
                        img = QtGui.QImage()
                        if img.loadFromData(ba, fmt):
                            return img
                return None

            image = qimage_from_clipboard()

            if image:
                # Chuy·ªÉn sang ch·∫ø ƒë·ªô ·∫£nh v√† hi·ªÉn th·ªã
                self.content_type = "image"
                self.content_widget.setCurrentWidget(self.image_viewer)
                self.image_viewer.set_image(image)

                # L∆∞u t·∫°m bytes PNG ƒë·ªÉ save xu·ªëng DB khi b·∫•m L∆∞u
                ba = QtCore.QByteArray()
                buff = QtCore.QBuffer(ba)
                buff.open(QtCore.QIODevice.WriteOnly)
                image.save(buff, "PNG")
                self.content_data = bytes(ba)

                QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ d√°n ·∫£nh t·ª´ clipboard!")
                return

            # N·∫øu kh√¥ng c√≥ ·∫£nh, d√°n text b√¨nh th∆∞·ªùng v√†o editor (n·∫øu ƒëang ·ªü ch·∫ø ƒë·ªô text)
            if md.hasText():
                text = md.text()
                if self.content_widget.currentWidget() != self.text_editor:
                    # N·∫øu ƒëang ·ªü m√†n ·∫£nh, chuy·ªÉn v·ªÅ text
                    self.add_content("text")
                cursor = self.text_editor.textCursor()
                cursor.insertText(text)
                return

            QtWidgets.QMessageBox.information(self, "Th√¥ng b√°o", "Clipboard kh√¥ng c√≥ n·ªôi dung ph√π h·ª£p ƒë·ªÉ d√°n.")
        except Exception as e:
            QtWidgets.QMessageBox.warning(self, "L·ªói", f"Kh√¥ng th·ªÉ d√°n: {e}")
    def eventFilter(self, obj, event):
        """B·∫Øt s·ª± ki·ªán keyboard cho text editor"""
        if obj == self.text_editor and event.type() == QtCore.QEvent.KeyPress:
            if event.matches(QtGui.QKeySequence.Paste):
                self.paste_from_clipboard()
                return True
        return super().eventFilter(obj, event)
    def add_content(self, content_type):
        """Th√™m n·ªôi dung theo lo·∫°i"""
        if content_type == "text":
            self.content_type = "text"
            self.content_widget.setCurrentWidget(self.text_editor)

        elif content_type == "image":
            file_path, _ = QtWidgets.QFileDialog.getOpenFileName(
                self, "Ch·ªçn ·∫£nh", "", "Images (*.png *.jpg *.jpeg *.gif *.bmp)")
            if file_path:
                self.content_type = "image"
                pixmap = QPixmap(file_path)
                self.image_viewer.set_pixmap(pixmap)
                self.content_widget.setCurrentWidget(self.image_viewer)

        elif content_type == "pdf":
            file_path, _ = QtWidgets.QFileDialog.getOpenFileName(
                self, "Ch·ªçn PDF", "", "PDF Files (*.pdf)")
            if file_path:
                self.content_type = "pdf"
                self.pdf_viewer.load_pdf(file_path)
                self.content_widget.setCurrentWidget(self.pdf_viewer)

        elif content_type == "word":
            QtWidgets.QMessageBox.information(self, "Th√¥ng b√°o",
                                              "Ch·ª©c nƒÉng import Word ƒëang ph√°t tri·ªÉn")

    def add_answer(self, answer_type):
        """Th√™m ƒë√°p √°n theo lo·∫°i"""
        if answer_type == "text":
            self.answer_type = "text"
            self.answer_widget.setCurrentWidget(self.answer_text_editor)

        elif answer_type == "image":
            file_path, _ = QtWidgets.QFileDialog.getOpenFileName(
                self, "Ch·ªçn ·∫£nh ƒë√°p √°n", "", "Images (*.png *.jpg *.jpeg *.gif *.bmp)")
            if file_path:
                self.answer_type = "image"
                pixmap = QPixmap(file_path)
                self.answer_image_viewer.set_pixmap(pixmap)
                self.answer_widget.setCurrentWidget(self.answer_image_viewer)

    def insert_latex(self):
        """Ch√®n c√¥ng th·ª©c LaTeX"""
        dialog = LaTeXInputDialog(self)
        if dialog.exec() == QtWidgets.QDialog.Accepted:
            latex_code = dialog.get_latex()
            if self.content_type == "text":
                cursor = self.text_editor.textCursor()
                cursor.insertText(f"$${latex_code}$$")

    def save_question(self):
        """L∆∞u c√¢u h·ªèi v√†o database"""
        try:
            if not self.tree_id:
                QtWidgets.QMessageBox.warning(self, "Thi·∫øu th∆∞ m·ª•c", "Vui l√≤ng ch·ªçn v·ªã tr√≠ l∆∞u trong c√¢y.")
                return

            # Chu·∫©n b·ªã d·ªØ li·ªáu n·ªôi dung
            content_text = None
            content_data = None
            if self.content_type == "text":
                content_text = (self.text_editor.toPlainText() or "").strip()
                if not content_text:
                    QtWidgets.QMessageBox.warning(self, "Thi·∫øu n·ªôi dung", "N·ªôi dung c√¢u h·ªèi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")
                    return
            elif self.content_type == "image":
                # ∆∞u ti√™n self.content_data (ƒë√£ set khi d√°n); n·∫øu ch∆∞a c√≥, l·∫•y t·ª´ viewer
                if self.content_data is None and self.image_viewer.current_pixmap:
                    ba = QtCore.QByteArray()
                    buff = QtCore.QBuffer(ba)
                    buff.open(QtCore.QIODevice.WriteOnly)
                    self.image_viewer.current_pixmap.toImage().save(buff, "PNG")
                    self.content_data = bytes(ba)
                content_data = self.content_data

            # Chu·∫©n b·ªã d·ªØ li·ªáu ƒë√°p √°n (ƒë∆°n gi·∫£n: text ho·∫∑c ·∫£nh)
            answer_text = None
            answer_data = None
            if self.answer_type == "text":
                answer_text = (self.answer_text_editor.toPlainText() or "").strip()
            elif self.answer_type == "image" and self.answer_image_viewer.current_pixmap:
                ba = QtCore.QByteArray()
                buff = QtCore.QBuffer(ba)
                buff.open(QtCore.QIODevice.WriteOnly)
                self.answer_image_viewer.current_pixmap.toImage().save(buff, "PNG")
                answer_data = bytes(ba)

            # Insert/Update
            if self.question_id:
                self.db.execute_query(
                    """UPDATE question_bank
                       SET content_text=?, content_type=?, content_data=?,
                           answer_type=?, answer_data=?,
                           correct=?,
                           tree_id=?, modified_date=CURRENT_TIMESTAMP
                       WHERE id=?""",
                    (content_text, self.content_type, content_data,
                     self.answer_type, answer_data,
                     answer_text,  # d√πng c·ªôt 'correct' ƒë·ªÉ l∆∞u ƒë√°p √°n text ng·∫Øn
                     self.tree_id, self.question_id)
                )
            else:
                new_id = self.db.execute_query(
                    """INSERT INTO question_bank
                       (content_text, content_type, content_data,
                        answer_type, answer_data, correct, tree_id)
                       VALUES (?,?,?,?,?,?,?)""",
                    (content_text, self.content_type, content_data,
                     self.answer_type, answer_data, answer_text, self.tree_id)
                )
                self.question_id = new_id

            QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ l∆∞u c√¢u h·ªèi.")
            self.accept()
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ l∆∞u: {e}")


class TreeNodeDialog(QtWidgets.QDialog):
    def __init__(self, db_manager, mode="add", node_id=None, parent=None):
        super().__init__(parent)
        self.db = db_manager
        self.mode = mode  # "add" ho·∫∑c "edit"
        self.node_id = node_id
        self.parent_id = None

        self._setup_dialog()
        self._build_ui()
        self._load_data()

    def _setup_dialog(self):
        """Thi·∫øt l·∫≠p dialog"""
        if self.mode == "add":
            self.setWindowTitle("‚ûï Th√™m nh√°nh m·ªõi")
        else:
            self.setWindowTitle("‚úèÔ∏è S·ª≠a nh√°nh")

        self.setModal(True)
        self.resize(450, 400)

    def _build_ui(self):
        """X√¢y d·ª±ng giao di·ªán"""
        layout = QtWidgets.QVBoxLayout(self)
        layout.setSpacing(15)
        layout.setContentsMargins(20, 20, 20, 20)

        # Header
        header = QtWidgets.QLabel()
        if self.mode == "add":
            header.setText("‚ûï Th√™m nh√°nh m·ªõi v√†o c√¢y th∆∞ m·ª•c")
        else:
            header.setText("‚úèÔ∏è Ch·ªânh s·ª≠a th√¥ng tin nh√°nh")

        header.setStyleSheet("""
            QLabel {
                font-size: 16px;
                font-weight: bold;
                color: #2E86AB;
                padding: 15px;
                background-color: #f8f9fa;
                border-radius: 8px;
                border: 1px solid #dee2e6;
            }
        """)
        layout.addWidget(header)

        # Form container
        form_container = QtWidgets.QWidget()
        form_container.setStyleSheet("""
            QWidget {
                background-color: white;
                border-radius: 8px;
                border: 1px solid #e1e5e9;
            }
        """)

        form_layout = QtWidgets.QFormLayout(form_container)
        form_layout.setSpacing(12)
        form_layout.setContentsMargins(20, 20, 20, 20)

        # Parent selection (ch·ªâ hi·ªán khi th√™m)
        if self.mode == "add":
            self.parent_combo = QtWidgets.QComboBox()
            self.parent_combo.addItem("(Kh√¥ng c√≥ parent - C·∫•p g·ªëc)", None)
            self._load_parent_options()

            parent_label = QtWidgets.QLabel("üìÅ Nh√°nh cha:")
            parent_label.setStyleSheet("font-weight: 500; color: #495057;")
            form_layout.addRow(parent_label, self.parent_combo)

        # T√™n nh√°nh
        self.name_edit = QtWidgets.QLineEdit()
        self.name_edit.setPlaceholderText("Nh·∫≠p t√™n nh√°nh...")

        name_label = QtWidgets.QLabel("üìù T√™n nh√°nh:")
        name_label.setStyleSheet("font-weight: 500; color: #495057;")
        form_layout.addRow(name_label, self.name_edit)

        # C·∫•p ƒë·ªô
        self.level_combo = QtWidgets.QComboBox()
        self.level_combo.addItems(["M√¥n", "L·ªõp", "Ch·ªß ƒë·ªÅ", "D·∫°ng", "M·ª©c ƒë·ªô"])

        level_label = QtWidgets.QLabel("üìä C·∫•p ƒë·ªô:")
        level_label.setStyleSheet("font-weight: 500; color: #495057;")
        form_layout.addRow(level_label, self.level_combo)

        # M√¥ t·∫£
        self.description_edit = QtWidgets.QTextEdit()
        self.description_edit.setMaximumHeight(100)
        self.description_edit.setPlaceholderText("Nh·∫≠p m√¥ t·∫£ chi ti·∫øt...")

        desc_label = QtWidgets.QLabel("üìÑ M√¥ t·∫£:")
        desc_label.setStyleSheet("font-weight: 500; color: #495057;")
        form_layout.addRow(desc_label, self.description_edit)

        # Style cho form inputs
        input_style = """
            QLineEdit, QComboBox, QTextEdit {
                padding: 10px;
                border: 2px solid #e1e5e9;
                border-radius: 6px;
                font-size: 13px;
                background-color: white;
            }
            QLineEdit:focus, QComboBox:focus, QTextEdit:focus {
                border-color: #2E86AB;
                outline: none;
                background-color: #f8fbff;
            }
        """

        self.name_edit.setStyleSheet(input_style)
        self.level_combo.setStyleSheet(input_style)
        self.description_edit.setStyleSheet(input_style)

        if hasattr(self, 'parent_combo'):
            self.parent_combo.setStyleSheet(input_style)

        layout.addWidget(form_container)

        # Buttons
        button_layout = QtWidgets.QHBoxLayout()
        button_layout.setContentsMargins(0, 10, 0, 0)

        cancel_btn = QtWidgets.QPushButton("‚ùå H·ªßy")
        cancel_btn.setFixedSize(100, 40)
        cancel_btn.clicked.connect(self.reject)
        cancel_btn.setStyleSheet("""
            QPushButton {
                background-color: #6c757d;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 6px;
                font-weight: 600;
                font-size: 13px;
            }
            QPushButton:hover {
                background-color: #5a6268;
            }
        """)

        # Save button
        if self.mode == "add":
            save_btn = QtWidgets.QPushButton("‚ûï Th√™m")
            save_btn.setStyleSheet("""
                QPushButton {
                    background-color: #28a745;
                    color: white;
                    border: none;
                    padding: 10px 20px;
                    border-radius: 6px;
                    font-weight: 600;
                    font-size: 13px;
                }
                QPushButton:hover {
                    background-color: #218838;
                }
            """)
        else:
            save_btn = QtWidgets.QPushButton("üíæ L∆∞u")
            save_btn.setStyleSheet("""
                QPushButton {
                    background-color: #007bff;
                    color: white;
                    border: none;
                    padding: 10px 20px;
                    border-radius: 6px;
                    font-weight: 600;
                    font-size: 13px;
                }
                QPushButton:hover {
                    background-color: #0056b3;
                }
            """)

        save_btn.setFixedSize(100, 40)
        save_btn.clicked.connect(self.accept)
        save_btn.setDefault(True)

        button_layout.addStretch()
        button_layout.addWidget(cancel_btn)
        button_layout.addSpacing(10)
        button_layout.addWidget(save_btn)

        layout.addWidget(QtWidgets.QWidget())
        layout.layout().addLayout(button_layout)

        # Focus v√†o name edit
        self.name_edit.setFocus()

    def _load_parent_options(self):
        """Load danh s√°ch parent c√≥ th·ªÉ ch·ªçn"""
        if self.mode != "add":
            return

        try:
            rows = self.db.execute_query(
                "SELECT id, name, level FROM exercise_tree ORDER BY level, name",
                fetch="all"
            ) or []

            for row in rows:
                # N·∫øu ƒëang edit, kh√¥ng cho ch·ªçn ch√≠nh n√≥ l√†m parent
                if self.mode == "edit" and row["id"] == self.node_id:
                    continue

                display_text = f"{row['name']} ({row['level']})"
                self.parent_combo.addItem(display_text, row["id"])

        except Exception as e:
            print(f"L·ªói load parent options: {e}")

    def set_parent_id(self, parent_id):
        """ƒê·∫∑t parent ƒë∆∞·ª£c ch·ªçn"""
        self.parent_id = parent_id

        if self.mode == "add" and hasattr(self, 'parent_combo'):
            # T√¨m v√† ch·ªçn parent trong combo
            for i in range(self.parent_combo.count()):
                if self.parent_combo.itemData(i) == parent_id:
                    self.parent_combo.setCurrentIndex(i)
                    break

    def _load_data(self):
        """Load d·ªØ li·ªáu n·∫øu ƒëang edit"""
        if self.mode != "edit" or not self.node_id:
            return

        try:
            row = self.db.execute_query(
                "SELECT name, level, description FROM exercise_tree WHERE id = ?",
                (self.node_id,), fetch="one"
            )

            if row:
                self.name_edit.setText(row["name"] or "")

                # Set level
                level = row["level"] or "M√¥n"
                index = self.level_combo.findText(level)
                if index >= 0:
                    self.level_combo.setCurrentIndex(index)

                # Description
                description = row.get('description', '') or ''
                self.description_edit.setPlainText(description)

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu: {e}")

    def accept(self):
        """X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n Save/Add"""
        if not self._validate_input():
            return

        name = self.name_edit.text().strip()
        level = self.level_combo.currentText()
        description = self.description_edit.toPlainText().strip()

        try:
            if self.mode == "add":
                # Th√™m node m·ªõi
                parent_id = None
                if hasattr(self, 'parent_combo'):
                    parent_id = self.parent_combo.currentData()
                elif self.parent_id:
                    parent_id = self.parent_id

                self.db.execute_query(
                    "INSERT INTO exercise_tree (parent_id, name, level, description) VALUES (?, ?, ?, ?)",
                    (parent_id, name, level, description)
                )

                QtWidgets.QMessageBox.information(
                    self, "Th√†nh c√¥ng",
                    f"ƒê√£ th√™m nh√°nh '{name}' th√†nh c√¥ng!"
                )

            else:
                # C·∫≠p nh·∫≠t node
                self.db.execute_query(
                    "UPDATE exercise_tree SET name = ?, level = ?, description = ? WHERE id = ?",
                    (name, level, description, self.node_id)
                )

                QtWidgets.QMessageBox.information(
                    self, "Th√†nh c√¥ng",
                    f"ƒê√£ c·∫≠p nh·∫≠t nh√°nh '{name}' th√†nh c√¥ng!"
                )

            super().accept()

        except Exception as e:
            QtWidgets.QMessageBox.critical(
                self, "L·ªói database",
                f"Kh√¥ng th·ªÉ l∆∞u d·ªØ li·ªáu:\n{str(e)}"
            )

    def _validate_input(self):
        """Validate d·ªØ li·ªáu ƒë·∫ßu v√†o"""
        name = self.name_edit.text().strip()

        if not name:
            QtWidgets.QMessageBox.warning(
                self, "L·ªói",
                "T√™n nh√°nh kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!"
            )
            self.name_edit.setFocus()
            return False

        if len(name) > 100:
            QtWidgets.QMessageBox.warning(
                self, "L·ªói",
                "T√™n nh√°nh kh√¥ng ƒë∆∞·ª£c qu√° 100 k√Ω t·ª±!"
            )
            self.name_edit.setFocus()
            return False

        return True
# ========== CLASS QU·∫¢N L√ù C√ÇY N√ÇNG CAO ========== #
class TreeManagerDialog(QtWidgets.QDialog):
    def __init__(self, db_manager, parent=None):
        super().__init__(parent)
        self.db = db_manager
        self.setWindowTitle("‚öôÔ∏è Qu·∫£n l√Ω c√¢y th∆∞ m·ª•c")
        self.setModal(True)
        self.resize(800, 600)
        self._build_ui()
        self._load_tree_data()

    def _build_ui(self):
        """X√¢y d·ª±ng giao di·ªán"""
        layout = QtWidgets.QVBoxLayout(self)

        # Toolbar
        toolbar = QtWidgets.QToolBar()
        toolbar.setToolButtonStyle(Qt.ToolButtonTextBesideIcon)

        add_action = toolbar.addAction("‚ûï Th√™m nh√°nh")
        add_action.triggered.connect(self._add_node)

        edit_action = toolbar.addAction("‚úèÔ∏è S·ª≠a nh√°nh")
        edit_action.triggered.connect(self._edit_node)

        delete_action = toolbar.addAction("üóëÔ∏è X√≥a nh√°nh")
        delete_action.triggered.connect(self._delete_node)

        toolbar.addSeparator()

        export_action = toolbar.addAction("üì§ Xu·∫•t c·∫•u tr√∫c")
        export_action.triggered.connect(self._export_structure)

        layout.addWidget(toolbar)

        # Tree view
        self.tree_table = QtWidgets.QTreeWidget()
        self.tree_table.setHeaderLabels(["T√™n", "C·∫•p ƒë·ªô", "S·ªë c√¢u h·ªèi", "M√¥ t·∫£"])
        self.tree_table.setColumnWidth(0, 250)
        self.tree_table.setColumnWidth(1, 100)
        self.tree_table.setColumnWidth(2, 100)

        layout.addWidget(self.tree_table)

        # Buttons
        button_layout = QtWidgets.QHBoxLayout()

        close_btn = QtWidgets.QPushButton("ƒê√≥ng")
        close_btn.clicked.connect(self.accept)

        button_layout.addStretch()
        button_layout.addWidget(close_btn)

        layout.addLayout(button_layout)

    def _load_tree_data(self):
        """Load d·ªØ li·ªáu c√¢y"""
        # Implementation t∆∞∆°ng t·ª± refresh_tree nh∆∞ng hi·ªÉn th·ªã trong table
        pass

    def _add_node(self):
        """Th√™m node m·ªõi"""
        dialog = TreeNodeDialog(self.db, mode="add", parent=self)
        if dialog.exec() == QtWidgets.QDialog.Accepted:
            self._load_tree_data()

    def _edit_node(self):
        """S·ª≠a node ƒë∆∞·ª£c ch·ªçn"""
        # Implementation
        pass

    def _delete_node(self):
        """X√≥a node ƒë∆∞·ª£c ch·ªçn"""
        # Implementation
        pass

    def _export_structure(self):
        """Xu·∫•t c·∫•u tr√∫c c√¢y"""
        # Implementation
        pass