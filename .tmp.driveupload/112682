# dialogs/question_tags_dialog.py
from PySide6 import QtWidgets, QtCore, QtGui
from PySide6.QtCore import Qt


# #(Dialog qu·∫£n l√Ω tags cho c√¢u h·ªèi - t√™n th·ª±c t·∫ø l√† TagsManagerDialog)
class TagsManagerDialog(QtWidgets.QDialog):
    """Dialog qu·∫£n l√Ω tags cho c√¢u h·ªèi"""

    def __init__(self, db_manager, question_id, parent=None):
        super().__init__(parent)
        self.db = db_manager
        self.question_id = question_id

        self.setWindowTitle(f"üè∑Ô∏è Qu·∫£n l√Ω Tags - C√¢u h·ªèi #{question_id}")
        self.setModal(True)
        self.resize(500, 400)

        self._setup_ui()
        self._load_current_tags()
        self._load_available_tags()

    def _setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán dialog"""
        layout = QtWidgets.QVBoxLayout(self)

        # Ti√™u ƒë·ªÅ
        title = QtWidgets.QLabel("Qu·∫£n l√Ω Tags cho c√¢u h·ªèi")
        title.setStyleSheet("font-weight: bold; font-size: 16px; margin-bottom: 15px;")
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)

        # Ph·∫ßn th√™m tag m·ªõi
        add_group = QtWidgets.QGroupBox("‚ûï Th√™m Tag M·ªõi")
        add_layout = QtWidgets.QHBoxLayout(add_group)

        self.new_tag_input = QtWidgets.QLineEdit()
        self.new_tag_input.setPlaceholderText("Nh·∫≠p t√™n tag m·ªõi...")
        add_layout.addWidget(self.new_tag_input)

        # Color picker cho tag m·ªõi
        self.current_color = '#3498db'
        self.color_btn = QtWidgets.QPushButton("üé® M√†u")
        self.color_btn.setStyleSheet(f"background-color: {self.current_color}; color: white;")
        self.color_btn.clicked.connect(self._pick_color)
        add_layout.addWidget(self.color_btn)

        self.add_btn = QtWidgets.QPushButton("‚ûï Th√™m")
        self.add_btn.clicked.connect(self._add_new_tag)
        add_layout.addWidget(self.add_btn)

        layout.addWidget(add_group)

        # Container cho 2 danh s√°ch tags
        lists_container = QtWidgets.QHBoxLayout()

        # Danh s√°ch tags hi·ªán t·∫°i
        current_group = QtWidgets.QGroupBox("üè∑Ô∏è Tags hi·ªán t·∫°i")
        current_layout = QtWidgets.QVBoxLayout(current_group)

        self.current_tags_list = QtWidgets.QListWidget()
        self.current_tags_list.setMaximumHeight(200)
        current_layout.addWidget(self.current_tags_list)

        remove_btn = QtWidgets.QPushButton("‚ùå X√≥a tag ƒë∆∞·ª£c ch·ªçn")
        remove_btn.clicked.connect(self._remove_selected_tag)
        current_layout.addWidget(remove_btn)

        lists_container.addWidget(current_group)

        # Danh s√°ch tags c√≥ s·∫µn
        available_group = QtWidgets.QGroupBox("üì¶ Tags c√≥ s·∫µn")
        available_layout = QtWidgets.QVBoxLayout(available_group)

        self.available_tags_list = QtWidgets.QListWidget()
        self.available_tags_list.setMaximumHeight(200)
        self.available_tags_list.itemDoubleClicked.connect(self._add_existing_tag)
        available_layout.addWidget(self.available_tags_list)

        available_layout.addWidget(QtWidgets.QLabel("üí° Double-click ƒë·ªÉ th√™m tag"))

        lists_container.addWidget(available_group)

        layout.addLayout(lists_container)

        # Buttons
        button_layout = QtWidgets.QHBoxLayout()

        close_btn = QtWidgets.QPushButton("ƒê√≥ng")
        close_btn.clicked.connect(self.accept)

        button_layout.addStretch()
        button_layout.addWidget(close_btn)
        layout.addLayout(button_layout)

    # Copy t·∫•t c·∫£ ph∆∞∆°ng th·ª©c c√≤n l·∫°i t·ª´ file g·ªëc:
    # _pick_color(), _load_current_tags(), _load_available_tags(),
    # _add_new_tag(), _add_existing_tag(), _remove_selected_tag()

    def _pick_color(self):
        """Ch·ªçn m√†u cho tag"""
        color = QtWidgets.QColorDialog.getColor(QtGui.QColor(self.current_color), self)
        if color.isValid():
            self.current_color = color.name()
            self.color_btn.setStyleSheet(f"background-color: {self.current_color}; color: white;")

    def _load_current_tags(self):
        """Load tags hi·ªán t·∫°i c·ªßa c√¢u h·ªèi"""
        try:
            tags = self.db.execute_query(
                "SELECT * FROM question_tags WHERE question_id=?",
                (self.question_id,), fetch="all"
            ) or []

            self.current_tags_list.clear()

            for tag in tags:
                tag_dict = dict(tag) if hasattr(tag, 'keys') else {}
                tag_name = tag_dict.get('tag_name', '')
                tag_color = tag_dict.get('color', '#3498db')

                if tag_name:
                    item = QtWidgets.QListWidgetItem(tag_name)
                    item.setBackground(QtGui.QColor(tag_color))
                    item.setForeground(QtGui.QColor('white'))
                    item.setData(Qt.UserRole, tag_color)
                    self.current_tags_list.addItem(item)

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ load tags hi·ªán t·∫°i: {e}")

    def _load_available_tags(self):
        """Load t·∫•t c·∫£ tags c√≥ s·∫µn trong h·ªá th·ªëng"""
        try:
            # L·∫•y t·∫•t c·∫£ tags unique, lo·∫°i tr·ª´ tags ƒë√£ c√≥
            current_tag_names = [self.current_tags_list.item(i).text()
                                 for i in range(self.current_tags_list.count())]

            all_tags = self.db.execute_query(
                "SELECT DISTINCT tag_name, color FROM question_tags ORDER BY tag_name",
                fetch="all"
            ) or []

            self.available_tags_list.clear()

            for tag in all_tags:
                tag_dict = dict(tag) if hasattr(tag, 'keys') else {}
                tag_name = tag_dict.get('tag_name', '')
                tag_color = tag_dict.get('color', '#3498db')

                # Ch·ªâ hi·ªÉn th·ªã tags ch∆∞a ƒë∆∞·ª£c th√™m
                if tag_name and tag_name not in current_tag_names:
                    item = QtWidgets.QListWidgetItem(f"üè∑Ô∏è {tag_name}")
                    item.setBackground(QtGui.QColor(tag_color))
                    item.setForeground(QtGui.QColor('white'))
                    item.setData(Qt.UserRole, {'name': tag_name, 'color': tag_color})
                    self.available_tags_list.addItem(item)

        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói load available tags: {e}")

    def _add_new_tag(self):
        """Th√™m tag m·ªõi"""
        tag_name = self.new_tag_input.text().strip()
        if not tag_name:
            QtWidgets.QMessageBox.warning(self, "L·ªói", "Vui l√≤ng nh·∫≠p t√™n tag")
            return

        # Ki·ªÉm tra tag ƒë√£ t·ªìn t·∫°i ch∆∞a
        existing_tags = [self.current_tags_list.item(i).text()
                         for i in range(self.current_tags_list.count())]

        if tag_name in existing_tags:
            QtWidgets.QMessageBox.warning(self, "L·ªói", "Tag n√†y ƒë√£ t·ªìn t·∫°i")
            return

        try:
            # Th√™m v√†o database
            self.db.execute_query(
                "INSERT OR IGNORE INTO question_tags (question_id, tag_name, color) VALUES (?, ?, ?)",
                (self.question_id, tag_name, self.current_color)
            )

            # Th√™m v√†o danh s√°ch hi·ªán t·∫°i
            item = QtWidgets.QListWidgetItem(tag_name)
            item.setBackground(QtGui.QColor(self.current_color))
            item.setForeground(QtGui.QColor('white'))
            item.setData(Qt.UserRole, self.current_color)
            self.current_tags_list.addItem(item)

            # Clear input
            self.new_tag_input.clear()

            # Refresh available tags
            self._load_available_tags()

            QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ th√™m tag '{tag_name}'")

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ th√™m tag: {e}")

    def _add_existing_tag(self, item):
        """Th√™m tag c√≥ s·∫µn v√†o c√¢u h·ªèi"""
        if not item:
            return

        tag_data = item.data(Qt.UserRole)
        if not tag_data:
            return

        tag_name = tag_data['name']
        tag_color = tag_data['color']

        try:
            # Th√™m v√†o database
            self.db.execute_query(
                "INSERT OR IGNORE INTO question_tags (question_id, tag_name, color) VALUES (?, ?, ?)",
                (self.question_id, tag_name, tag_color)
            )

            # Th√™m v√†o danh s√°ch hi·ªán t·∫°i
            new_item = QtWidgets.QListWidgetItem(tag_name)
            new_item.setBackground(QtGui.QColor(tag_color))
            new_item.setForeground(QtGui.QColor('white'))
            new_item.setData(Qt.UserRole, tag_color)
            self.current_tags_list.addItem(new_item)

            # X√≥a kh·ªèi available tags
            row = self.available_tags_list.row(item)
            self.available_tags_list.takeItem(row)

            QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ th√™m tag '{tag_name}'")

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ th√™m tag: {e}")

    def _remove_selected_tag(self):
        """X√≥a tag ƒë∆∞·ª£c ch·ªçn"""
        current_item = self.current_tags_list.currentItem()
        if not current_item:
            QtWidgets.QMessageBox.warning(self, "L·ªói", "Vui l√≤ng ch·ªçn tag ƒë·ªÉ x√≥a")
            return

        tag_name = current_item.text()

        if QtWidgets.QMessageBox.question(
                self, "X√°c nh·∫≠n", f"B·∫°n c√≥ mu·ªën x√≥a tag '{tag_name}'?"
        ) != QtWidgets.QMessageBox.Yes:
            return

        try:
            # X√≥a kh·ªèi database
            self.db.execute_query(
                "DELETE FROM question_tags WHERE question_id=? AND tag_name=?",
                (self.question_id, tag_name)
            )

            # X√≥a kh·ªèi danh s√°ch
            row = self.current_tags_list.row(current_item)
            self.current_tags_list.takeItem(row)

            # Refresh available tags
            self._load_available_tags()

            QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ x√≥a tag '{tag_name}'")

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ x√≥a tag: {e}")


# Alias ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi t√™n c≈©
QuestionTagsDialog = TagsManagerDialog