# dialogs/question_edit_dialog.py
from PySide6 import QtWidgets, QtCore, QtGui
from PySide6.QtCore import Qt
from PySide6.QtGui import QFont, QSyntaxHighlighter, QTextCharFormat, QColor
try:
    from ui_qt.windows.question_bank.viewers.pdf_viewer import PDFViewer
    from ui_qt.windows.question_bank.viewers.image_viewer import ImageViewer
except ImportError:
    try:
        from viewers.pdf_viewer import PDFViewer
        from viewers.image_viewer import ImageViewer
    except ImportError:
        PDFViewer = None
        ImageViewer = None
class QuestionEditDialog(QtWidgets.QDialog):
    def __init__(self, db_manager, tree_id=None, question_id=None, parent=None):
        super().__init__(parent)
        self.setModal(False)
        self.db = db_manager
        self.tree_id = tree_id
        self.question_id = question_id
        self.content_type = "text"
        self.answer_type = "text"
        self.content_data = None
        self.answer_data = None

        self.setup_ui()
        if question_id:
            self.load_question_data()
        self.setWindowState(Qt.WindowMaximized)

    def setup_ui(self):
        self.setWindowTitle("‚ûï Th√™m c√¢u h·ªèi m·ªõi" if not self.question_id else "‚úèÔ∏è Ch·ªânh s·ª≠a c√¢u h·ªèi")
        self.setWindowFlags(
            Qt.Window | Qt.WindowMinimizeButtonHint | Qt.WindowMaximizeButtonHint | Qt.WindowCloseButtonHint)
        layout = QtWidgets.QVBoxLayout(self)

        # Toolbar cho ch·ªçn lo·∫°i n·ªôi dung
        toolbar = QtWidgets.QToolBar()
        toolbar.setToolButtonStyle(Qt.ToolButtonTextBesideIcon)

        # Nh√≥m n√∫t cho C√¢u h·ªèi
        toolbar.addWidget(QtWidgets.QLabel("üìù Th√™m c√¢u h·ªèi:"))

        text_action = toolbar.addAction("üìù VƒÉn b·∫£n")
        text_action.triggered.connect(lambda: self.add_content("text"))

        image_action = toolbar.addAction("üñºÔ∏è ·∫¢nh")
        image_action.triggered.connect(lambda: self.add_content("image"))

        pdf_action = toolbar.addAction("üìÑ PDF")
        pdf_action.triggered.connect(lambda: self.add_content("pdf"))

        word_action = toolbar.addAction("üìò Word")
        word_action.triggered.connect(lambda: self.add_content("word"))

        toolbar.addSeparator()

        latex_action = toolbar.addAction("‚àë LaTeX")
        latex_action.triggered.connect(self.insert_latex)

        layout.addWidget(toolbar)

        # Splitter cho c√¢u h·ªèi v√† ƒë√°p √°n
        splitter = QtWidgets.QSplitter(Qt.Vertical)

        # Ph·∫ßn 1: C√¢u h·ªèi
        question_group = QtWidgets.QGroupBox("üìã N·ªòI DUNG C√ÇU H·ªéI")
        question_layout = QtWidgets.QVBoxLayout(question_group)

        # Widget hi·ªÉn th·ªã n·ªôi dung (c√≥ th·ªÉ l√† text, image, pdf viewer)
        self.content_widget = QtWidgets.QStackedWidget()

        # Text editor cho vƒÉn b·∫£n
        self.text_editor = QtWidgets.QTextEdit()
        self.text_editor.installEventFilter(self)
        self.text_editor.setAcceptRichText(True)
        self.text_editor.setPlaceholderText("Nh·∫≠p n·ªôi dung c√¢u h·ªèi ho·∫∑c d√°n ·∫£nh (Ctrl+V)...")
        self.content_widget.addWidget(self.text_editor)

        # Image viewer
        self.image_viewer = ImageViewer()
        self.content_widget.addWidget(self.image_viewer)

        # PDF viewer
        self.pdf_viewer = PDFViewer()
        self.content_widget.addWidget(self.pdf_viewer)

        question_layout.addWidget(self.content_widget)
        splitter.addWidget(question_group)

        # Ph·∫ßn 2: ƒê√°p √°n (c√≥ th·ªÉ ·∫©n/hi·ªán)
        self.answer_group = QtWidgets.QGroupBox("‚úÖ ƒê√ÅP √ÅN")
        self.answer_group.setCheckable(True)
        self.answer_group.setChecked(True)
        answer_layout = QtWidgets.QVBoxLayout(self.answer_group)

        # Toolbar cho ƒë√°p √°n
        answer_toolbar = QtWidgets.QToolBar()
        answer_toolbar.setToolButtonStyle(Qt.ToolButtonTextBesideIcon)

        # Nh√≥m n√∫t cho ƒê√°p √°n
        answer_toolbar.addWidget(QtWidgets.QLabel("üìù Th√™m ƒë√°p √°n:"))

        ans_text_action = answer_toolbar.addAction("üìù VƒÉn b·∫£n")
        ans_text_action.triggered.connect(lambda: self.add_answer("text"))

        ans_image_action = answer_toolbar.addAction("üñºÔ∏è ·∫¢nh")
        ans_image_action.triggered.connect(lambda: self.add_answer("image"))

        ans_pdf_action = answer_toolbar.addAction("üìÑ PDF")
        ans_pdf_action.triggered.connect(lambda: self.add_answer("pdf"))

        ans_word_action = answer_toolbar.addAction("üìò Word")
        ans_word_action.triggered.connect(lambda: self.add_answer("word"))

        answer_toolbar.addSeparator()

        ans_latex_action = answer_toolbar.addAction("‚àë LaTeX")
        ans_latex_action.triggered.connect(self.insert_answer_latex)

        answer_layout.addWidget(answer_toolbar)

        # Widget hi·ªÉn th·ªã ƒë√°p √°n
        self.answer_widget = QtWidgets.QStackedWidget()

        # Text editor cho ƒë√°p √°n vƒÉn b·∫£n (v·ªõi EventFilter)
        self.answer_text_editor = QtWidgets.QTextEdit()
        self.answer_text_editor.installEventFilter(self)  # H·ªó tr·ª£ paste ·∫£nh
        self.answer_text_editor.setAcceptRichText(True)
        self.answer_text_editor.setPlaceholderText("Nh·∫≠p ƒë√°p √°n ho·∫∑c d√°n ·∫£nh (Ctrl+V)...")
        self.answer_text_editor.setMaximumHeight(150)  # Gi·ªØ gi·ªõi h·∫°n chi·ªÅu cao
        self.answer_widget.addWidget(self.answer_text_editor)

        # Image viewer cho ƒë√°p √°n ·∫£nh
        self.answer_image_viewer = ImageViewer()
        self.answer_widget.addWidget(self.answer_image_viewer)

        # PDF viewer cho ƒë√°p √°n PDF
        self.answer_pdf_viewer = PDFViewer()
        self.answer_widget.addWidget(self.answer_pdf_viewer)

        answer_layout.addWidget(self.answer_widget)
        splitter.addWidget(self.answer_group)

        layout.addWidget(splitter)

        # Ph·∫ßn 3: Tags
        meta_group = QtWidgets.QGroupBox("üìä M·ª©c ƒë·ªô")
        meta_layout = QtWidgets.QFormLayout(meta_group)
        self.difficulty_combo = QtWidgets.QComboBox()
        self.difficulty_combo.addItems(["D·ªÖ", "Trung b√¨nh", "Kh√≥"])
        meta_layout.addRow("ƒê·ªô kh√≥:", self.difficulty_combo)

        tags_group = QtWidgets.QGroupBox("üè∑Ô∏è TAGS")
        tags_layout = QtWidgets.QHBoxLayout(tags_group)
        layout.addWidget(meta_group)
        self.tags_edit = QtWidgets.QLineEdit()
        self.tags_edit.setPlaceholderText("Nh·∫≠p tags: m√¥n, l·ªõp, ch·ªß ƒë·ªÅ, m·ª©c ƒë·ªô (ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y)")
        tags_layout.addWidget(self.tags_edit)
        layout.addWidget(tags_group)

        # Buttons
        button_layout = QtWidgets.QHBoxLayout()

        save_btn = QtWidgets.QPushButton("üíæ L∆∞u")
        save_btn.setStyleSheet("QPushButton { background: #28a745; color: white; padding: 10px 30px; }")
        save_btn.clicked.connect(self.save_question)

        cancel_btn = QtWidgets.QPushButton("‚ùå H·ªßy")
        cancel_btn.setStyleSheet("QPushButton { background: #6c757d; color: white; padding: 10px 30px; }")
        cancel_btn.clicked.connect(self.reject)

        button_layout.addStretch()
        button_layout.addWidget(cancel_btn)
        button_layout.addWidget(save_btn)

        layout.addLayout(button_layout)

        # Enable paste t·ª´ clipboard
        self.setup_clipboard()

    # #(Ph∆∞∆°ng th·ª©c load d·ªØ li·ªáu c√¢u h·ªèi ƒë·ªÉ ch·ªânh s·ª≠a)
    def load_question_data(self):
        """Load d·ªØ li·ªáu c√¢u h·ªèi ƒë·ªÉ ch·ªânh s·ª≠a"""
        if not self.question_id:
            return

        try:
            # L·∫•y d·ªØ li·ªáu c√¢u h·ªèi t·ª´ database
            question = self.db.execute_query(
                "SELECT * FROM question_bank WHERE id=?",
                (self.question_id,), fetch="one"
            )

            if not question:
                QtWidgets.QMessageBox.warning(self, "L·ªói", "Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi!")
                return

            # Convert to dict n·∫øu c·∫ßn
            if hasattr(question, 'keys'):
                q_dict = dict(question)
            else:
                q_dict = question

            # Load th√¥ng tin c∆° b·∫£n
            difficulty = q_dict.get('difficulty_level', 'D·ªÖ')
            if difficulty.lower() == 'easy':
                self.difficulty_combo.setCurrentText('D·ªÖ')
            elif difficulty.lower() == 'medium':
                self.difficulty_combo.setCurrentText('Trung b√¨nh')
            elif difficulty.lower() == 'hard':
                self.difficulty_combo.setCurrentText('Kh√≥')

            # Load n·ªôi dung c√¢u h·ªèi
            content_type = q_dict.get('content_type', 'text')
            content_text = q_dict.get('content_text', '')
            content_data = q_dict.get('content_data')

            if content_type == 'text':
                # Hi·ªÉn th·ªã text content
                self.content_widget.setCurrentIndex(0)  # Text editor
                self.text_editor.setHtml(content_text)
                self.content_type = 'text'

            elif content_type == 'image':
                # Hi·ªÉn th·ªã image content
                self.content_widget.setCurrentIndex(1)  # Image viewer
                if content_data:
                    self.image_viewer.load_image_from_data(content_data)
                self.content_type = 'image'
                self.content_data = content_data

            # Load ƒë√°p √°n
            answer_type = q_dict.get('answer_type', 'text')
            answer_text = q_dict.get('answer_text', '') or q_dict.get('correct_answer', '')  # Fallback cho data c≈©
            answer_data = q_dict.get('answer_data')

            if answer_type == 'text':
                self.answer_widget.setCurrentIndex(0)  # Text editor
                self.answer_text_editor.setHtml(answer_text) if self._has_images_in_html(
                    answer_text) else self.answer_text_editor.setPlainText(answer_text)
                self.answer_type = 'text'

            elif answer_type == 'image':
                self.answer_widget.setCurrentIndex(1)  # Image viewer
                if answer_data:
                    self._load_image_to_viewer(self.answer_image_viewer, answer_data)
                self.answer_type = 'image'
                self.answer_data = answer_data

            # Load tags
            tags = self.db.execute_query(
                "SELECT tag_name FROM question_tags WHERE question_id=?",
                (self.question_id,), fetch="all"
            ) or []

            if tags:
                tag_names = [tag['tag_name'] if hasattr(tag, 'get') else tag[0] for tag in tags]
                self.tags_edit.setText(', '.join(tag_names))

            print(f"‚úÖ ƒê√£ load d·ªØ li·ªáu c√¢u h·ªèi #{self.question_id}")

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ load d·ªØ li·ªáu c√¢u h·ªèi: {e}")
            print(f"‚ùå L·ªói load_question_data: {e}")

    # #(Ph∆∞∆°ng th·ª©c h·ªó tr·ª£ load image t·ª´ data)
    def _load_image_to_viewer(self, viewer, image_data):
        """Load image data v√†o viewer"""
        if not image_data or not viewer:
            return False

        try:
            import base64

            # N·∫øu l√† bytes
            if isinstance(image_data, bytes):
                pixmap = QtGui.QPixmap()
                if pixmap.loadFromData(image_data):
                    viewer.set_pixmap(pixmap)
                    return True

            # N·∫øu l√† string (c√≥ th·ªÉ l√† base64)
            elif isinstance(image_data, str):
                if image_data.startswith('data:image'):
                    # Data URL format
                    header, data = image_data.split(',', 1)
                    decoded_data = base64.b64decode(data)
                else:
                    # Pure base64
                    decoded_data = base64.b64decode(image_data)

                pixmap = QtGui.QPixmap()
                if pixmap.loadFromData(decoded_data):
                    viewer.set_pixmap(pixmap)
                    return True

            return False

        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói load image: {e}")
            return False

    def _has_images_in_html(self, html_content):
        """Ki·ªÉm tra HTML c√≥ ch·ª©a ·∫£nh kh√¥ng"""
        # #(Helper method ki·ªÉm tra ·∫£nh trong HTML content)
        if not html_content:
            return False

        # Ki·ªÉm tra c√°c tag ·∫£nh HTML
        html_lower = html_content.lower()

        # Ki·ªÉm tra tag <img>
        if '<img' in html_lower:
            return True

        # Ki·ªÉm tra data URI cho ·∫£nh
        if 'data:image/' in html_lower:
            return True

        # Ki·ªÉm tra c√°c ƒë·ªãnh d·∫°ng ·∫£nh base64
        if 'base64' in html_lower and ('png' in html_lower or 'jpg' in html_lower or 'jpeg' in html_lower):
            return True

        return False

    def setup_clipboard(self):
        """X·ª≠ l√Ω paste ·∫£nh t·ª´ clipboard"""
        shortcut = QShortcut(QKeySequence.Paste, self)  # ‚úÖ cross-platform (Ctrl+V / Cmd+V)
        shortcut.activated.connect(self.paste_from_clipboard)

    def paste_from_clipboard(self):
        """D√°n n·ªôi dung (∆∞u ti√™n ·∫£nh) t·ª´ clipboard v√†o n·ªôi dung c√¢u h·ªèi"""
        try:
            cb = QtWidgets.QApplication.clipboard()
            md = cb.mimeData()

            def qimage_from_clipboard():
                # 1) ·∫¢nh thu·∫ßn
                if md.hasImage():
                    img = cb.image()
                    if not img.isNull():
                        return img
                # 2) Fallback pixmap (Windows hay d√πng)
                pm = cb.pixmap()
                if not pm.isNull():
                    return pm.toImage()
                # 3) ·∫¢nh nh√∫ng base64 trong HTML
                if md.hasHtml():
                    import re, base64
                    html = md.html()
                    m = re.search(r'data:image/(png|jpeg|jpg);base64,([A-Za-z0-9+/=]+)', html, re.I)
                    if m:
                        fmt = m.group(1).upper()
                        ba = QtCore.QByteArray.fromBase64(m.group(2).encode('ascii'))
                        img = QtGui.QImage()
                        if img.loadFromData(ba, fmt):
                            return img
                return None

            image = qimage_from_clipboard()

            if image:
                # Chuy·ªÉn sang ch·∫ø ƒë·ªô ·∫£nh v√† hi·ªÉn th·ªã
                self.content_type = "image"
                self.content_widget.setCurrentWidget(self.image_viewer)
                self.image_viewer.set_image(image)

                # L∆∞u t·∫°m bytes PNG ƒë·ªÉ save xu·ªëng DB khi b·∫•m L∆∞u
                ba = QtCore.QByteArray()
                buff = QtCore.QBuffer(ba)
                buff.open(QtCore.QIODevice.WriteOnly)
                image.save(buff, "PNG")
                self.content_data = bytes(ba)

                QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ d√°n ·∫£nh t·ª´ clipboard!")
                return

            # N·∫øu kh√¥ng c√≥ ·∫£nh, d√°n text b√¨nh th∆∞·ªùng v√†o editor (n·∫øu ƒëang ·ªü ch·∫ø ƒë·ªô text)
            if md.hasText():
                text = md.text()
                if self.content_widget.currentWidget() != self.text_editor:
                    # N·∫øu ƒëang ·ªü m√†n ·∫£nh, chuy·ªÉn v·ªÅ text
                    self.add_content("text")
                cursor = self.text_editor.textCursor()
                cursor.insertText(text)
                return

            QtWidgets.QMessageBox.information(self, "Th√¥ng b√°o", "Clipboard kh√¥ng c√≥ n·ªôi dung ph√π h·ª£p ƒë·ªÉ d√°n.")
        except Exception as e:
            QtWidgets.QMessageBox.warning(self, "L·ªói", f"Kh√¥ng th·ªÉ d√°n: {e}")

    # (Ph∆∞∆°ng th·ª©c paste ƒë√°p √°n gi·ªëng y h·ªát paste n·ªôi dung c√¢u h·ªèi)
    def paste_answer_from_clipboard(self):
        """D√°n n·ªôi dung (∆∞u ti√™n ·∫£nh) t·ª´ clipboard v√†o ƒë√°p √°n - Logic gi·ªëng paste n·ªôi dung c√¢u h·ªèi"""
        try:
            cb = QtWidgets.QApplication.clipboard()
            md = cb.mimeData()

            def qimage_from_clipboard():
                # 1) ·∫¢nh thu·∫ßn
                if md.hasImage():
                    img = cb.image()
                    if not img.isNull():
                        return img
                # 2) Fallback pixmap (Windows hay d√πng)
                pm = cb.pixmap()
                if not pm.isNull():
                    return pm.toImage()
                # 3) ·∫¢nh nh√∫ng base64 trong HTML
                if md.hasHtml():
                    import re, base64
                    html = md.html()
                    m = re.search(r'data:image/(png|jpeg|jpg);base64,([A-Za-z0-9+/=]+)', html, re.I)
                    if m:
                        fmt = m.group(1).upper()
                        ba = QtCore.QByteArray.fromBase64(m.group(2).encode('ascii'))
                        img = QtGui.QImage()
                        if img.loadFromData(ba, fmt):
                            return img
                return None

            image = qimage_from_clipboard()

            if image:
                # Chuy·ªÉn sang ch·∫ø ƒë·ªô ·∫£nh v√† hi·ªÉn th·ªã
                self.answer_type = "image"
                self.answer_widget.setCurrentWidget(self.answer_image_viewer)
                self.answer_image_viewer.set_image(image)

                # L∆∞u t·∫°m bytes PNG ƒë·ªÉ save xu·ªëng DB khi b·∫•m L∆∞u
                ba = QtCore.QByteArray()
                buff = QtCore.QBuffer(ba)
                buff.open(QtCore.QIODevice.WriteOnly)
                image.save(buff, "PNG")
                self.answer_data = bytes(ba)

                QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ d√°n ·∫£nh ƒë√°p √°n t·ª´ clipboard!")
                return

            # N·∫øu kh√¥ng c√≥ ·∫£nh, d√°n text b√¨nh th∆∞·ªùng v√†o editor
            if md.hasText():
                text = md.text()
                if self.answer_widget.currentWidget() != self.answer_text_editor:
                    # N·∫øu ƒëang ·ªü m√†n ·∫£nh, chuy·ªÉn v·ªÅ text
                    self.add_answer("text")
                cursor = self.answer_text_editor.textCursor()
                cursor.insertText(text)
                return

            QtWidgets.QMessageBox.information(self, "Th√¥ng b√°o", "Clipboard kh√¥ng c√≥ n·ªôi dung ph√π h·ª£p ƒë·ªÉ d√°n.")
        except Exception as e:
            QtWidgets.QMessageBox.warning(self, "L·ªói", f"Kh√¥ng th·ªÉ d√°n: {e}")
    def eventFilter(self, obj, event):
        """B·∫Øt s·ª± ki·ªán keyboard cho text editor - S·ª¨A L·ªñI ATTRIBUTE"""
        # X·ª≠ l√Ω cho n·ªôi dung c√¢u h·ªèi
        if obj == self.text_editor and event.type() == QtCore.QEvent.KeyPress:
            if event.matches(QtGui.QKeySequence.Paste):
                self.paste_from_clipboard()
                return True

        # ‚úÖ S·ª¨A: Ki·ªÉm tra widget t·ªìn t·∫°i tr∆∞·ªõc khi so s√°nh
        elif (hasattr(self, 'answer_text_editor') and
              obj == self.answer_text_editor and
              event.type() == QtCore.QEvent.KeyPress):
            if event.matches(QtGui.QKeySequence.Paste):
                self.paste_answer_from_clipboard()
                return True

        return super().eventFilter(obj, event)

    def add_content(self, content_type):
        """Th√™m n·ªôi dung theo lo·∫°i"""
        if content_type == "text":
            self.content_type = "text"
            self.content_widget.setCurrentWidget(self.text_editor)

        elif content_type == "image":
            file_path, _ = QtWidgets.QFileDialog.getOpenFileName(
                self, "Ch·ªçn ·∫£nh", "", "Images (*.png *.jpg *.jpeg *.gif *.bmp)")
            if file_path:
                self.content_type = "image"
                pixmap = QtGui.QPixmap(file_path)
                self.image_viewer.set_pixmap(pixmap)
                self.content_widget.setCurrentWidget(self.image_viewer)

        elif content_type == "pdf":
            file_path, _ = QtWidgets.QFileDialog.getOpenFileName(
                self, "Ch·ªçn PDF", "", "PDF Files (*.pdf)")
            if file_path:
                self.content_type = "pdf"
                self.pdf_viewer.load_pdf(file_path)
                self.content_widget.setCurrentWidget(self.pdf_viewer)

        elif content_type == "word":
            QtWidgets.QMessageBox.information(self, "Th√¥ng b√°o",
                                              "Ch·ª©c nƒÉng import Word ƒëang ph√°t tri·ªÉn")

    def add_answer(self, answer_type):
        """Th√™m ƒë√°p √°n theo lo·∫°i - GI·ªêNG PH·∫¶N N·ªòI DUNG"""
        if answer_type == "text":
            self.answer_type = "text"
            self.answer_widget.setCurrentWidget(self.answer_text_editor)

        elif answer_type == "image":
            file_path, _ = QtWidgets.QFileDialog.getOpenFileName(
                self, "Ch·ªçn ·∫£nh ƒë√°p √°n", "", "Images (*.png *.jpg *.jpeg *.gif *.bmp)")
            if file_path:
                self.content_type = "image"
                pixmap = QtGui.QPixmap(file_path)
                self.image_viewer.set_pixmap(pixmap)
                self.content_widget.setCurrentWidget(self.image_viewer)

        elif answer_type == "pdf":
            file_path, _ = QtWidgets.QFileDialog.getOpenFileName(
                self, "Ch·ªçn PDF ƒë√°p √°n", "", "PDF Files (*.pdf)")
            if file_path:
                self.answer_type = "pdf"
                self.answer_pdf_viewer.load_pdf(file_path)
                self.answer_widget.setCurrentWidget(self.answer_pdf_viewer)

        elif answer_type == "word":
            QtWidgets.QMessageBox.information(self, "Th√¥ng b√°o",
                                              "Ch·ª©c nƒÉng import Word ƒëang ph√°t tri·ªÉn")

    def insert_latex(self):
        """Ch√®n c√¥ng th·ª©c LaTeX"""
        dialog = LaTeXInputDialog(self)
        if dialog.exec() == QtWidgets.QDialog.Accepted:
            latex_code = dialog.get_latex()
            if self.content_type == "text":
                cursor = self.text_editor.textCursor()
                cursor.insertText(f"$${latex_code}$$")

    def insert_answer_latex(self):
        """Ch√®n c√¥ng th·ª©c LaTeX v√†o ƒë√°p √°n"""
        # #(Ph∆∞∆°ng th·ª©c ch√®n LaTeX cho ƒë√°p √°n)
        dialog = LaTeXInputDialog(self)
        if dialog.exec() == QtWidgets.QDialog.Accepted:
            latex_code = dialog.get_latex()
            if self.answer_type == "text":
                cursor = self.answer_text_editor.textCursor()
                cursor.insertText(f"$${latex_code}$$")

    def save_question(self):
        """L∆∞u c√¢u h·ªèi v√†o database - ƒê√É S·ª¨A L·ªñI"""

        try:
            if not self.tree_id:
                QtWidgets.QMessageBox.warning(self, "Thi·∫øu th∆∞ m·ª•c", "Vui l√≤ng ch·ªçn v·ªã tr√≠ l∆∞u trong c√¢y.")
                return

            # ‚úÖ S·ª¨A: Chu·∫©n b·ªã d·ªØ li·ªáu n·ªôi dung
            content_text = None
            content_data = None

            if self.content_type == "text":
                content_text = (self.text_editor.toPlainText() or "").strip()
                if not content_text:
                    QtWidgets.QMessageBox.warning(self, "Thi·∫øu n·ªôi dung", "N·ªôi dung c√¢u h·ªèi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")
                    return

            elif self.content_type == "image":
                # ∆Øu ti√™n self.content_data (ƒë√£ set khi d√°n); n·∫øu ch∆∞a c√≥, l·∫•y t·ª´ viewer
                if self.content_data is None and self.image_viewer.current_pixmap:
                    ba = QtCore.QByteArray()
                    buff = QtCore.QBuffer(ba)
                    buff.open(QtCore.QIODevice.WriteOnly)
                    self.image_viewer.current_pixmap.toImage().save(buff, "PNG")
                    self.content_data = bytes(ba)
                content_data = self.content_data

                if content_data is None:
                    QtWidgets.QMessageBox.warning(self, "Thi·∫øu n·ªôi dung", "Vui l√≤ng ch·ªçn ·∫£nh cho c√¢u h·ªèi.")
                    return

            elif self.content_type == "pdf":
                # ‚úÖ TH√äM: X·ª≠ l√Ω PDF
                if hasattr(self.pdf_viewer, 'pdf_path') and self.pdf_viewer.pdf_path:
                    content_text = f"[PDF: {self.pdf_viewer.pdf_path}]"
                else:
                    QtWidgets.QMessageBox.warning(self, "Thi·∫øu n·ªôi dung", "Vui l√≤ng ch·ªçn file PDF.")
                    return

            # Kh·ªüi t·∫°o answer_data
            answer_text = None
            answer_data = None

            if self.answer_type == "text":
                answer_text = self.answer_text_editor.toPlainText().strip()
                if not answer_text:
                    # Th·ª≠ l·∫•y HTML n·∫øu c√≥ rich content
                    answer_html = self.answer_text_editor.toHtml().strip()
                    if self._has_images_in_html(answer_html):
                        answer_text = answer_html

            elif self.answer_type == "image":
                # ∆Øu ti√™n self.answer_data n·∫øu ƒë√£ set khi paste
                if self.answer_data is None and hasattr(self.answer_image_viewer,
                                                        'current_pixmap') and self.answer_image_viewer.current_pixmap:
                    ba = QtCore.QByteArray()
                    buff = QtCore.QBuffer(ba)
                    buff.open(QtCore.QIODevice.WriteOnly)
                    self.answer_image_viewer.current_pixmap.toImage().save(buff, "PNG")
                    self.answer_data = bytes(ba)
                answer_data = self.answer_data

            elif self.answer_type == "pdf":
                if hasattr(self.answer_pdf_viewer, 'pdf_path') and self.answer_pdf_viewer.pdf_path:
                    answer_text = f"[Answer PDF: {self.answer_pdf_viewer.pdf_path}]"

            # Validation ƒë∆°n gi·∫£n h∆°n
            if not answer_text and not answer_data:
                QtWidgets.QMessageBox.warning(self, "L·ªói", "Vui l√≤ng nh·∫≠p ƒë√°p √°n")
                return

            # ‚úÖ Insert/Update v·ªõi error handling t·ªët h∆°n
            if self.question_id:
                # Update existing question
                result = self.db.execute_query(
                    """UPDATE question_bank
                               SET content_text=?, content_type=?, content_data=?,
                                   answer_text=?, answer_type=?, answer_data=?,
                                   tree_id=?, modified_date=CURRENT_TIMESTAMP
                               WHERE id=?""",
                    (content_text, self.content_type, content_data,
                     answer_text, self.answer_type, answer_data,
                     self.tree_id, self.question_id)
                )

                if not result:
                    QtWidgets.QMessageBox.critical(self, "L·ªói", "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t c√¢u h·ªèi.")
                    return
            else:
                # Insert new question
                new_id = self.db.execute_query(
                    """INSERT INTO question_bank
                        (content_text, content_type, content_data,
                        answer_text, answer_type, answer_data, tree_id, created_date)
                        VALUES (?,?,?,?,?,?,?, CURRENT_TIMESTAMP)""",
                      (content_text, self.content_type, content_data,
                      answer_text, self.answer_type, answer_data, self.tree_id)
                )

                if not new_id:
                    QtWidgets.QMessageBox.critical(self, "L·ªói", "Kh√¥ng th·ªÉ t·∫°o c√¢u h·ªèi m·ªõi.")
                    return

                self.question_id = new_id

            QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ l∆∞u c√¢u h·ªèi.")
            self.accept()

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ l∆∞u: {e}")
            print(f"Chi ti·∫øt l·ªói save_question: {e}")  # Debug log

