# viewers/image_viewer.py
from PySide6 import QtWidgets, QtCore, QtGui
from PySide6.QtCore import Qt
from PySide6.QtGui import QPixmap, QImage


class ImageViewer(QtWidgets.QWidget):
    """Widget hi·ªÉn th·ªã v√† ch·ªânh s·ª≠a ·∫£nh"""

    def __init__(self, parent=None):
        super().__init__(parent)
        self.current_pixmap = None
        self.scale_factor = 1.0
        self._setup_ui()

    def _setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán"""
        layout = QtWidgets.QVBoxLayout(self)
        layout.setContentsMargins(5, 5, 5, 5)

        # #(Toolbar cho c√°c ch·ª©c nƒÉng ·∫£nh)
        toolbar = QtWidgets.QToolBar()
        toolbar.addAction("üìÅ M·ªü ·∫£nh", self.load_image)
        toolbar.addAction("üìã Paste", self.paste_image)
        toolbar.addAction("üîç Zoom In", lambda: self.zoom(1.2))
        toolbar.addAction("üîç Zoom Out", lambda: self.zoom(0.8))
        toolbar.addAction("‚Ü©Ô∏è Reset", self.fit_to_window)
        toolbar.addAction("üóëÔ∏è X√≥a", self.clear_image)
        layout.addWidget(toolbar)

        # #(Scroll area ch·ª©a ·∫£nh)
        self.scroll_area = QtWidgets.QScrollArea()
        self.scroll_area.setWidgetResizable(True)
        self.scroll_area.setAlignment(Qt.AlignCenter)

        # #(Label hi·ªÉn th·ªã ·∫£nh)
        self.image_label = QtWidgets.QLabel()
        self.image_label.setAlignment(Qt.AlignCenter)
        self.image_label.setStyleSheet("border: 1px dashed #ccc; background: #f9f9f9;")
        self.image_label.setText("üì∑ Ch∆∞a c√≥ ·∫£nh\nK√©o th·∫£ ·∫£nh v√†o ƒë√¢y ho·∫∑c click 'M·ªü ·∫£nh'")
        self.image_label.setMinimumSize(300, 200)

        self.scroll_area.setWidget(self.image_label)
        layout.addWidget(self.scroll_area)

        # #(Thi·∫øt l·∫≠p drag & drop)
        self.setAcceptDrops(True)

    def load_image(self):
        """M·ªü dialog ch·ªçn ·∫£nh"""
        file_path, _ = QtWidgets.QFileDialog.getOpenFileName(
            self, "Ch·ªçn ·∫£nh", "",
            "Images (*.png *.jpg *.jpeg *.gif *.bmp *.tiff *.webp)")

        if file_path:
            pixmap = QPixmap(file_path)
            if not pixmap.isNull():
                self.set_pixmap(pixmap)
            else:
                QtWidgets.QMessageBox.warning(self, "L·ªói", "Kh√¥ng th·ªÉ m·ªü ·∫£nh n√†y")

    def set_pixmap(self, pixmap):
        """Thi·∫øt l·∫≠p ·∫£nh hi·ªÉn th·ªã"""
        if pixmap and not pixmap.isNull():
            self.current_pixmap = pixmap
            self.scale_factor = 1.0
            self.display_image()
        else:
            self.clear_image()

    def set_image(self, image):
        """Thi·∫øt l·∫≠p ·∫£nh t·ª´ QImage"""
        if isinstance(image, QImage):
            pixmap = QPixmap.fromImage(image)
            self.set_pixmap(pixmap)
        elif isinstance(image, QPixmap):
            self.set_pixmap(image)

    def display_image(self):
        """Hi·ªÉn th·ªã ·∫£nh v·ªõi scale hi·ªán t·∫°i"""
        if not self.current_pixmap:
            return

        scaled_pixmap = self.current_pixmap.scaled(
            self.current_pixmap.size() * self.scale_factor,
            Qt.KeepAspectRatio,
            Qt.SmoothTransformation
        )

        self.image_label.setPixmap(scaled_pixmap)
        self.image_label.resize(scaled_pixmap.size())

    def fit_to_window(self):
        """Reset zoom v·ªÅ 100%"""
        self.scale_factor = 1.0
        self.display_image()

    def zoom(self, factor):
        """Zoom ·∫£nh"""
        if not self.current_pixmap:
            return

        self.scale_factor *= factor
        # Gi·ªõi h·∫°n zoom t·ª´ 10% ƒë·∫øn 500%
        self.scale_factor = max(0.1, min(5.0, self.scale_factor))
        self.display_image()

    def paste_image(self):
        """Paste ·∫£nh t·ª´ clipboard"""
        clipboard = QtWidgets.QApplication.clipboard()
        mime_data = clipboard.mimeData()

        if mime_data.hasImage():
            image = clipboard.image()
            if not image.isNull():
                self.set_image(image)
                QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ paste ·∫£nh t·ª´ clipboard")
            else:
                QtWidgets.QMessageBox.warning(self, "L·ªói", "·∫¢nh trong clipboard kh√¥ng h·ª£p l·ªá")
        else:
            QtWidgets.QMessageBox.information(self, "Th√¥ng b√°o", "Kh√¥ng c√≥ ·∫£nh trong clipboard")

    def clear_image(self):
        """X√≥a ·∫£nh"""
        self.current_pixmap = None
        self.scale_factor = 1.0
        self.image_label.clear()
        self.image_label.setText("üì∑ Ch∆∞a c√≥ ·∫£nh\nK√©o th·∫£ ·∫£nh v√†o ƒë√¢y ho·∫∑c click 'M·ªü ·∫£nh'")

    def get_pixmap(self):
        """L·∫•y pixmap hi·ªán t·∫°i"""
        return self.current_pixmap

    def has_image(self):
        """Ki·ªÉm tra c√≥ ·∫£nh hay kh√¥ng"""
        return self.current_pixmap is not None

    # #(Drag & Drop handlers)
    def dragEnterEvent(self, event):
        """X·ª≠ l√Ω k√©o file"""
        if event.mimeData().hasImage() or event.mimeData().hasUrls():
            event.acceptProposedAction()

    def dropEvent(self, event):
        """X·ª≠ l√Ω th·∫£ file"""
        mime_data = event.mimeData()

        if mime_data.hasImage():
            # Th·∫£ ·∫£nh tr·ª±c ti·∫øp
            self.set_image(mime_data.imageData())
        elif mime_data.hasUrls():
            # Th·∫£ file ·∫£nh
            for url in mime_data.urls():
                file_path = url.toLocalFile()
                if file_path.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp', '.tiff', '.webp')):
                    pixmap = QPixmap(file_path)
                    if not pixmap.isNull():
                        self.set_pixmap(pixmap)
                        break

    def mousePressEvent(self, event):
        """X·ª≠ l√Ω click ƒë·ªÉ m·ªü ·∫£nh"""
        if event.button() == Qt.LeftButton and not self.has_image():
            self.load_image()
        super().mousePressEvent(event)