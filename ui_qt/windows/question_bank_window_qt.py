from __future__ import annotations
import json
import os
import base64
import io
from typing import List, Dict, Optional
from datetime import datetime

# Import PySide6
from PySide6 import QtCore, QtGui, QtWidgets
from PySide6.QtCore import Qt, QByteArray, QBuffer, QIODevice, Signal
from PySide6.QtWidgets import (
    QMenu, QFileDialog, QMessageBox, QDialog,
    QVBoxLayout, QHBoxLayout, QFormLayout,
    QWidget, QLabel, QLineEdit, QTextEdit,
    QPushButton, QComboBox, QSpinBox,
    QToolBar, QGroupBox, QSplitter,
    QStackedWidget, QScrollArea,
    QTableWidget, QTableWidgetItem,
    QTreeWidget, QTreeWidgetItem,
    QHeaderView, QAbstractItemView
)
from PySide6.QtGui import (
    QKeySequence, QShortcut, QPixmap, QImage,
    QTextDocument, QTextCursor, QColor, QBrush,
    QAction, QIcon
)
from PySide6.QtPrintSupport import QPrintPreviewDialog, QPrinter

class QuestionBankWindowQt(QtWidgets.QWidget):
    # ========== NH√ìM 1: KH·ªûI T·∫†O V√Ä THI·∫æT L·∫¨P ========== #
    def __init__(self, db_manager, parent=None):
        super().__init__(parent)
        self.db = db_manager
        self.setObjectName("QuestionBankWindowQt")
        self.setWindowTitle("Ng√¢n h√†ng c√¢u h·ªèi")
        self.showMaximized()

        # ƒê·∫£m b·∫£o b·∫£ng t·ªìn t·∫°i
        self._ensure_tables()

        self.current_question_id: int | None = None
        self.tree_nodes: Dict[str, int] = {}

        root = QtWidgets.QVBoxLayout(self)

        # T·∫°o toolbar ch√≠nh
        main_toolbar = QtWidgets.QToolBar()
        main_toolbar.setToolButtonStyle(Qt.ToolButtonTextBesideIcon)
        main_toolbar.setMovable(False)
        main_toolbar.setStyleSheet("""
            QToolBar { 
                background: #f8f9fa; 
                border: 1px solid #dee2e6; 
                spacing: 8px; 
                padding: 4px;
            }
            QToolBar::separator { 
                background: #dee2e6; 
                width: 2px; 
                margin: 0 4px;
            }
        """)
        root.addWidget(main_toolbar)

        # Nh√≥m qu·∫£n l√Ω c√¢y
        toggle_action = main_toolbar.addAction("üå≤ ·∫®n/Hi·ªán c√¢y")
        toggle_action.triggered.connect(self.toggle_tree_panel)

        manage_action = main_toolbar.addAction("‚öôÔ∏è Qu·∫£n l√Ω c√¢y")
        manage_action.triggered.connect(self.open_tree_manager)

        main_toolbar.addSeparator()

        # Nh√≥m t√¨m ki·∫øm
        search_widget = QtWidgets.QWidget()
        search_layout = QtWidgets.QHBoxLayout(search_widget)
        search_layout.setContentsMargins(0, 0, 0, 0)

        search_layout.addWidget(QtWidgets.QLabel("üîç"))

        self.search_edit = QtWidgets.QLineEdit()
        self.search_edit.setPlaceholderText("T√¨m ki·∫øm c√¢u h·ªèi...")
        self.search_edit.setMinimumWidth(200)
        self.search_edit.setStyleSheet("padding: 4px; border: 1px solid #ced4da; border-radius: 4px;")
        search_layout.addWidget(self.search_edit)

        main_toolbar.addWidget(search_widget)

        search_action = main_toolbar.addAction("T√¨m")
        search_action.triggered.connect(self.search_questions)

        main_toolbar.addSeparator()

        # Th√™m n√∫t t·∫°o c√¢u h·ªèi n·ªïi b·∫≠t
        add_question_action = main_toolbar.addAction("‚ûï Th√™m c√¢u h·ªèi")
        add_question_action.triggered.connect(self.open_add_question_dialog)
        # Style cho n√∫t
        add_btn_widget = main_toolbar.widgetForAction(add_question_action)
        if add_btn_widget:
            add_btn_widget.setStyleSheet("""
                QToolButton {
                    background: #28a745;
                    color: white;
                    font-weight: bold;
                    padding: 6px 12px;
                    border-radius: 4px;
                }
                QToolButton:hover {
                    background: #218838;
                }
            """)
        # Nh√≥m t·∫°o m·ªõi
        new_action = main_toolbar.addAction("‚ûï T·∫°o m·ªõi")
        new_action.triggered.connect(self.new_question)

        template_action = main_toolbar.addAction("üìã Template")
        template_action.triggered.connect(self.show_template_dialog)

        main_toolbar.addSeparator()

        # Nh√≥m import/export
        import_action = main_toolbar.addAction("üì• Import Word")
        import_action.triggered.connect(self.import_from_word)

        export_action = main_toolbar.addAction("üì§ Export Word")
        export_action.triggered.connect(self.export_to_word)

        export_pdf_action = main_toolbar.addAction("üìÑ Export PDF")
        export_pdf_action.triggered.connect(self.export_to_pdf)

        main_toolbar.addSeparator()

        # Toolbar ph·ª• cho filters
        filter_toolbar = QtWidgets.QToolBar()
        filter_toolbar.setStyleSheet("QToolBar { background: #e9ecef; border: 1px solid #dee2e6; }")
        root.addWidget(filter_toolbar)

        self._create_filter_controls(filter_toolbar)

        # Splitter 3 c·ªôt
        split = QtWidgets.QSplitter(Qt.Horizontal)
        root.addWidget(split, 1)

        # --- C·ªôt tr√°i: C√¢y ---
        left = QtWidgets.QWidget()
        left_l = QtWidgets.QVBoxLayout(left)
        left_l.setContentsMargins(6, 6, 6, 6)

        left_l.addWidget(QtWidgets.QLabel("C√¢y th∆∞ m·ª•c"))
        self.tree = QtWidgets.QTreeWidget()
        self.tree.setHeaderHidden(True)
        self.tree.itemSelectionChanged.connect(self.on_tree_select)
        left_l.addWidget(self.tree, 1)
        split.addWidget(left)

        # --- C·ªôt gi·ªØa: Danh s√°ch c√¢u h·ªèi v·ªõi header controls ---
        mid = QtWidgets.QWidget()
        mid_l = QtWidgets.QVBoxLayout(mid)
        mid_l.setContentsMargins(6, 6, 6, 6)

        # Header controls v·ªõi th·ªëng k√™
        header_widget = QtWidgets.QWidget()
        header_layout = QtWidgets.QVBoxLayout(header_widget)
        header_layout.setSpacing(8)

        title_row = QtWidgets.QHBoxLayout()
        title_label = QtWidgets.QLabel("üìã Danh s√°ch c√¢u h·ªèi")
        title_label.setStyleSheet("font-weight: bold; font-size: 14px;")
        self.stats_label = QtWidgets.QLabel("0 c√¢u h·ªèi")
        self.stats_label.setStyleSheet("color: #666; font-size: 12px;")
        title_row.addWidget(title_label)
        title_row.addStretch()
        title_row.addWidget(self.stats_label)
        header_layout.addLayout(title_row)

        # D√≤ng ƒëi·ªÅu khi·ªÉn nhanh
        controls_row = QtWidgets.QHBoxLayout()

        # T√¨m ki·∫øm nhanh
        self.quick_search = QtWidgets.QLineEdit()
        self.quick_search.setPlaceholderText("üîç T√¨m theo n·ªôi dung, tags...")
        self.quick_search.setMaximumWidth(250)
        self.quick_search.textChanged.connect(self.on_quick_search)
        controls_row.addWidget(self.quick_search)

        # B·ªô l·ªçc lo·∫°i content
        self.content_type_filter = QtWidgets.QComboBox()
        self.content_type_filter.addItems(["T·∫•t c·∫£ lo·∫°i", "üìù Text", "üñºÔ∏è Image", "üìÑ PDF", "üìò Word"])
        self.content_type_filter.currentTextChanged.connect(self.apply_filters)
        controls_row.addWidget(self.content_type_filter)

        # B·ªô l·ªçc ƒë·ªô kh√≥
        self.difficulty_filter = QtWidgets.QComboBox()
        self.difficulty_filter.addItems(["T·∫•t c·∫£ ƒë·ªô kh√≥", "üü¢ D·ªÖ", "üü° Trung b√¨nh", "üî¥ Kh√≥"])
        self.difficulty_filter.currentTextChanged.connect(self.apply_filters)
        controls_row.addWidget(self.difficulty_filter)

        # N√∫t t√πy ch·ªçn hi·ªÉn th·ªã
        self.view_options_btn = QtWidgets.QPushButton("‚öôÔ∏è")
        self.view_options_btn.setToolTip("T√πy ch·ªçn hi·ªÉn th·ªã")
        self.view_options_btn.setMaximumWidth(30)
        self.view_options_btn.clicked.connect(self.show_view_options)
        controls_row.addWidget(self.view_options_btn)

        controls_row.addStretch()
        header_layout.addLayout(controls_row)
        mid_l.addWidget(header_widget)

        # B·∫£ng c√¢u h·ªèi t·ªëi ∆∞u (9 c·ªôt thay v√¨ 8)
        # B·∫£ng c√¢u h·ªèi v·ªõi 10 c·ªôt
        self.q_table = QtWidgets.QTableWidget(0, 9)
        headers = ["‚òëÔ∏è", "ID","üìä Lo·∫°i", "üéØ ƒê·ªô kh√≥", "‚úÖ ƒê√°p √°n", "üìÅ Ch·ªß ƒë·ªÅ", "üè∑Ô∏è Tags", "üìä S·ª≠ d·ª•ng",
                   "üìÖ Ng√†y t·∫°o"]
        self.q_table.setHorizontalHeaderLabels(headers)

        # C·∫•u h√¨nh resize mode t·ªëi ∆∞u
        header = self.q_table.horizontalHeader()
        header.setSectionResizeMode(0, QtWidgets.QHeaderView.Fixed)  # Checkbox
        header.setSectionResizeMode(1, QtWidgets.QHeaderView.Fixed)  # ID
        header.setSectionResizeMode(2, QtWidgets.QHeaderView.Fixed)  # Lo·∫°i
        header.setSectionResizeMode(3, QtWidgets.QHeaderView.Fixed)  # ƒê·ªô kh√≥
        header.setSectionResizeMode(4, QtWidgets.QHeaderView.ResizeToContents)  # ƒê√°p √°n
        header.setSectionResizeMode(5, QtWidgets.QHeaderView.ResizeToContents)  # Ch·ªß ƒë·ªÅ
        header.setSectionResizeMode(6, QtWidgets.QHeaderView.ResizeToContents)  # Tags
        header.setSectionResizeMode(7, QtWidgets.QHeaderView.Fixed)  # Ng√†y t·∫°o

        # ƒê·∫∑t chi·ªÅu r·ªông c·ªë ƒë·ªãnh cho c√°c c·ªôt
        self.q_table.setColumnWidth(0, 40)  # Checkbox
        self.q_table.setColumnWidth(1, 40)  # ID
        self.q_table.setColumnWidth(3, 40)  # Lo·∫°i
        self.q_table.setColumnWidth(4, 40)  # ƒê·ªô kh√≥
        self.q_table.setColumnWidth(8, 50)  # Ng√†y t·∫°o

        self.q_table.setSortingEnabled(True)
        self.q_table.setContextMenuPolicy(Qt.CustomContextMenu)
        self.q_table.customContextMenuRequested.connect(self.show_enhanced_context_menu)
        self.q_table.setAlternatingRowColors(True)
        self.q_table.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.q_table.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)
        self.q_table.itemSelectionChanged.connect(self.on_question_select_enhanced)

        # Style c·∫£i ti·∫øn cho b·∫£ng
        self.q_table.setStyleSheet("""
            QTableWidget {
                border: 1px solid #ddd;
                border-radius: 8px;
                background-color: white;
                gridline-color: #f0f0f0;
                selection-background-color: #e3f2fd;
            }
            QTableWidget::item {
                padding: 8px;
                border-bottom: 1px solid #f0f0f0;
            }
            QTableWidget::item:selected {
                background-color: #e3f2fd;
                color: #1976d2;
            }
            QHeaderView::section {
                background-color: #f8f9fa;
                padding: 10px;
                border: none;
                border-right: 1px solid #dee2e6;
                font-weight: bold;
                color: #495057;
            }
        """)

        mid_l.addWidget(self.q_table, 1)
        split.addWidget(mid)
        # ========== T·∫†O PREVIEW PANEL ƒê∆†N GI·∫¢N - KH√îNG CONFLICT ========== #
        # T·∫°o widget ph·∫£i ƒë∆°n gi·∫£n
        right_widget = QtWidgets.QWidget()
        right_layout = QtWidgets.QVBoxLayout(right_widget)
        right_layout.setContentsMargins(6, 6, 6, 6)

        # Preview Group ƒë∆°n gi·∫£n
        self.preview_group = QtWidgets.QGroupBox("üìã PREVIEW C√ÇU H·ªéI")
        self.preview_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 2px solid #dee2e6;
                border-radius: 8px;
                margin-top: 10px;
                padding-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
            }
        """)
        preview_layout = QtWidgets.QVBoxLayout(self.preview_group)

        # Th√¥ng tin c∆° b·∫£n
        self.info_widget = QtWidgets.QWidget()
        info_layout = QtWidgets.QFormLayout(self.info_widget)
        info_layout.setSpacing(5)

        self.preview_id_label = QtWidgets.QLabel("-")
        self.preview_topic_label = QtWidgets.QLabel("-")
        self.preview_difficulty_label = QtWidgets.QLabel("-")
        self.preview_date_label = QtWidgets.QLabel("-")

        info_layout.addRow("üÜî ID:", self.preview_id_label)
        info_layout.addRow("üìÅ Ch·ªß ƒë·ªÅ:", self.preview_topic_label)
        info_layout.addRow("üéØ ƒê·ªô kh√≥:", self.preview_difficulty_label)
        info_layout.addRow("üìÖ Ng√†y t·∫°o:", self.preview_date_label)

        preview_layout.addWidget(self.info_widget)

        # Separator
        separator = QtWidgets.QFrame()
        separator.setFrameShape(QtWidgets.QFrame.HLine)
        separator.setFrameShadow(QtWidgets.QFrame.Sunken)
        preview_layout.addWidget(separator)
        # T·∫°o preview container adaptive
        self.preview_container = QtWidgets.QStackedWidget()

        # Text preview (gi·ªØ nguy√™n)
        self.preview_text = QtWidgets.QLabel("Ch·ªçn c√¢u h·ªèi ƒë·ªÉ xem preview...")
        self.preview_text.setWordWrap(True)
        self.preview_text.setStyleSheet("padding: 10px; background: #f8f9fa; border-radius: 4px; min-height: 300px;")
        self.preview_text.setAlignment(Qt.AlignTop | Qt.AlignLeft)
        self.preview_container.addWidget(self.preview_text)

        # Image preview adaptive
        self.preview_image = AdaptiveImageViewer()
        self.preview_image.set_size_limits(600, 500, 250) # Nh·ªè h∆°n cho preview
        self.preview_image.enable_zoom_controls()
        self.preview_image.setToolTip("Double-click ƒë·ªÉ xem ·∫£nh fullscreen\nD√πng n√∫t +/- ƒë·ªÉ zoom")
        image_scroll_area = QtWidgets.QScrollArea()
        image_scroll_area.setWidget(self.preview_image)
        image_scroll_area.setWidgetResizable(True)
        image_scroll_area.setMaximumHeight(350)
        image_scroll_area.setStyleSheet("QScrollArea { border: none; }")
        self.preview_container.addWidget(self.preview_image)


        preview_layout.addWidget(self.preview_container)
        right_layout.addWidget(self.preview_group)
        split.addWidget(right_widget)

        # Kh·ªüi t·∫°o bi·∫øn ƒë∆°n gi·∫£n
        self.current_zoom = 1.0
        self.original_pixmap = None

        # Thi·∫øt l·∫≠p t·ª∑ l·ªá splitter: Tree(20%) - Questions(50%) - Preview(30%)
        split.setSizes([150, 200,1000])

        self.q_table.itemSelectionChanged.connect(self.on_question_select)

        # --- C·ªôt ph·∫£i: Panel chi ti·∫øt v·ªõi tabs ---
        right_tabs = QtWidgets.QTabWidget()
        right_tabs.setStyleSheet("""
            QTabWidget::pane {
                border: 1px solid #dee2e6;
                background: white;
            }
            QTabBar::tab {
                background: #f8f9fa;
                padding: 8px 16px;
                margin-right: 2px;
                border: 1px solid #dee2e6;
                border-bottom: none;
            }
            QTabBar::tab:selected {
                background: white;
                border-bottom: 1px solid white;
            }
        """)

        # Tab 2: Xem tr∆∞·ªõc
        preview_tab = QtWidgets.QWidget()
        preview_layout = QtWidgets.QVBoxLayout(preview_tab)
        preview_layout.setContentsMargins(10, 10, 10, 10)
        self._create_preview_tab_content(preview_layout)
        right_tabs.addTab(preview_tab, "üëÅÔ∏è Xem tr∆∞·ªõc")
        right_layout.addWidget(right_tabs)


        split.addWidget(right_tabs)
        split.setSizes([240, 150, 810])

        # Init d·ªØ li·ªáu
        self.refresh_tree()
        self.load_available_subjects()
        self.load_available_grades()

        # Signal cho combobox
        self.subject_cb.currentIndexChanged.connect(self.load_available_topics)
        self.grade_cb.currentIndexChanged.connect(self.load_available_topics)
        self.topic_cb.currentIndexChanged.connect(self.load_available_types)

        # Keyboard shortcuts
        QShortcut("Ctrl+N", self, self.new_question)
        QShortcut("Ctrl+S", self, self.save_question)
        QShortcut("Ctrl+F", self, self.focus_search)
        QShortcut("Delete", self, self.delete_question)
        QShortcut("F5", self, self.refresh_all)

        self.setAcceptDrops(True)
        self.q_table.setDragDropMode(QtWidgets.QAbstractItemView.InternalMove)

        self._setup_tree_management()

        self.apply_default_compact_mode()
    # ========== HELPER FUNCTIONS CHO DATABASE ROW ========== #
    def apply_default_compact_mode(self):
        """√Åp d·ª•ng ch·∫ø ƒë·ªô thu g·ªçn l√†m m·∫∑c ƒë·ªãnh khi kh·ªüi ƒë·ªông"""

        def set_compact():
            try:
                self.toggle_compact_mode()
                print("‚úÖ ƒê√£ √°p d·ª•ng ch·∫ø ƒë·ªô thu g·ªçn l√†m m·∫∑c ƒë·ªãnh")
            except Exception as e:
                print(f"‚ö†Ô∏è L·ªói √°p d·ª•ng ch·∫ø ƒë·ªô thu g·ªçn: {e}")

        # Delay 200ms ƒë·ªÉ ƒë·∫£m b·∫£o UI ƒë√£ render xong
        QtCore.QTimer.singleShot(200, set_compact)
    def safe_get(self, row, column, default=None):
        """Truy c·∫≠p an to√†n d·ªØ li·ªáu t·ª´ sqlite3.Row ho·∫∑c dict - S·ª¨A L·ªñI"""
        if row is None:
            return default

        try:
            # N·∫øu l√† dict, d√πng .get()
            if isinstance(row, dict):
                return row.get(column, default)

            # N·∫øu l√† sqlite3.Row, truy c·∫≠p tr·ª±c ti·∫øp
            if hasattr(row, 'keys') and column in row.keys():
                value = row[column]
                return value if value is not None else default

            # Th·ª≠ truy c·∫≠p nh∆∞ attribute
            if hasattr(row, column):
                value = getattr(row, column)
                return value if value is not None else default

            return default

        except (KeyError, IndexError, TypeError, AttributeError) as e:
            print(f"‚ö†Ô∏è safe_get error for column '{column}': {e}")
            return default
    def row_to_dict(self, row):
        """Chuy·ªÉn ƒë·ªïi sqlite3.Row th√†nh dictionary an to√†n - S·ª¨A L·ªñI RECURSION"""
        if row is None:
            return {}

        try:
            # Ki·ªÉm tra n·∫øu ƒë√£ l√† dict th√¨ tr·∫£ v·ªÅ lu√¥n
            if isinstance(row, dict):
                return row

            # N·∫øu l√† sqlite3.Row, chuy·ªÉn ƒë·ªïi sang dict
            if hasattr(row, 'keys'):
                return {key: row[key] for key in row.keys()}

            # N·∫øu l√† tuple ho·∫∑c list, th·ª≠ convert
            if isinstance(row, (tuple, list)) and hasattr(row, '_fields'):
                return dict(zip(row._fields, row))

            # Fallback: th·ª≠ dict() constructor
            return dict(row)

        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói row_to_dict: {e}, type: {type(row)}")
            return {}
    def open_add_question_dialog(self):
        """M·ªü dialog th√™m c√¢u h·ªèi m·ªõi"""
        tree_id = self._current_tree_id()
        if not tree_id:
            QtWidgets.QMessageBox.warning(self, "Ch∆∞a ch·ªçn th∆∞ m·ª•c",
                                          "Vui l√≤ng ch·ªçn th∆∞ m·ª•c trong c√¢y ƒë·ªÉ l∆∞u c√¢u h·ªèi")
            return

        dialog = QuestionEditDialog(self.db, tree_id=tree_id, parent=self)
        if dialog.exec() == QtWidgets.QDialog.Accepted:
            # Refresh danh s√°ch c√¢u h·ªèi
            self.on_tree_select()
    def _ensure_tables(self):
        """ƒê·∫£m b·∫£o c√°c b·∫£ng t·ªìn t·∫°i v·ªõi schema m·ªõi"""
        self.db.upgrade_question_bank_schema()
        print("‚úÖ ƒê√£ ƒë·∫£m b·∫£o schema ng√¢n h√†ng c√¢u h·ªèi")
    def _insert_sample_tree_data(self):
        """Th√™m d·ªØ li·ªáu m·∫´u cho c√¢y th∆∞ m·ª•c"""
        sample_data = [
            (None, "To√°n", "M√¥n", "M√¥n To√°n h·ªçc"),
            (None, "L√Ω", "M√¥n", "M√¥n V·∫≠t l√Ω"),
            (None, "H√≥a", "M√¥n", "M√¥n H√≥a h·ªçc"),
            (1, "L·ªõp 10", "L·ªõp", "To√°n l·ªõp 10"),
            (1, "L·ªõp 11", "L·ªõp", "To√°n l·ªõp 11"),
            (1, "L·ªõp 12", "L·ªõp", "To√°n l·ªõp 12"),
            (4, "M·ªánh ƒë·ªÅ - T·∫≠p h·ª£p", "Ch·ªß ƒë·ªÅ", "Ch∆∞∆°ng 1"),
            (4, "H√†m s·ªë", "Ch·ªß ƒë·ªÅ", "Ch∆∞∆°ng 2"),
            (7, "Nh·∫≠n bi·∫øt", "M·ª©c ƒë·ªô", "C√¢u h·ªèi nh·∫≠n bi·∫øt c∆° b·∫£n"),
            (7, "Th√¥ng hi·ªÉu", "M·ª©c ƒë·ªô", "C√¢u h·ªèi th√¥ng hi·ªÉu"),
            (7, "V·∫≠n d·ª•ng", "M·ª©c ƒë·ªô", "C√¢u h·ªèi v·∫≠n d·ª•ng"),
        ]

        for parent_id, name, level, description in sample_data:
            self.db.execute_query(
                "INSERT INTO exercise_tree (parent_id, name, level, description) VALUES (?, ?, ?, ?)",
                (parent_id, name, level, description)
            )

    # ========== NH√ìM 2: T·∫†O GIAO DI·ªÜN ========== #
    def _create_filter_controls(self, toolbar):
        """T·∫°o c√°c combobox filter"""
        toolbar.addWidget(QtWidgets.QLabel("M√¥n:"))
        self.subject_cb = QtWidgets.QComboBox()
        self.subject_cb.setMinimumWidth(120)
        toolbar.addWidget(self.subject_cb)

        toolbar.addWidget(QtWidgets.QLabel("L·ªõp:"))
        self.grade_cb = QtWidgets.QComboBox()
        self.grade_cb.setMinimumWidth(100)
        toolbar.addWidget(self.grade_cb)

        toolbar.addWidget(QtWidgets.QLabel("Ch·ªß ƒë·ªÅ:"))
        self.topic_cb = QtWidgets.QComboBox()
        self.topic_cb.setMinimumWidth(150)
        toolbar.addWidget(self.topic_cb)

        toolbar.addWidget(QtWidgets.QLabel("D·∫°ng:"))
        self.type_cb = QtWidgets.QComboBox()
        self.type_cb.setMinimumWidth(120)
        toolbar.addWidget(self.type_cb)

        toolbar.addWidget(QtWidgets.QLabel("M·ª©c ƒë·ªô:"))
        self.level_cb = QtWidgets.QComboBox()
        self.level_cb.addItems(["", "Nh·∫≠n bi·∫øt", "Th√¥ng hi·ªÉu", "V·∫≠n d·ª•ng", "V·∫≠n d·ª•ng cao"])
        self.level_cb.setMinimumWidth(120)
        toolbar.addWidget(self.level_cb)

        toolbar.addSeparator()

        filter_btn = toolbar.addAction("üîΩ L·ªçc")
        filter_btn.triggered.connect(self.filter_by_combobox)

        clear_filter_btn = toolbar.addAction("üîÑ X√≥a l·ªçc")
        clear_filter_btn.triggered.connect(self.clear_filters)
    def _create_preview_tab_content(self, layout):
        """T·∫°o n·ªôi dung tab preview"""
        layout.addWidget(QtWidgets.QLabel("üìã Xem tr∆∞·ªõc c√¢u h·ªèi:"))

        self.preview_widget = QtWidgets.QTextEdit()
        self.preview_widget.setReadOnly(True)
        self.preview_widget.setStyleSheet("""
            QTextEdit {
                background: white;
                border: 2px solid #e9ecef;
                border-radius: 8px;
                padding: 16px;
                font-size: 14px;
            }
        """)
        layout.addWidget(self.preview_widget)
    def _create_stats_tab_content(self, layout):
        """T·∫°o n·ªôi dung tab th·ªëng k√™"""
        layout.addWidget(QtWidgets.QLabel("üìä Th·ªëng k√™ ng√¢n h√†ng c√¢u h·ªèi:"))

        self.stats_widget = QtWidgets.QTextEdit()
        self.stats_widget.setReadOnly(True)
        layout.addWidget(self.stats_widget)

        update_stats_btn = QtWidgets.QPushButton("üîÑ C·∫≠p nh·∫≠t th·ªëng k√™")
        update_stats_btn.clicked.connect(self.update_statistics)
        layout.addWidget(update_stats_btn)
    def _create_history_tab_content(self, layout):
        """T·∫°o n·ªôi dung tab l·ªãch s·ª≠"""
        layout.addWidget(QtWidgets.QLabel("üìú L·ªãch s·ª≠ ch·ªânh s·ª≠a:"))

        self.history_table = QtWidgets.QTableWidget(0, 4)
        self.history_table.setHorizontalHeaderLabels(["Th·ªùi gian", "H√†nh ƒë·ªông", "N·ªôi dung c≈©", "N·ªôi dung m·ªõi"])
        header = self.history_table.horizontalHeader()
        header.setSectionResizeMode(0, QtWidgets.QHeaderView.ResizeToContents)
        header.setSectionResizeMode(1, QtWidgets.QHeaderView.ResizeToContents)
        header.setSectionResizeMode(2, QtWidgets.QHeaderView.Stretch)
        header.setSectionResizeMode(3, QtWidgets.QHeaderView.Stretch)

        layout.addWidget(self.history_table)

    # ========== NH√ìM 3: QU·∫¢N L√ù C√ÇY TH∆Ø M·ª§C ========== #
    def refresh_tree(self):
        """L√†m m·ªõi c√¢y th∆∞ m·ª•c"""
        try:
            self.tree.clear()
            self.tree_nodes.clear()

            rows = self.db.execute_query(
                "SELECT id, parent_id, name, level FROM exercise_tree ORDER BY parent_id, level, name",
                fetch='all'
            ) or []

            if not rows:
                self._insert_sample_tree_data()
                rows = self.db.execute_query(
                    "SELECT id, parent_id, name, level FROM exercise_tree ORDER BY parent_id, level, name",
                    fetch='all'
                ) or []

            children: Dict[int | None, list] = {}
            for r in rows:
                children.setdefault(r["parent_id"], []).append(r)

            def build(parent_db_id: int | None, parent_item: QtWidgets.QTreeWidgetItem | None):
                for node in children.get(parent_db_id, []):
                    icon_text = self._get_level_icon(node["level"])
                    item_text = f"{icon_text} {node['name']}"

                    item = QtWidgets.QTreeWidgetItem([item_text])
                    item.setData(0, Qt.UserRole, node["id"])
                    item.setToolTip(0, f"Level: {node['level']}\nID: {node['id']}")

                    self.tree_nodes[str(id(item))] = node["id"]

                    if parent_item is None:
                        self.tree.addTopLevelItem(item)
                    else:
                        parent_item.addChild(item)
                    build(node["id"], item)

            build(None, None)
            self.tree.expandAll()

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ t·∫£i c√¢y th∆∞ m·ª•c: {e}")

    def _get_level_icon(self, level: str) -> str:
        """Tr·∫£ v·ªÅ icon cho t·ª´ng level"""
        icons = {
            "M√¥n": "üìö",
            "L·ªõp": "üéì",
            "Ch·ªß ƒë·ªÅ": "üìñ",
            "D·∫°ng": "üìù",
            "M·ª©c ƒë·ªô": "‚≠ê"
        }
        return icons.get(level, "üìÅ")

    def on_tree_select(self):
        """X·ª≠ l√Ω khi ch·ªçn node tr√™n c√¢y"""
        items = self.tree.selectedItems()
        if not items:
            return
        tree_id = items[0].data(0, Qt.UserRole)
        if not tree_id:
            return

        rows = self.db.execute_query("SELECT * FROM question_bank WHERE tree_id=?", (tree_id,), fetch="all") or []
        self._load_question_rows(rows)

    def toggle_tree_panel(self):
        """·∫®n/hi·ªán panel c√¢y"""
        w = self.tree.parentWidget()
        w.setVisible(not w.isVisible())

    def open_tree_manager(self):
        """M·ªü c·ª≠a s·ªï qu·∫£n l√Ω c√¢y"""
        QtWidgets.QMessageBox.information(self, "Th√¥ng tin", "Ch·ª©c nƒÉng qu·∫£n l√Ω c√¢y ƒëang ph√°t tri·ªÉn.")
    def _setup_tree_management(self):
        """Thi·∫øt l·∫≠p ch·ª©c nƒÉng qu·∫£n l√Ω c√¢y th∆∞ m·ª•c"""
        # Th√™m context menu cho tree
        self.tree.setContextMenuPolicy(Qt.CustomContextMenu)
        self.tree.customContextMenuRequested.connect(self._show_tree_context_menu)

        # Th√™m double-click ƒë·ªÉ edit
        self.tree.itemDoubleClicked.connect(self._edit_tree_node)

        # Th√™m keyboard shortcuts
        self._setup_tree_shortcuts()

    def _setup_tree_shortcuts(self):
        """Thi·∫øt l·∫≠p keyboard shortcuts cho tree"""
        # F2 ƒë·ªÉ edit node ƒë∆∞·ª£c ch·ªçn
        edit_shortcut = QShortcut(QKeySequence("F2"), self.tree)
        edit_shortcut.activated.connect(self._edit_selected_tree_node)

        # Delete ƒë·ªÉ x√≥a node
        delete_shortcut = QShortcut(QKeySequence("Delete"), self.tree)
        delete_shortcut.activated.connect(self._delete_selected_tree_node)

        # Ctrl+N ƒë·ªÉ th√™m node m·ªõi
        add_shortcut = QShortcut(QKeySequence("Ctrl+Shift+N"), self.tree)
        add_shortcut.activated.connect(self._add_tree_node)

    def _show_tree_context_menu(self, position):
        """Hi·ªÉn th·ªã context menu cho tree"""
        item = self.tree.itemAt(position)

        menu = QtWidgets.QMenu(self)

        # Th√™m node m·ªõi
        add_action = menu.addAction("‚ûï Th√™m nh√°nh m·ªõi")
        add_action.triggered.connect(lambda: self._add_tree_node(item))

        if item:  # N·∫øu click v√†o node
            menu.addSeparator()

            # Th√™m node con
            add_child_action = menu.addAction("üìÅ Th√™m nh√°nh con")
            add_child_action.triggered.connect(lambda: self._add_child_node(item))

            # S·ª≠a node
            edit_action = menu.addAction("‚úèÔ∏è S·ª≠a t√™n nh√°nh")
            edit_action.triggered.connect(lambda: self._edit_tree_node(item))

            # Sao ch√©p node
            copy_action = menu.addAction("üìã Sao ch√©p nh√°nh")
            copy_action.triggered.connect(lambda: self._copy_tree_node(item))

            menu.addSeparator()

            # X√≥a node
            delete_action = menu.addAction("üóëÔ∏è X√≥a nh√°nh")
            delete_action.triggered.connect(lambda: self._delete_tree_node(item))

            menu.addSeparator()

            # Th√¥ng tin node
            info_action = menu.addAction("‚ÑπÔ∏è Th√¥ng tin")
            info_action.triggered.connect(lambda: self._show_node_info(item))

        # L√†m m·ªõi c√¢y
        menu.addSeparator()
        refresh_action = menu.addAction("üîÑ L√†m m·ªõi")
        refresh_action.triggered.connect(self.refresh_tree)

        # Hi·ªÉn th·ªã menu
        menu.exec(self.tree.mapToGlobal(position))

    def _add_tree_node(self, parent_item=None):
        """Th√™m node m·ªõi"""
        try:
            dialog = TreeNodeDialog(self.db, mode="add", parent=self)

            # N·∫øu c√≥ parent item, set l√†m parent
            parent_id = None
            if parent_item:
                parent_id = parent_item.data(0, Qt.UserRole)
                if parent_id:
                    dialog.set_parent_id(parent_id)

            if dialog.exec() == QtWidgets.QDialog.Accepted:
                # Refresh tree sau khi th√™m
                self.refresh_tree()

                # T√¨m l·∫°i parent item sau khi refresh
                if parent_id:
                    self._expand_node_by_id(parent_id)

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ th√™m node: {e}")

    def _add_child_node(self, parent_item):
        """Th√™m node con"""
        if not parent_item:
            return

        parent_id = parent_item.data(0, Qt.UserRole)
        if not parent_id:
            return

        try:
            dialog = TreeNodeDialog(self.db, mode="add", parent=self)
            dialog.set_parent_id(parent_id)

            if dialog.exec() == QtWidgets.QDialog.Accepted:
                self.refresh_tree()
                # T√¨m l·∫°i v√† expand parent sau khi refresh
                self._expand_node_by_id(parent_id)

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ th√™m node con: {e}")

    def _edit_tree_node(self, item):
        """S·ª≠a node"""
        if not item:
            return

        node_id = item.data(0, Qt.UserRole)
        if not node_id:
            return

        try:
            dialog = TreeNodeDialog(self.db, mode="edit", node_id=node_id, parent=self)

            if dialog.exec() == QtWidgets.QDialog.Accepted:
                self.refresh_tree()
                # T√¨m l·∫°i v√† select node sau khi refresh
                self._select_node_by_id(node_id)

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ s·ª≠a node: {e}")

    def _edit_selected_tree_node(self):
        """S·ª≠a node ƒë∆∞·ª£c ch·ªçn"""
        selected_items = self.tree.selectedItems()
        if selected_items:
            self._edit_tree_node(selected_items[0])

    def _copy_tree_node(self, item):
        """Sao ch√©p node"""
        if not item:
            return

        node_id = item.data(0, Qt.UserRole)
        if not node_id:
            return

        try:
            # L·∫•y th√¥ng tin node g·ªëc
            row = self.db.execute_query(
                "SELECT name, level, description, parent_id FROM exercise_tree WHERE id = ?",
                (node_id,), fetch="one"
            )

            if row:
                new_name = f"{row['name']} (Sao ch√©p)"

                # T·∫°o node m·ªõi
                description = row.get('description', '') if row.get('description') else ''

                self.db.execute_query(
                    "INSERT INTO exercise_tree (parent_id, name, level, description) VALUES (?, ?, ?, ?)",
                    (row['parent_id'], new_name, row['level'], description)
                )

                self.refresh_tree()
                QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ sao ch√©p '{new_name}'")

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ sao ch√©p node: {e}")

    def _delete_tree_node(self, item):
        """X√≥a node v·ªõi x√°c nh·∫≠n"""
        if not item:
            return

        node_id = item.data(0, Qt.UserRole)
        node_name = item.text(0)

        if not node_id:
            return

        try:
            # Ki·ªÉm tra node con
            children_count = self.db.execute_query(
                "SELECT COUNT(*) as count FROM exercise_tree WHERE parent_id = ?",
                (node_id,), fetch="one"
            )

            # Ki·ªÉm tra c√¢u h·ªèi trong node
            questions_count = self.db.execute_query(
                "SELECT COUNT(*) as count FROM question_bank WHERE tree_id = ?",
                (node_id,), fetch="one"
            )

            warning_msg = f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a nh√°nh '{node_name}'?"

            if children_count and children_count["count"] > 0:
                warning_msg += f"\n\n‚ö†Ô∏è Nh√°nh n√†y c√≥ {children_count['count']} nh√°nh con."

            if questions_count and questions_count["count"] > 0:
                warning_msg += f"\n‚ö†Ô∏è Nh√°nh n√†y ch·ª©a {questions_count['count']} c√¢u h·ªèi."
                warning_msg += "\n\nT·∫•t c·∫£ d·ªØ li·ªáu s·∫Ω b·ªã x√≥a vƒ©nh vi·ªÖn!"

            reply = QtWidgets.QMessageBox.question(
                self, "X√°c nh·∫≠n x√≥a",
                warning_msg,
                QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
                QtWidgets.QMessageBox.No
            )

            if reply == QtWidgets.QMessageBox.Yes:
                # X√≥a node v√† t·∫•t c·∫£ con
                self.db.execute_query("DELETE FROM exercise_tree WHERE id = ?", (node_id,))
                self.refresh_tree()
                QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ x√≥a nh√°nh '{node_name}'")

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ x√≥a node: {e}")

    def _delete_selected_tree_node(self):
        """X√≥a node ƒë∆∞·ª£c ch·ªçn"""
        selected_items = self.tree.selectedItems()
        if selected_items:
            self._delete_tree_node(selected_items[0])

    def _show_node_info(self, item):
        """Hi·ªÉn th·ªã th√¥ng tin node"""
        if not item:
            return

        node_id = item.data(0, Qt.UserRole)
        if not node_id:
            return

        try:
            # L·∫•y th√¥ng tin node
            node = self.db.execute_query(
                "SELECT * FROM exercise_tree WHERE id = ?",
                (node_id,), fetch="one"
            )

            if node:
                # ƒê·∫øm s·ªë l∆∞·ª£ng con
                children_count = self.db.execute_query(
                    "SELECT COUNT(*) as count FROM exercise_tree WHERE parent_id = ?",
                    (node_id,), fetch="one"
                )["count"]

                # ƒê·∫øm s·ªë c√¢u h·ªèi
                questions_count = self.db.execute_query(
                    "SELECT COUNT(*) as count FROM question_bank WHERE tree_id = ?",
                    (node_id,), fetch="one"
                )["count"]

                info_text = f"""
                üìÅ TH√îNG TIN NH√ÅNH
                
                ID: {node['id']}
                T√™n: {node['name']}
                C·∫•p ƒë·ªô: {node['level']}
                M√¥ t·∫£: {node.get('description', 'Kh√¥ng c√≥')}
                
                üìä TH·ªêNG K√ä:
                - S·ªë nh√°nh con: {children_count}
                - S·ªë c√¢u h·ªèi: {questions_count}
                
                üïê Ng√†y t·∫°o: {node.get('created_at', 'Kh√¥ng r√µ')}
                """

                QtWidgets.QMessageBox.information(self, "Th√¥ng tin nh√°nh", info_text)

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ l·∫•y th√¥ng tin: {e}")

    def _expand_node_by_id(self, node_id):
        """T√¨m v√† expand node theo ID"""
        try:
            root = self.tree.invisibleRootItem()
            self._find_and_expand_recursive(root, node_id)
        except Exception:
            pass

    def _find_and_expand_recursive(self, parent_item, target_id):
        """ƒê·ªá quy t√¨m v√† expand node"""
        for i in range(parent_item.childCount()):
            child = parent_item.child(i)
            if child and child.data(0, Qt.UserRole) == target_id:
                child.setExpanded(True)
                return True

            if self._find_and_expand_recursive(child, target_id):
                return True

        return False

    def _select_node_by_id(self, node_id):
        """T√¨m v√† select node theo ID"""
        try:
            root = self.tree.invisibleRootItem()
            self._find_and_select_recursive(root, node_id)
        except Exception:
            pass

    def _find_and_select_recursive(self, parent_item, target_id):
        """ƒê·ªá quy t√¨m v√† select node"""
        for i in range(parent_item.childCount()):
            child = parent_item.child(i)
            if child and child.data(0, Qt.UserRole) == target_id:
                self.tree.setCurrentItem(child)
                return True

            if self._find_and_select_recursive(child, target_id):
                return True

        return False

    def open_tree_manager(self):
        """M·ªü c·ª≠a s·ªï qu·∫£n l√Ω c√¢y n√¢ng cao"""
        dialog = TreeManagerDialog(self.db, parent=self)
        dialog.exec()
        self.refresh_tree()

    # ========== NH√ìM 4.5: T√çNH NƒÇNG HI·ªÇN TH·ªä N√ÇNG CAO ========== #

    def on_quick_search(self):
        """T√¨m ki·∫øm nhanh theo n·ªôi dung"""
        keyword = self.quick_search.text().strip().lower()
        if len(keyword) < 2:  # T·ªëi thi·ªÉu 2 k√Ω t·ª±
            self.apply_filters()
            return

        # L·ªçc c√°c d√≤ng trong b·∫£ng hi·ªán t·∫°i
        for row in range(self.q_table.rowCount()):
            content_item = self.q_table.item(row, 2)  # C·ªôt n·ªôi dung
            tags_item = self.q_table.item(row, 7)  # C·ªôt tags

            show_row = False
            if content_item and keyword in content_item.text().lower():
                show_row = True
            elif tags_item and keyword in tags_item.text().lower():
                show_row = True

            self.q_table.setRowHidden(row, not show_row)

        self.update_stats_label()

    def apply_filters(self):
        """√Åp d·ª•ng c√°c b·ªô l·ªçc"""
        content_filter = self.content_type_filter.currentText()
        difficulty_filter = self.difficulty_filter.currentText()

        visible_count = 0
        for row in range(self.q_table.rowCount()):
            show_row = True

            # L·ªçc theo lo·∫°i content
            if content_filter != "T·∫•t c·∫£ lo·∫°i":
                type_item = self.q_table.item(row, 3)
                if type_item:
                    type_text = type_item.text()
                    if content_filter == "üìù Text" and "üìù" not in type_text:
                        show_row = False
                    elif content_filter == "üñºÔ∏è Image" and "üñºÔ∏è" not in type_text:
                        show_row = False
                    elif content_filter == "üìÑ PDF" and "üìÑ" not in type_text:
                        show_row = False
                    elif content_filter == "üìò Word" and "üìò" not in type_text:
                        show_row = False

            # L·ªçc theo ƒë·ªô kh√≥
            if difficulty_filter != "T·∫•t c·∫£ ƒë·ªô kh√≥":
                diff_item = self.q_table.item(row, 4)
                if diff_item:
                    diff_text = diff_item.text()
                    if difficulty_filter == "üü¢ D·ªÖ" and "üü¢" not in diff_text:
                        show_row = False
                    elif difficulty_filter == "üü° Trung b√¨nh" and "üü°" not in diff_text:
                        show_row = False
                    elif difficulty_filter == "üî¥ Kh√≥" and "üî¥" not in diff_text:
                        show_row = False

            self.q_table.setRowHidden(row, not show_row)
            if show_row:
                visible_count += 1

        self.update_stats_label(visible_count)

    def update_stats_label(self, visible_count=None):
        """C·∫≠p nh·∫≠t label th·ªëng k√™"""
        total = self.q_table.rowCount()
        if visible_count is None:
            visible_count = sum(1 for row in range(total) if not self.q_table.isRowHidden(row))

        if visible_count == total:
            self.stats_label.setText(f"{total} c√¢u h·ªèi")
        else:
            self.stats_label.setText(f"{visible_count}/{total} c√¢u h·ªèi")

    def show_view_options(self):
        """Hi·ªÉn th·ªã menu t√πy ch·ªçn hi·ªÉn th·ªã"""
        menu = QMenu(self)

        # T√πy ch·ªçn ·∫©n/hi·ªán c·ªôt
        columns_menu = menu.addMenu("·∫®n/Hi·ªán c·ªôt")
        headers = ["‚òëÔ∏è", "ID", "üìä Lo·∫°i", "üéØ ƒê·ªô kh√≥", "‚úÖ ƒê√°p √°n", "üìÅ Ch·ªß ƒë·ªÅ", "üè∑Ô∏è Tags", "üìÖ Ng√†y t·∫°o"]

        for i, header in enumerate(headers):
            action = columns_menu.addAction(header)
            action.setCheckable(True)
            action.setChecked(not self.q_table.isColumnHidden(i))
            action.triggered.connect(lambda checked, col=i: self.toggle_column(col, checked))

        menu.addSeparator()

        # T√πy ch·ªçn k√≠ch th∆∞·ªõc
        compact_action = menu.addAction("üî∏ Ch·∫ø ƒë·ªô thu g·ªçn")
        compact_action.triggered.connect(self.toggle_compact_mode)

        detail_action = menu.addAction("üîπ Ch·∫ø ƒë·ªô chi ti·∫øt")
        detail_action.triggered.connect(self.toggle_detail_mode)

        menu.exec(self.view_options_btn.mapToGlobal(self.view_options_btn.rect().bottomLeft()))

    def toggle_column(self, column, visible):
        """·∫®n/hi·ªán c·ªôt"""
        self.q_table.setColumnHidden(column, not visible)

    def toggle_compact_mode(self):
        """Chuy·ªÉn sang ch·∫ø ƒë·ªô thu g·ªçn"""
        # ·∫®n m·ªôt s·ªë c·ªôt kh√¥ng c·∫ßn thi·∫øt
        columns_to_hide = [3, 5, 6, 7, 8]
        for col in columns_to_hide:
            self.q_table.setColumnHidden(col, True)

    def toggle_detail_mode(self):
        """Chuy·ªÉn sang ch·∫ø ƒë·ªô chi ti·∫øt"""
        # Hi·ªán t·∫•t c·∫£ c·ªôt
        for col in range(self.q_table.columnCount()):
            self.q_table.setColumnHidden(col, False)

    def on_question_select_enhanced(self):
        """X·ª≠ l√Ω ch·ªçn c√¢u h·ªèi v·ªõi preview n√¢ng cao"""
        items = self.q_table.selectedItems()
        if not items:
            self.clear_preview()
            return

        row = items[0].row()
        question_id = self.q_table.item(row, 1).text()

        try:
            qid = int(question_id)
            self.load_question_preview(qid)
            self.current_question_id = qid
        except (ValueError, IndexError):
            self.clear_preview()

    def load_question_preview(self, question_id):
        """Load preview c√¢u h·ªèi ƒë∆°n gi·∫£n - kh√¥ng d√πng widget ph·ª©c t·∫°p"""
        q = self.db.execute_query("SELECT * FROM question_bank WHERE id=?", (question_id,), fetch="one")
        if not q:
            self.clear_preview()
            return

        try:
            # Chuy·ªÉn ƒë·ªïi sang dict
            q_dict = self.row_to_dict(q)

            # C·∫≠p nh·∫≠t info labels
            self.preview_id_label.setText(f"#{question_id}")

            # Ch·ªß ƒë·ªÅ
            tree_id = self.safe_get(q_dict, "tree_id", 0)
            tree_path = self.get_tree_path(tree_id) if tree_id else []
            topic_path = " > ".join([p["name"] for p in tree_path]) if tree_path else "Ch∆∞a ph√¢n lo·∫°i"
            self.preview_topic_label.setText(topic_path)

            # ƒê·ªô kh√≥
            difficulty = self.safe_get(q_dict, "difficulty_level", "medium")
            self.preview_difficulty_label.setText(difficulty.title())

            # Ng√†y t·∫°o
            created_date = self.safe_get(q_dict, "created_date", "")
            date_str = created_date[:16] if created_date else "Kh√¥ng x√°c ƒë·ªãnh"
            self.preview_date_label.setText(date_str)

            # N·ªôi dung preview ƒë∆°n gi·∫£n
            content_type = self.safe_get(q_dict, "content_type", "text")
            content_text = self.safe_get(q_dict, "content_text", "")
            content_data = self.safe_get(q_dict, "content_data", None)

            if content_type == "image" and content_data:
                # Hi·ªÉn th·ªã ·∫£nh trong preview
                self.preview_container.setCurrentIndex(1)  # Image viewer
                self.preview_image.load_image_from_data(content_data)
            else:
                # Hi·ªÉn th·ªã text
                self.preview_container.setCurrentIndex(0)  # Text label
                if content_text:
                    preview_text = content_text[:200] + ("..." if len(content_text) > 200 else "")
                else:
                    preview_text = "‚ùå [N·ªôi dung tr·ªëng]"
                self.preview_text.setText(preview_text)

        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói load preview: {e}")
            self.clear_preview()
    def clear_preview(self):
        """Clear preview ƒë∆°n gi·∫£n"""
        try:
            if hasattr(self, 'preview_id_label'):
                self.preview_id_label.setText("-")
            if hasattr(self, 'preview_topic_label'):
                self.preview_topic_label.setText("-")
            if hasattr(self, 'preview_difficulty_label'):
                self.preview_difficulty_label.setText("-")
            if hasattr(self, 'preview_date_label'):
                self.preview_date_label.setText("-")
            if hasattr(self, 'preview_content'):
                self.preview_content.setText("Ch·ªçn c√¢u h·ªèi ƒë·ªÉ xem preview...")

            # Reset variables
            self.original_pixmap = None
            self.current_zoom = 1.0
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói clear_preview: {e}")
    # Chu·ªôt ph·∫£i v√†o c√¢u h·ªèi trong b·∫£ng ·ªÉ hi·ªán th·ªã c√°c menu
    def show_enhanced_context_menu(self, position):
        """Hi·ªÉn th·ªã context menu n√¢ng cao"""
        item = self.q_table.itemAt(position)
        if not item:
            return

        menu = QMenu(self)

        # C√°c h√†nh ƒë·ªông c∆° b·∫£n
        edit_action = menu.addAction("‚úèÔ∏è Ch·ªânh s·ª≠a c√¢u h·ªèi")
        edit_action.triggered.connect(self.edit_current_question)

        view_action = menu.addAction("üëÅÔ∏è Xem chi ti·∫øt")
        view_action.triggered.connect(self.view_question_detail)

        menu.addSeparator()

        # Qu·∫£n l√Ω
        move_action = menu.addAction("üóÇÔ∏è Di chuy·ªÉn ƒë·∫øn...")
        move_action.triggered.connect(self.move_question_to_folder)

        tags_action = menu.addAction("üè∑Ô∏è Qu·∫£n l√Ω tags")
        tags_action.triggered.connect(self.manage_question_tags)

        copy_action = menu.addAction("üìã Sao ch√©p")
        copy_action.triggered.connect(self.copy_question)

        menu.addSeparator()

        # X√≥a
        delete_action = menu.addAction("üóëÔ∏è X√≥a c√¢u h·ªèi")
        delete_action.triggered.connect(self.delete_question)

        menu.exec(self.q_table.mapToGlobal(position))
    # ========== NH√ìM 4: QU·∫¢N L√ù DANH S√ÅCH C√ÇU H·ªéI ========== #
    def _load_question_rows(self, rows):
        """Load danh s√°ch c√¢u h·ªèi v·ªõi x·ª≠ l√Ω l·ªói an to√†n"""
        if not rows:
            self.q_table.setRowCount(0)
            if hasattr(self, 'update_stats_label'):
                self.update_stats_label()
            return

        self.q_table.setRowCount(0)

        # ========== X·ª¨ L√ù T·ª™NG D√íNG D·ªÆ LI·ªÜU V·ªöI ERROR HANDLING ========== #
        processed_count = 0
        error_count = 0

        for i, r in enumerate(rows):
            try:
                # X·ª≠ l√Ω d·ªØ li·ªáu an to√†n
                if r is None:
                    continue

                # Chuy·ªÉn ƒë·ªïi sang dict n·∫øu c·∫ßn
                if isinstance(r, dict):
                    row_dict = r
                else:
                    row_dict = self.row_to_dict(r)

                if not row_dict:
                    print(f"‚ö†Ô∏è Empty row data at index {i}")
                    continue

                # T·∫°o checkbox
                checkbox = QtWidgets.QCheckBox()
                checkbox.setChecked(False)

                # Th√¥ng tin c∆° b·∫£n v·ªõi validation
                row_id = self.safe_get(row_dict, "id", 0)
                if not row_id:
                    continue


                # Lo·∫°i content v·ªõi fallback
                content_type = self.safe_get(row_dict, "content_type", "text")
                type_display = {
                    "text": "üìù Text",
                    "image": "üñºÔ∏è Image",
                    "pdf": "üìÑ PDF",
                    "word": "üìò Word",
                    "mixed": "üîÄ Mixed"
                }.get(content_type, "üìù Text")

                # ƒê·ªô kh√≥ v·ªõi m√†u s·∫Øc
                difficulty = self.safe_get(row_dict, "difficulty_level", "medium")
                difficulty_colors = {
                    "easy": ("#d4edda", "üü¢ D·ªÖ"),
                    "medium": ("#fff3cd", "üü° Trung b√¨nh"),
                    "hard": ("#f8d7da", "üî¥ Kh√≥")
                }
                difficulty_color, difficulty_display = difficulty_colors.get(difficulty, ("#f8f9fa", "üü° Trung b√¨nh"))

                # ƒê√°p √°n
                correct_answer = self.safe_get(row_dict, "correct_answer", "") or self.safe_get(row_dict, "correct", "")
                answer_display = correct_answer[:30] + (
                    "..." if len(correct_answer) > 30 else "") if correct_answer else "Ch∆∞a c√≥ ƒë√°p √°n"

                # Tr·∫°ng th√°i
                status = self.safe_get(row_dict, "status", "active")
                status_display = {
                    "active": "‚úÖ Ho·∫°t ƒë·ªông",
                    "draft": "üìù Nh√°p",
                    "archived": "üìÅ L∆∞u tr·ªØ"
                }.get(status, "‚úÖ Ho·∫°t ƒë·ªông")

                # Th·ªëng k√™ s·ª≠ d·ª•ng
                usage_count = self.safe_get(row_dict, "usage_count", 0)
                usage_display = f"{usage_count} l·∫ßn"

                # Th·ªùi gian
                created_date = self.safe_get(row_dict, "created_date", "")
                if created_date:
                    try:
                        from datetime import datetime
                        if 'T' in str(created_date):
                            dt = datetime.fromisoformat(str(created_date).replace('Z', '+00:00'))
                        else:
                            dt = datetime.strptime(str(created_date)[:19], '%Y-%m-%d %H:%M:%S')
                        date_display = dt.strftime("%d/%m/%Y")
                    except:
                        date_display = str(created_date)[:10]
                else:
                    date_display = ""

                # Ch·ªß ƒë·ªÅ t·ª´ tree
                tree_id = self.safe_get(row_dict, "tree_id", 0)
                try:
                    path = self.get_tree_path(tree_id) if tree_id else []
                    topic_display = " > ".join([p.get("name", "") for p in path[-2:]]) if len(path) >= 2 else (
                        path[0].get("name", "") if path else "Ch∆∞a ph√¢n lo·∫°i")
                except:
                    topic_display = "L·ªói load ch·ªß ƒë·ªÅ"

                # Tags
                try:
                    tags = self.db.execute_query(
                        "SELECT tag_name FROM question_tags WHERE question_id=?",
                        (row_id,), fetch="all"
                    ) or []
                    tags_text = ", ".join(
                        [self.safe_get(dict(tag) if hasattr(tag, 'keys') else {}, "tag_name", "") for tag in
                         tags]) if tags else ""
                except:
                    tags_text = ""

                # Th√™m d√≤ng v√†o b·∫£ng (c·∫≠p nh·∫≠t s·ªë c·ªôt n·∫øu c·∫ßn)
                row_idx = self.q_table.rowCount()
                self.q_table.insertRow(row_idx)

                # ƒê·∫∑t d·ªØ li·ªáu v√†o c√°c c·ªôt
                try:
                    self.q_table.setCellWidget(row_idx, 0, checkbox)
                    self.q_table.setItem(row_idx, 1, QtWidgets.QTableWidgetItem(str(row_id)))
                    self.q_table.setItem(row_idx, 2, QtWidgets.QTableWidgetItem(type_display))

                    # C·ªôt ƒë·ªô kh√≥ v·ªõi m√†u n·ªÅn
                    difficulty_item = QtWidgets.QTableWidgetItem(difficulty_display)
                    difficulty_item.setBackground(QtGui.QColor(difficulty_color))
                    self.q_table.setItem(row_idx, 3, difficulty_item)

                    self.q_table.setItem(row_idx, 4, QtWidgets.QTableWidgetItem(answer_display))
                    self.q_table.setItem(row_idx, 5, QtWidgets.QTableWidgetItem(topic_display))

                    # Tags v·ªõi m√†u n·ªÅn
                    tags_item = QtWidgets.QTableWidgetItem(tags_text)
                    if tags_text:
                        tags_item.setBackground(QtGui.QColor("#e3f2fd"))
                    self.q_table.setItem(row_idx, 6, tags_item)

                    # Ki·ªÉm tra s·ªë c·ªôt c√≥ ƒë·ªß kh√¥ng
                    if self.q_table.columnCount() > 7:
                        self.q_table.setItem(row_idx, 7, QtWidgets.QTableWidgetItem(usage_display))
                    if self.q_table.columnCount() > 8:
                        self.q_table.setItem(row_idx, 8, QtWidgets.QTableWidgetItem(date_display))

                    processed_count += 1

                except Exception as e:
                    print(f"‚ö†Ô∏è L·ªói set table item row {row_idx}: {e}")
                    error_count += 1

            except Exception as e:
                print(f"‚ö†Ô∏è L·ªói x·ª≠ l√Ω row {i}: {e}")
                error_count += 1
                continue

        print(f"‚úÖ ƒê√£ load {processed_count} c√¢u h·ªèi, {error_count} l·ªói")

        # C·∫≠p nh·∫≠t th·ªëng k√™
        if hasattr(self, 'update_stats_label'):
            try:
                self.update_stats_label()
            except:
                pass
    def on_question_select(self):
        """Load c√¢u h·ªèi ƒë∆∞·ª£c ch·ªçn v·ªõi x·ª≠ l√Ω sqlite3.Row an to√†n"""
        items = self.q_table.selectedItems()
        if not items:
            return

        row = items[0].row()
        item_text = self.q_table.item(row, 1).text()

        try:
            qid = int(item_text)
        except (ValueError, IndexError):
            return

        # ========== T·∫¢I D·ªÆ LI·ªÜU C√ÇU H·ªéI V·ªöI X·ª¨ L√ù AN TO√ÄN ========== #
        q = self.db.execute_query("SELECT * FROM question_bank WHERE id=?", (qid,), fetch="one")
        if not q:
            return

        # Chuy·ªÉn ƒë·ªïi sang dict ƒë·ªÉ s·ª≠ d·ª•ng .get()
        q_dict = self.row_to_dict(q)

        # C·∫≠p nh·∫≠t ID hi·ªán t·∫°i
        self.current_question_id = qid

        # Hi·ªÉn th·ªã n·ªôi dung v·ªõi truy c·∫≠p an to√†n
        content_text = self.safe_get(q_dict, "content_text", "")
        content_type = self.safe_get(q_dict, "content_type", "text")

        if hasattr(self, 'content_text'):
            self.content_text.setPlainText(content_text)

        # Hi·ªÉn th·ªã ƒë√°p √°n
        correct_answer = self.safe_get(q_dict, "correct_answer", "")
        answer_data = self.safe_get(q_dict, "answer_data", "")

        # ∆Øu ti√™n correct_answer, fallback v·ªÅ correct n·∫øu c√≥
        if not correct_answer:
            correct_answer = self.safe_get(q_dict, "correct", "")

        if hasattr(self, 'answer_text'):
            self.answer_text.setPlainText(correct_answer)

        # Load preview n·∫øu c√≥ method
        if hasattr(self, 'load_question_preview'):
            self.load_question_preview(qid)

        # Load l·ªãch s·ª≠ n·∫øu c√≥ method
        if hasattr(self, '_load_question_history'):
            self._load_question_history(qid)
    def show_table_context_menu(self, position):
        """Hi·ªÉn th·ªã context menu cho b·∫£ng"""
        if not self.q_table.itemAt(position):
            return

        menu = QtWidgets.QMenu(self)

        edit_action = menu.addAction("‚úèÔ∏è Ch·ªânh s·ª≠a")
        edit_action.triggered.connect(self.on_question_select)

        menu.addSeparator()

        export_menu = menu.addMenu("üì§ Xu·∫•t")
        export_menu.addAction("Xu·∫•t ra Word").triggered.connect(self.export_to_word)
        export_menu.addAction("Xu·∫•t ra PDF").triggered.connect(self.export_to_pdf)

        menu.addSeparator()

        delete_action = menu.addAction("üóëÔ∏è X√≥a")
        delete_action.triggered.connect(self.delete_question)

        menu.exec(self.q_table.mapToGlobal(position))
    def get_tree_path(self, tree_id):
        """L·∫•y ƒë∆∞·ªùng d·∫´n c√¢y th∆∞ m·ª•c v·ªõi x·ª≠ l√Ω an to√†n"""
        if not tree_id:
            return []

        path = []
        current_id = tree_id

        # ========== TRAVERSE TREE V·ªöI X·ª¨ L√ù AN TO√ÄN ========== #
        while current_id and len(path) < 10:  # Gi·ªõi h·∫°n ƒë·ªô s√¢u ƒë·ªÉ tr√°nh v√≤ng l·∫∑p v√¥ t·∫≠n
            try:
                row = self.db.execute_query(
                    "SELECT id, parent_id, name, level FROM exercise_tree WHERE id=?",
                    (current_id,), fetch="one"
                )

                if row:
                    row_dict = self.row_to_dict(row)
                    path.insert(0, row_dict)
                    current_id = self.safe_get(row_dict, "parent_id")
                else:
                    break

            except Exception as e:
                print(f"‚ö†Ô∏è L·ªói get_tree_path: {e}")
                break

        return path

    # ========== NH√ìM 5: L∆ØU/C·∫¨P NH·∫¨T/X√ìA C√ÇU H·ªéI ========== #
    def save_question(self):
        """L∆∞u c√¢u h·ªèi v·ªõi c·∫•u tr√∫c m·ªõi"""
        tree_id = self._current_tree_id()
        if not tree_id:
            QtWidgets.QMessageBox.warning(self, "Ch∆∞a ch·ªçn th∆∞ m·ª•c", "Vui l√≤ng ch·ªçn v·ªã tr√≠ l∆∞u trong c√¢y.")
            return

        content = self.content_text.toPlainText().strip()
        answer = self.answer_text.toPlainText().strip()

        if not content:
            QtWidgets.QMessageBox.warning(self, "L·ªói", "N·ªôi dung c√¢u h·ªèi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
            return

        try:
            # Chu·∫©n b·ªã d·ªØ li·ªáu c√¢u h·ªèi
            question_data = {
                'content_text': content,
                'content_type': getattr(self, 'content_type', 'text'),
                'answer_type': 'text',
                'correct_answer': answer,
                'tree_id': tree_id,
                'difficulty_level': getattr(self, 'current_difficulty', 'medium'),
                'question_type': 'knowledge',
                'status': 'active',
                'created_by': 'user'
            }

            if self.current_question_id:
                # C·∫≠p nh·∫≠t c√¢u h·ªèi hi·ªán c√≥
                success = self.db.update_question(
                    self.current_question_id,
                    question_data,
                    changed_fields=['content_text', 'correct_answer', 'tree_id']
                )

                if success:
                    QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ c·∫≠p nh·∫≠t c√¢u h·ªèi.")
                else:
                    QtWidgets.QMessageBox.critical(self, "L·ªói", "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t c√¢u h·ªèi.")
            else:
                # T·∫°o c√¢u h·ªèi m·ªõi
                new_id = self.db.create_question(question_data)

                if new_id:
                    self.current_question_id = new_id
                    QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ t·∫°o c√¢u h·ªèi m·ªõi.")
                else:
                    QtWidgets.QMessageBox.critical(self, "L·ªói", "Kh√¥ng th·ªÉ t·∫°o c√¢u h·ªèi.")

            # L∆∞u tags n·∫øu c√≥
            self._save_question_tags()

            # Refresh danh s√°ch
            self.on_tree_select()

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ l∆∞u: {e}")
    def delete_question(self):
        """X√≥a c√¢u h·ªèi"""
        if not self.current_question_id:
            QtWidgets.QMessageBox.warning(self, "Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn c√¢u h·ªèi ƒë·ªÉ x√≥a.")
            return

        if QtWidgets.QMessageBox.question(self, "X√°c nh·∫≠n",
                                          "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a c√¢u h·ªèi n√†y?") != QtWidgets.QMessageBox.Yes:
            return

        try:
            self.db.execute_query("DELETE FROM question_bank WHERE id=?", (self.current_question_id,))
            self.clear_question_form()

            tree_id = self._current_tree_id()
            if tree_id:
                rows = self.db.execute_query("SELECT * FROM question_bank WHERE tree_id=?", (tree_id,),
                                             fetch="all") or []
                self._load_question_rows(rows)

            QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ x√≥a c√¢u h·ªèi.")
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ x√≥a: {e}")

    def new_question(self):
        """T·∫°o c√¢u h·ªèi m·ªõi"""
        self.clear_question_form()
        self.content_text.setFocus()

    def clear_question_form(self):
        """X√≥a form"""
        self.current_question_id = None
        if hasattr(self, 'content_text'):
            self.content_text.clear()
        if hasattr(self, 'answer_text'):
            self.answer_text.clear()
        if hasattr(self, 'tags_edit'):
            self.tags_edit.clear()

    def _current_tree_id(self) -> int | None:
        """L·∫•y tree_id hi·ªán t·∫°i"""
        items = self.tree.selectedItems()
        if not items:
            return None
        return items[0].data(0, Qt.UserRole)

    def _save_question_tags(self):
        """L∆∞u tags cho c√¢u h·ªèi"""
        if not self.current_question_id or not hasattr(self, 'tags_edit'):
            return

        tags_text = self.tags_edit.text().strip()
        if not tags_text:
            return

        # X√≥a tags c≈©
        self.db.execute_query("DELETE FROM question_tags WHERE question_id=?", (self.current_question_id,))

        # Th√™m tags m·ªõi
        tag_names = [tag.strip() for tag in tags_text.split(',') if tag.strip()]
        for tag_name in tag_names:
            try:
                self.db.execute_query(
                    "INSERT INTO question_tags(question_id, tag_name) VALUES (?,?)",
                    (self.current_question_id, tag_name)
                )
            except:
                pass

    def _save_question_history(self, question_id, action_type, old_content, new_content):
        """L∆∞u l·ªãch s·ª≠ thay ƒë·ªïi"""
        try:
            self.db.execute_query(
                "INSERT INTO question_history(question_id, action_type, old_content, new_content) VALUES (?,?,?,?)",
                (question_id, action_type, old_content, new_content)
            )
        except:
            pass

    def _load_question_history(self, question_id):
        """Load l·ªãch s·ª≠ thay ƒë·ªïi"""
        if not hasattr(self, 'history_table'):
            return

        history = self.db.execute_query(
            "SELECT * FROM question_history WHERE question_id=? ORDER BY changed_date DESC LIMIT 50",
            (question_id,), fetch="all"
        ) or []

        self.history_table.setRowCount(0)

        for h in history:
            row_idx = self.history_table.rowCount()
            self.history_table.insertRow(row_idx)

            time_str = h.get("changed_date", "")

            self.history_table.setItem(row_idx, 0, QtWidgets.QTableWidgetItem(time_str))
            self.history_table.setItem(row_idx, 1, QtWidgets.QTableWidgetItem(h.get("action_type", "")))

            old_content = (h.get("old_content", "") or "")[:100]
            new_content = (h.get("new_content", "") or "")[:100]

            self.history_table.setItem(row_idx, 2, QtWidgets.QTableWidgetItem(old_content))
            self.history_table.setItem(row_idx, 3, QtWidgets.QTableWidgetItem(new_content))

    # CH·ªânh s·ª≠a ca
    def edit_current_question(self):
        """M·ªü dialog edit c√¢u h·ªèi hi·ªán t·∫°i"""
        if not self.current_question_id:
            QtWidgets.QMessageBox.warning(self, "Ch∆∞a ch·ªçn c√¢u h·ªèi",
                                          "Vui l√≤ng ch·ªçn c√¢u h·ªèi ƒë·ªÉ ch·ªânh s·ª≠a")
            return

        tree_id = self._current_tree_id()
        dialog = QuestionEditDialog(self.db, tree_id=tree_id,
                                    question_id=self.current_question_id, parent=self)
        if dialog.exec() == QtWidgets.QDialog.Accepted:
            self.on_tree_select()
    # ========== NH√ìM 6: T√åM KI·∫æM V√Ä L·ªåC ========== #
    def search_questions(self):
        """T√¨m ki·∫øm c√¢u h·ªèi"""
        keyword = (self.search_edit.text() or "").strip().lower()
        if not keyword:
            self.on_tree_select()
            return

        items = self.tree.selectedItems()
        if not items:
            QtWidgets.QMessageBox.warning(self, "Ch∆∞a ch·ªçn", "H√£y ch·ªçn th∆∞ m·ª•c ƒë·ªÉ t√¨m.")
            return

        root_id = items[0].data(0, Qt.UserRole)
        all_ids = self.get_all_subtree_ids(root_id)
        if not all_ids:
            return

        placeholders = ",".join(["?"] * len(all_ids))
        query = f"SELECT * FROM question_bank WHERE tree_id IN ({placeholders})"
        rows = self.db.execute_query(query, tuple(all_ids), fetch="all") or []

        # Filter theo keyword
        rows = [r for r in rows if keyword in (r.get("content_text", "") or "").lower()]
        self._load_question_rows(rows)

    def get_all_subtree_ids(self, root_id: int) -> List[int]:
        """L·∫•y t·∫•t c·∫£ ID con"""
        ids = [root_id]
        children = self.db.execute_query("SELECT id FROM exercise_tree WHERE parent_id=?", (root_id,),
                                         fetch="all") or []
        for c in children:
            ids.extend(self.get_all_subtree_ids(c["id"]))
        return ids

    def focus_search(self):
        """Focus v√†o √¥ t√¨m ki·∫øm"""
        self.search_edit.setFocus()
        self.search_edit.selectAll()

    def filter_by_combobox(self):
        """L·ªçc theo combobox"""
        # Simplified filtering logic
        self.on_tree_select()

    def clear_filters(self):
        """X√≥a b·ªô l·ªçc"""
        self.subject_cb.setCurrentIndex(0)
        self.grade_cb.setCurrentIndex(0)
        self.topic_cb.setCurrentIndex(0)
        self.type_cb.setCurrentIndex(0)
        self.level_cb.setCurrentIndex(0)
        self.on_tree_select()

    # ========== NH√ìM 7: LOAD D·ªÆ LI·ªÜU COMBOBOX ========== #
    def load_available_subjects(self):
        """Load danh s√°ch m√¥n"""
        rows = self.db.execute_query(
            "SELECT DISTINCT name FROM exercise_tree WHERE level='M√¥n' ORDER BY name ASC",
            fetch="all"
        ) or []
        self.subject_cb.clear()
        self.subject_cb.addItem("")
        for r in rows:
            self.subject_cb.addItem(r["name"])

    def load_available_grades(self):
        """Load danh s√°ch l·ªõp"""
        rows = self.db.execute_query(
            "SELECT DISTINCT name FROM exercise_tree WHERE level='L·ªõp' ORDER BY name ASC",
            fetch="all"
        ) or []
        self.grade_cb.clear()
        self.grade_cb.addItem("")
        for r in rows:
            self.grade_cb.addItem(r["name"])

    def load_available_topics(self):
        """Load danh s√°ch ch·ªß ƒë·ªÅ"""
        subject = self.subject_cb.currentText().strip()
        grade = self.grade_cb.currentText().strip()

        if not subject or not grade:
            self.topic_cb.clear()
            self.type_cb.clear()
            return

        rows = self.db.execute_query("""
            SELECT name FROM exercise_tree 
            WHERE level='Ch·ªß ƒë·ªÅ' AND parent_id IN (
                SELECT id FROM exercise_tree 
                WHERE name=? AND level='L·ªõp' AND parent_id IN (
                    SELECT id FROM exercise_tree WHERE name=? AND level='M√¥n'
                )
            )
        """, (grade, subject), fetch="all") or []

        self.topic_cb.clear()
        self.topic_cb.addItem("")
        for r in rows:
            self.topic_cb.addItem(r["name"])

    def load_available_types(self):
        """Load danh s√°ch d·∫°ng"""
        topic = self.topic_cb.currentText().strip()
        if not topic:
            self.type_cb.clear()
            return

        rows = self.db.execute_query("""
            SELECT name FROM exercise_tree
            WHERE level='D·∫°ng' AND parent_id IN (
                SELECT id FROM exercise_tree WHERE level='Ch·ªß ƒë·ªÅ' AND name=?
            )
        """, (topic,), fetch="all") or []

        self.type_cb.clear()
        self.type_cb.addItem("")
        for r in rows:
            self.type_cb.addItem(r["name"])

    # ========== NH√ìM 8: IMPORT/EXPORT ========== #
    def import_from_word(self):
        """Import t·ª´ Word"""
        try:
            from docx import Document
        except ImportError:
            QtWidgets.QMessageBox.critical(self, "L·ªói", "C·∫ßn c√†i ƒë·∫∑t python-docx: pip install python-docx")
            return

        file_path, _ = QtWidgets.QFileDialog.getOpenFileName(
            self, "Ch·ªçn file Word", "", "Word files (*.docx)")
        if not file_path:
            return

        tree_id = self._current_tree_id()
        if not tree_id:
            QtWidgets.QMessageBox.warning(self, "Thi·∫øu th∆∞ m·ª•c", "Vui l√≤ng ch·ªçn n∆°i l∆∞u c√¢u h·ªèi.")
            return

        try:
            doc = Document(file_path)
            count = 0

            for para in doc.paragraphs:
                text = para.text.strip()
                if text:
                    # Simple import - just save as content
                    self.db.execute_query(
                        "INSERT INTO question_bank(content_text, tree_id) VALUES (?,?)",
                        (text, tree_id)
                    )
                    count += 1

            # Reload
            rows = self.db.execute_query("SELECT * FROM question_bank WHERE tree_id=?", (tree_id,), fetch="all") or []
            self._load_question_rows(rows)

            QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ import {count} c√¢u h·ªèi.")

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ import: {e}")

    def export_to_word(self):
        """Export ra Word"""
        tree_id = self._current_tree_id()
        if not tree_id:
            QtWidgets.QMessageBox.warning(self, "Ch∆∞a ch·ªçn th∆∞ m·ª•c", "Vui l√≤ng ch·ªçn th∆∞ m·ª•c ƒë·ªÉ xu·∫•t.")
            return

        file_path, _ = QtWidgets.QFileDialog.getSaveFileName(self, "L∆∞u file Word", "", "Word files (*.docx)")
        if not file_path:
            return

        try:
            from docx import Document

            doc = Document()
            doc.add_heading('NG√ÇN H√ÄNG C√ÇU H·ªéI', 0)

            # Th√¥ng tin ƒë∆∞·ªùng d·∫´n
            path_info = self.get_tree_path(tree_id)
            if path_info:
                path_text = " > ".join([p["name"] for p in path_info])
                doc.add_paragraph(f"ƒê∆∞·ªùng d·∫´n: {path_text}")

            # L·∫•y c√¢u h·ªèi
            rows = self.db.execute_query("SELECT * FROM question_bank WHERE tree_id=?", (tree_id,), fetch="all") or []

            for i, row in enumerate(rows, 1):
                doc.add_paragraph(f"C√¢u {i}: {row.get('content_text', '')}", style='Heading 3')

                if row.get('correct'):
                    doc.add_paragraph(f"ƒê√°p √°n: {row['correct']}")

                doc.add_paragraph("")  # D√≤ng tr·ªëng

            doc.save(file_path)
            QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ xu·∫•t {len(rows)} c√¢u h·ªèi ra file Word.")

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ xu·∫•t file: {e}")

    def export_to_pdf(self):
        """Export ra PDF"""
        tree_id = self._current_tree_id()
        if not tree_id:
            QtWidgets.QMessageBox.warning(self, "Ch∆∞a ch·ªçn th∆∞ m·ª•c", "Vui l√≤ng ch·ªçn th∆∞ m·ª•c ƒë·ªÉ xu·∫•t.")
            return

        file_path, _ = QtWidgets.QFileDialog.getSaveFileName(self, "L∆∞u file PDF", "", "PDF files (*.pdf)")
        if not file_path:
            return

        try:
            from reportlab.lib.pagesizes import A4
            from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
            from reportlab.lib.styles import getSampleStyleSheet
            from reportlab.lib.units import inch

            doc = SimpleDocTemplate(file_path, pagesize=A4)
            styles = getSampleStyleSheet()
            story = []

            # Ti√™u ƒë·ªÅ
            title = Paragraph("NG√ÇN H√ÄNG C√ÇU H·ªéI", styles['Title'])
            story.append(title)
            story.append(Spacer(1, 0.2 * inch))

            # L·∫•y c√¢u h·ªèi
            rows = self.db.execute_query("SELECT * FROM question_bank WHERE tree_id=?", (tree_id,), fetch="all") or []

            for i, row in enumerate(rows, 1):
                question_para = Paragraph(f"<b>C√¢u {i}:</b> {row.get('content_text', '')}", styles['Normal'])
                story.append(question_para)

                if row.get('correct'):
                    answer_para = Paragraph(f"<b>ƒê√°p √°n:</b> {row['correct']}", styles['Normal'])
                    story.append(answer_para)

                story.append(Spacer(1, 0.2 * inch))

            doc.build(story)
            QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ xu·∫•t {len(rows)} c√¢u h·ªèi ra file PDF.")

        except ImportError:
            QtWidgets.QMessageBox.critical(self, "L·ªói", "C·∫ßn c√†i ƒë·∫∑t reportlab: pip install reportlab")
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ xu·∫•t PDF: {e}")

    # ========== NH√ìM 9: TEMPLATE ========== #
    def show_template_dialog(self):
        """Hi·ªÉn th·ªã dialog template"""
        QtWidgets.QMessageBox.information(self, "Th√¥ng tin", "Ch·ª©c nƒÉng template ƒëang ph√°t tri·ªÉn.")

    # ========== NH√ìM 10: TAGS ========== #
    def add_new_tag(self):
        """Th√™m tag m·ªõi"""
        if not hasattr(self, 'tags_edit') or not self.current_question_id:
            return

        tags_text = self.tags_edit.text().strip()
        if not tags_text:
            return

        tag_names = [tag.strip() for tag in tags_text.split(',') if tag.strip()]

        added_count = 0
        for tag_name in tag_names:
            try:
                self.db.execute_query(
                    "INSERT INTO question_tags(question_id, tag_name) VALUES (?,?)",
                    (self.current_question_id, tag_name)
                )
                added_count += 1
            except:
                pass

        if added_count > 0:
            self.tags_edit.clear()
            tree_id = self._current_tree_id()
            if tree_id:
                rows = self.db.execute_query("SELECT * FROM question_bank WHERE tree_id=?", (tree_id,),
                                             fetch="all") or []
                self._load_question_rows(rows)

    # ========== NH√ìM 11: PREVIEW V√Ä TH·ªêNG K√ä ========== #
    def update_preview(self):
        """C·∫≠p nh·∫≠t preview"""
        if not hasattr(self, 'preview_widget'):
            return

        content = self.content_text.toPlainText() if hasattr(self, 'content_text') else ""
        answer = self.answer_text.toPlainText() if hasattr(self, 'answer_text') else ""

        html = f"""
        <div style="font-family: Arial, sans-serif;">
            <h3 style="color: #2c3e50;">üìù C√¢u h·ªèi</h3>
            <p style="background: #f8f9fa; padding: 15px; border-left: 4px solid #007bff;">
                {content or '<em>Ch∆∞a c√≥ n·ªôi dung...</em>'}
            </p>
            <h4 style="color: #2c3e50;">‚úÖ ƒê√°p √°n</h4>
            <p style="background: #e8f5e9; padding: 15px;">
                {answer or '<em>Ch∆∞a c√≥ ƒë√°p √°n...</em>'}
            </p>
        </div>
        """
        self.preview_widget.setHtml(html)

    def update_statistics(self):
        """C·∫≠p nh·∫≠t th·ªëng k√™"""
        if not hasattr(self, 'stats_widget'):
            return

        try:
            # T·ªïng s·ªë c√¢u h·ªèi
            total = self.db.execute_query("SELECT COUNT(*) as count FROM question_bank", fetch="one")["count"]

            # Th·ªëng k√™ theo m·ª©c ƒë·ªô
            level_stats = self.db.execute_query("""
                SELECT e.name, COUNT(q.id) as count 
                FROM question_bank q 
                JOIN exercise_tree e ON e.id = q.tree_id 
                WHERE e.level = 'M·ª©c ƒë·ªô'
                GROUP BY e.name
                ORDER BY count DESC
            """, fetch="all") or []

            # T·∫°o HTML th·ªëng k√™
            stats_html = f"""
            <div style="font-family: Arial, sans-serif;">
                <h2 style="color: #2c3e50;">üìä Th·ªëng k√™</h2>
                <p><strong>T·ªïng s·ªë c√¢u h·ªèi:</strong> {total}</p>

                <h3>Ph√¢n b·ªë theo m·ª©c ƒë·ªô:</h3>
                <ul>
            """

            for stat in level_stats:
                percentage = (stat["count"] / total * 100) if total > 0 else 0
                stats_html += f"<li>{stat['name']}: {stat['count']} ({percentage:.1f}%)</li>"

            stats_html += "</ul></div>"

            self.stats_widget.setHtml(stats_html)

        except Exception as e:
            self.stats_widget.setHtml(f"<p style='color: red;'>L·ªói: {e}</p>")

    def refresh_all(self):
        """L√†m m·ªõi to√†n b·ªô"""
        self.refresh_tree()
        self.load_available_subjects()
        self.load_available_grades()
        self.on_tree_select()
        self.update_statistics()

    # ========== NH√ìM HELPER CHO T√çNH NƒÇNG M·ªöI ========== #

    def view_question_detail(self):
        """Xem chi ti·∫øt c√¢u h·ªèi trong dialog ri√™ng"""
        if not self.current_question_id:
            return

        dialog = QuestionDetailDialog(self.db, self.current_question_id, parent=self)
        dialog.exec()

    def move_question_to_folder(self):
        """Di chuy·ªÉn c√¢u h·ªèi ƒë·∫øn th∆∞ m·ª•c kh√°c"""
        if not self.current_question_id:
            return

        # T·∫°o dialog ch·ªçn th∆∞ m·ª•c ƒë√≠ch
        dialog = FolderSelectDialog(self.db, parent=self)
        if dialog.exec() == QtWidgets.QDialog.Accepted:
            target_tree_id = dialog.selected_tree_id
            if target_tree_id:
                try:
                    self.db.execute_query(
                        "UPDATE question_bank SET tree_id=?, modified_date=CURRENT_TIMESTAMP WHERE id=?",
                        (target_tree_id, self.current_question_id)
                    )
                    QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ di chuy·ªÉn c√¢u h·ªèi.")
                    self.on_tree_select()  # Refresh danh s√°ch
                except Exception as e:
                    QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ di chuy·ªÉn: {e}")

    def manage_question_tags(self):
        """Qu·∫£n l√Ω tags c·ªßa c√¢u h·ªèi"""
        if not self.current_question_id:
            return

        dialog = TagsManagerDialog(self.db, self.current_question_id, parent=self)
        if dialog.exec() == QtWidgets.QDialog.Accepted:
            self.on_tree_select()  # Refresh ƒë·ªÉ c·∫≠p nh·∫≠t tags

    def copy_question(self):
        """Sao ch√©p c√¢u h·ªèi"""
        if not self.current_question_id:
            return

        # L·∫•y d·ªØ li·ªáu c√¢u h·ªèi
        q = self.db.execute_query("SELECT * FROM question_bank WHERE id=?", (self.current_question_id,), fetch="one")
        if not q:
            return

        # Copy v√†o clipboard (ƒë·ªãnh d·∫°ng JSON)
        import json
        question_data = {
            "content_text": self.safe_get("content_text", ""),
            "options": self.safe_get("options", ""),
            "correct": self.safe_get("correct", ""),
            "content_type": self.safe_get("content_type", "text"),
            "difficulty_level": self.safe_get("difficulty_level", "")
        }

        from PySide6.QtGui import QClipboard
        clipboard = QtWidgets.QApplication.clipboard()
        clipboard.setText(json.dumps(question_data, ensure_ascii=False, indent=2))

        QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ sao ch√©p c√¢u h·ªèi v√†o clipboard.")

    def open_fullscreen_preview(self):
        """M·ªü ·∫£nh preview fullscreen"""
        # #(Ph∆∞∆°ng th·ª©c xem ·∫£nh preview ·ªü ch·∫ø ƒë·ªô to√†n m√†n h√¨nh)
        if (hasattr(self, 'preview_image') and
                hasattr(self.preview_image, 'current_pixmap') and
                self.preview_image.current_pixmap):
            dialog = ImageViewerDialog(self.preview_image.current_pixmap, self)
            dialog.exec()

    def setup_preview_interactions(self):
        """Thi·∫øt l·∫≠p t∆∞∆°ng t√°c cho preview"""
        # Double-click ƒë·ªÉ xem fullscreen
        if hasattr(self, 'preview_image'):
            self.preview_image.mouseDoubleClickEvent = lambda event: self.open_fullscreen_preview()

            # Right-click menu
            self.preview_image.setContextMenuPolicy(Qt.CustomContextMenu)
            self.preview_image.customContextMenuRequested.connect(self.show_preview_context_menu)

    def show_preview_context_menu(self, position):
        """Context menu cho ·∫£nh preview"""
        # #(Menu chu·ªôt ph·∫£i cho preview)
        menu = QtWidgets.QMenu(self)

        fullscreen_action = menu.addAction("üîç Xem fullscreen")
        fullscreen_action.triggered.connect(self.open_fullscreen_preview)

        zoom_in_action = menu.addAction("üîç+ Ph√≥ng to")
        zoom_in_action.triggered.connect(lambda: self.preview_image._zoom_in())

        zoom_out_action = menu.addAction("üîç- Thu nh·ªè")
        zoom_out_action.triggered.connect(lambda: self.preview_image._zoom_out())

        menu.exec(self.preview_image.mapToGlobal(position))
    # ========== X·ª¨ L√ù ·∫¢NH TRONG PREVIEW ========== #
    def load_image_from_data(self, content_data, content_metadata=None):
        """Load ·∫£nh t·ª´ content_data v·ªõi nhi·ªÅu format"""
        if not content_data:
            return None

        try:
            pixmap = None

            # N·∫øu l√† bytes/BLOB data
            if isinstance(content_data, (bytes, bytearray)):
                # Th·ª≠ load tr·ª±c ti·∫øp t·ª´ bytes
                pixmap = QtGui.QPixmap()
                if pixmap.loadFromData(content_data):
                    return pixmap

                # Th·ª≠ decode base64
                try:
                    import base64
                    decoded_data = base64.b64decode(content_data)
                    pixmap = QtGui.QPixmap()
                    if pixmap.loadFromData(decoded_data):
                        return pixmap
                except:
                    pass

            # N·∫øu l√† string (c√≥ th·ªÉ l√† base64 ho·∫∑c file path)
            elif isinstance(content_data, str):
                # Th·ª≠ nh∆∞ file path
                if os.path.exists(content_data):
                    pixmap = QtGui.QPixmap(content_data)
                    if not pixmap.isNull():
                        return pixmap

                # Th·ª≠ decode base64
                try:
                    import base64
                    if content_data.startswith('data:image'):
                        # Data URL format
                        header, data = content_data.split(',', 1)
                        decoded_data = base64.b64decode(data)
                    else:
                        # Pure base64
                        decoded_data = base64.b64decode(content_data)

                    pixmap = QtGui.QPixmap()
                    if pixmap.loadFromData(decoded_data):
                        return pixmap
                except:
                    pass

            return None

        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói load image: {e}")
            return None

    def display_image_preview(self, pixmap):
        """Hi·ªÉn th·ªã th√¥ng tin ·∫£nh ƒë∆°n gi·∫£n - kh√¥ng render ·∫£nh th·ª±c t·∫ø"""
        try:
            if pixmap and not pixmap.isNull():
                image_info = (
                    f"üñºÔ∏è [C√¢u h·ªèi c√≥ h√¨nh ·∫£nh]\n\n"
                    f"üìè K√≠ch th∆∞·ªõc: {pixmap.width()}x{pixmap.height()}\n"
                    f"üé® Format: {pixmap.hasAlpha()}"
                )
                self.show_text_preview(image_info)
            else:
                self.show_text_preview("‚ùå Kh√¥ng th·ªÉ load ·∫£nh")
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói display image: {e}")
            self.show_text_preview("üñºÔ∏è [C√¢u h·ªèi c√≥ h√¨nh ·∫£nh]")
    def show_text_preview(self, text):
        """Hi·ªÉn th·ªã text preview ƒë∆°n gi·∫£n - kh√¥ng d√πng widget ph·ª©c t·∫°p"""
        try:
            if hasattr(self, 'preview_content'):
                self.preview_content.setText(str(text))
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói show_text_preview: {e}")
    # ========== VALIDATION HELPER ========== #
    def validate_question_data(self, question_data):
        """Validate d·ªØ li·ªáu c√¢u h·ªèi tr∆∞·ªõc khi x·ª≠ l√Ω"""
        if not question_data:
            return False, "D·ªØ li·ªáu c√¢u h·ªèi tr·ªëng"

        required_fields = ["content_text", "tree_id"]
        for field in required_fields:
            if not self.safe_get(question_data, field):
                return False, f"Thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc: {field}"

        return True, ""

    # ========== HELPER KI·ªÇM TRA WIDGET H·ª¢P L·ªÜ ========== #
    # ========== WRAPPER AN TO√ÄN CHO TRUY V·∫§N DATABASE ========== #
    def safe_db_query(self, query, params=(), fetch=None):
        """Wrapper an to√†n cho database query"""
        try:
            result = self.db.execute_query(query, params, fetch)

            # Chuy·ªÉn ƒë·ªïi k·∫øt qu·∫£ n·∫øu c·∫ßn
            if fetch == "one" and result:
                return self.row_to_dict(result)
            elif fetch == "all" and result:
                return [self.row_to_dict(row) for row in result]

            return result
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói database query: {e}")
            return None if fetch == "one" else []
class ImageViewer(QtWidgets.QWidget):
    """Widget hi·ªÉn th·ªã v√† x·ª≠ l√Ω ·∫£nh"""

    def __init__(self):
        super().__init__()
        layout = QtWidgets.QVBoxLayout(self)

        # Scroll area ƒë·ªÉ hi·ªÉn th·ªã ·∫£nh l·ªõn
        scroll = QtWidgets.QScrollArea()
        self.image_label = QtWidgets.QLabel()
        self.image_label.setAlignment(Qt.AlignCenter)
        self.image_label.setScaledContents(False)  # Gi·ªØ t·ª∑ l·ªá ·∫£nh
        scroll.setWidget(self.image_label)
        scroll.setWidgetResizable(True)
        layout.addWidget(scroll)

        # Toolbar zoom
        toolbar = QtWidgets.QToolBar()
        toolbar.addAction("üîç+").triggered.connect(lambda: self.zoom(1.2))
        toolbar.addAction("üîç-").triggered.connect(lambda: self.zoom(0.8))
        toolbar.addAction("üíØ").triggered.connect(self.fit_to_window)
        toolbar.addAction("üìã Paste").triggered.connect(self.paste_image)
        layout.addWidget(toolbar)

        self.current_pixmap = None
        self.scale_factor = 1.0

        # Enable drop
        self.setAcceptDrops(True)

    def set_image(self, image):
        """Set QImage t·ª´ clipboard"""
        if isinstance(image, QtGui.QImage):
            self.current_pixmap = QtGui.QPixmap.fromImage(image)
            self.display_image()
            return True
        return False

    def set_pixmap(self, pixmap):
        """Set QPixmap"""
        if isinstance(pixmap, QtGui.QPixmap):
            self.current_pixmap = pixmap
            self.display_image()
            return True
        return False

    def display_image(self):
        if self.current_pixmap and not self.current_pixmap.isNull():
            # Scale ·∫£nh nh∆∞ng gi·ªØ t·ª∑ l·ªá
            scaled = self.current_pixmap.scaled(
                self.current_pixmap.size() * self.scale_factor,
                Qt.KeepAspectRatio,
                Qt.SmoothTransformation
            )
            self.image_label.setPixmap(scaled)

    def paste_image(self):
        """Paste ·∫£nh tr·ª±c ti·∫øp trong viewer"""
        clipboard = QtWidgets.QApplication.clipboard()
        mime_data = clipboard.mimeData()

        if mime_data.hasImage():
            image = clipboard.image()
            if not image.isNull():
                self.set_image(image)
                print("‚úÖ ƒê√£ paste ·∫£nh v√†o viewer")
        else:
            print("‚ùå Kh√¥ng c√≥ ·∫£nh trong clipboard")

    def dragEnterEvent(self, event):
        """X·ª≠ l√Ω k√©o th·∫£ file"""
        if event.mimeData().hasImage() or event.mimeData().hasUrls():
            event.acceptProposedAction()

    def dropEvent(self, event):
        """X·ª≠ l√Ω th·∫£ file"""
        mime_data = event.mimeData()

        if mime_data.hasImage():
            self.set_image(mime_data.imageData())
        elif mime_data.hasUrls():
            for url in mime_data.urls():
                file_path = url.toLocalFile()
                if file_path.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp')):
                    pixmap = QtGui.QPixmap(file_path)
                    if not pixmap.isNull():
                        self.set_pixmap(pixmap)
                        break

    # Th√™m v√†o class ImageViewer hi·ªán t·∫°i c·ªßa b·∫°n:

    def fit_to_window(self):
        """Reset zoom v·ªÅ 100%"""
        self.scale_factor = 1.0
        self.display_image()

    def zoom(self, factor):
        """Zoom ·∫£nh"""
        if not self.current_pixmap:
            return

        self.scale_factor *= factor
        # Gi·ªõi h·∫°n zoom t·ª´ 10% ƒë·∫øn 500%
        self.scale_factor = max(0.1, min(5.0, self.scale_factor))
        self.display_image()

    def paste_image(self):
        """Paste ·∫£nh t·ª´ clipboard"""
        clipboard = QtWidgets.QApplication.clipboard()
        if clipboard.mimeData().hasImage():
            image = clipboard.image()
            if not image.isNull():
                self.set_image(image)

    def clear_image(self):
        """X√≥a ·∫£nh"""
        self.current_pixmap = None
        self.image_label.clear()
class PDFViewer(QtWidgets.QWidget):
    """Widget hi·ªÉn th·ªã PDF (placeholder - c·∫ßn th√™m th∆∞ vi·ªán PDF)"""

    def __init__(self):
        super().__init__()
        layout = QtWidgets.QVBoxLayout(self)

        self.info_label = QtWidgets.QLabel("üìÑ PDF Viewer")
        self.info_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(self.info_label)

        # Toolbar cho PDF
        toolbar = QtWidgets.QToolBar()
        self.page_spin = QtWidgets.QSpinBox()
        self.page_spin.setMinimum(1)
        toolbar.addWidget(QtWidgets.QLabel("Trang:"))
        toolbar.addWidget(self.page_spin)
        toolbar.addAction("‚¨ÖÔ∏è").triggered.connect(self.prev_page)
        toolbar.addAction("‚û°Ô∏è").triggered.connect(self.next_page)
        layout.addWidget(toolbar)

        self.pdf_path = None
        self.current_page = 1
        self.total_pages = 1

    def load_pdf(self, file_path):
        """Load PDF file"""
        self.pdf_path = file_path
        self.info_label.setText(f"üìÑ {os.path.basename(file_path)}")
        # TODO: Implement PDF rendering v·ªõi PyMuPDF ho·∫∑c pdf2image

    def prev_page(self):
        if self.current_page > 1:
            self.current_page -= 1
            self.page_spin.setValue(self.current_page)

    def next_page(self):
        if self.current_page < self.total_pages:
            self.current_page += 1
            self.page_spin.setValue(self.current_page)
class LaTeXInputDialog(QtWidgets.QDialog):
    """Dialog nh·∫≠p c√¥ng th·ª©c LaTeX"""

    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("‚àë Nh·∫≠p c√¥ng th·ª©c LaTeX")
        self.resize(500, 300)

        layout = QtWidgets.QVBoxLayout(self)

        layout.addWidget(QtWidgets.QLabel("Nh·∫≠p c√¥ng th·ª©c LaTeX:"))

        self.latex_edit = QtWidgets.QTextEdit()
        self.latex_edit.setPlaceholderText(r"\frac{a}{b} ho·∫∑c \int_{0}^{1} x^2 dx")
        layout.addWidget(self.latex_edit)

        # Preview (n·∫øu c√≥ th∆∞ vi·ªán render LaTeX)
        self.preview_label = QtWidgets.QLabel("Preview s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y")
        self.preview_label.setAlignment(Qt.AlignCenter)
        self.preview_label.setStyleSheet("border: 1px solid #ccc; padding: 10px;")
        layout.addWidget(self.preview_label)

        # Buttons
        button_layout = QtWidgets.QHBoxLayout()
        ok_btn = QtWidgets.QPushButton("OK")
        ok_btn.clicked.connect(self.accept)
        cancel_btn = QtWidgets.QPushButton("H·ªßy")
        cancel_btn.clicked.connect(self.reject)
        button_layout.addWidget(cancel_btn)
        button_layout.addWidget(ok_btn)
        layout.addLayout(button_layout)

    def get_latex(self):
        return self.latex_edit.toPlainText()
class QuestionEditDialog(QtWidgets.QDialog):
    def __init__(self, db_manager, tree_id=None, question_id=None, parent=None):
        super().__init__(parent)
        self.setModal(False)
        self.db = db_manager
        self.tree_id = tree_id
        self.question_id = question_id
        self.content_type = "text"
        self.answer_type = "text"
        self.content_data = None
        self.answer_data = None

        self.setup_ui()
        if question_id:
            self.load_question_data()
        self.setWindowState(Qt.WindowMaximized)
    def setup_ui(self):
        self.setWindowTitle("‚ûï Th√™m c√¢u h·ªèi m·ªõi" if not self.question_id else "‚úèÔ∏è Ch·ªânh s·ª≠a c√¢u h·ªèi")
        self.setWindowFlags(
            Qt.Window | Qt.WindowMinimizeButtonHint | Qt.WindowMaximizeButtonHint | Qt.WindowCloseButtonHint)
        layout = QtWidgets.QVBoxLayout(self)

        # Toolbar cho ch·ªçn lo·∫°i n·ªôi dung
        toolbar = QtWidgets.QToolBar()
        toolbar.setToolButtonStyle(Qt.ToolButtonTextBesideIcon)

        # Nh√≥m n√∫t cho C√¢u h·ªèi
        toolbar.addWidget(QtWidgets.QLabel("üìù Th√™m c√¢u h·ªèi:"))

        text_action = toolbar.addAction("üìù VƒÉn b·∫£n")
        text_action.triggered.connect(lambda: self.add_content("text"))

        image_action = toolbar.addAction("üñºÔ∏è ·∫¢nh")
        image_action.triggered.connect(lambda: self.add_content("image"))

        pdf_action = toolbar.addAction("üìÑ PDF")
        pdf_action.triggered.connect(lambda: self.add_content("pdf"))

        word_action = toolbar.addAction("üìò Word")
        word_action.triggered.connect(lambda: self.add_content("word"))

        toolbar.addSeparator()

        latex_action = toolbar.addAction("‚àë LaTeX")
        latex_action.triggered.connect(self.insert_latex)

        layout.addWidget(toolbar)

        # Splitter cho c√¢u h·ªèi v√† ƒë√°p √°n
        splitter = QtWidgets.QSplitter(Qt.Vertical)

        # Ph·∫ßn 1: C√¢u h·ªèi
        question_group = QtWidgets.QGroupBox("üìã N·ªòI DUNG C√ÇU H·ªéI")
        question_layout = QtWidgets.QVBoxLayout(question_group)

        # Widget hi·ªÉn th·ªã n·ªôi dung (c√≥ th·ªÉ l√† text, image, pdf viewer)
        self.content_widget = QtWidgets.QStackedWidget()

        # Text editor cho vƒÉn b·∫£n
        self.text_editor = QtWidgets.QTextEdit()
        self.text_editor.installEventFilter(self)
        self.text_editor.setAcceptRichText(True)
        self.text_editor.setPlaceholderText("Nh·∫≠p n·ªôi dung c√¢u h·ªèi ho·∫∑c d√°n ·∫£nh (Ctrl+V)...")
        self.content_widget.addWidget(self.text_editor)

        # Image viewer
        self.image_viewer = ImageViewer()
        self.content_widget.addWidget(self.image_viewer)

        # PDF viewer
        self.pdf_viewer = PDFViewer()
        self.content_widget.addWidget(self.pdf_viewer)

        question_layout.addWidget(self.content_widget)
        splitter.addWidget(question_group)

        # Ph·∫ßn 2: ƒê√°p √°n (c√≥ th·ªÉ ·∫©n/hi·ªán)
        self.answer_group = QtWidgets.QGroupBox("‚úÖ ƒê√ÅP √ÅN")
        self.answer_group.setCheckable(True)
        self.answer_group.setChecked(True)
        answer_layout = QtWidgets.QVBoxLayout(self.answer_group)

        # Toolbar cho ƒë√°p √°n
        answer_toolbar = QtWidgets.QToolBar()
        answer_toolbar.setToolButtonStyle(Qt.ToolButtonTextBesideIcon)

        # Nh√≥m n√∫t cho ƒê√°p √°n
        answer_toolbar.addWidget(QtWidgets.QLabel("üìù Th√™m ƒë√°p √°n:"))

        ans_text_action = answer_toolbar.addAction("üìù VƒÉn b·∫£n")
        ans_text_action.triggered.connect(lambda: self.add_answer("text"))

        ans_image_action = answer_toolbar.addAction("üñºÔ∏è ·∫¢nh")
        ans_image_action.triggered.connect(lambda: self.add_answer("image"))

        ans_pdf_action = answer_toolbar.addAction("üìÑ PDF")
        ans_pdf_action.triggered.connect(lambda: self.add_answer("pdf"))

        ans_word_action = answer_toolbar.addAction("üìò Word")
        ans_word_action.triggered.connect(lambda: self.add_answer("word"))

        answer_toolbar.addSeparator()

        ans_latex_action = answer_toolbar.addAction("‚àë LaTeX")
        ans_latex_action.triggered.connect(self.insert_answer_latex)

        answer_layout.addWidget(answer_toolbar)

        # Widget hi·ªÉn th·ªã ƒë√°p √°n
        self.answer_widget = QtWidgets.QStackedWidget()

        # Text editor cho ƒë√°p √°n vƒÉn b·∫£n (v·ªõi EventFilter)
        self.answer_text_editor = QtWidgets.QTextEdit()
        self.answer_text_editor.installEventFilter(self)  # H·ªó tr·ª£ paste ·∫£nh
        self.answer_text_editor.setAcceptRichText(True)
        self.answer_text_editor.setPlaceholderText("Nh·∫≠p ƒë√°p √°n ho·∫∑c d√°n ·∫£nh (Ctrl+V)...")
        self.answer_text_editor.setMaximumHeight(150)  # Gi·ªØ gi·ªõi h·∫°n chi·ªÅu cao
        self.answer_widget.addWidget(self.answer_text_editor)

        # Image viewer cho ƒë√°p √°n ·∫£nh
        self.answer_image_viewer = ImageViewer()
        self.answer_widget.addWidget(self.answer_image_viewer)

        # PDF viewer cho ƒë√°p √°n PDF
        self.answer_pdf_viewer = PDFViewer()
        self.answer_widget.addWidget(self.answer_pdf_viewer)

        answer_layout.addWidget(self.answer_widget)
        splitter.addWidget(self.answer_group)

        layout.addWidget(splitter)

        # Ph·∫ßn 3: Tags
        meta_group = QtWidgets.QGroupBox("üìä M·ª©c ƒë·ªô")
        meta_layout = QtWidgets.QFormLayout(meta_group)
        self.difficulty_combo = QtWidgets.QComboBox()
        self.difficulty_combo.addItems(["D·ªÖ", "Trung b√¨nh", "Kh√≥"])
        meta_layout.addRow("ƒê·ªô kh√≥:", self.difficulty_combo)

        tags_group = QtWidgets.QGroupBox("üè∑Ô∏è TAGS")
        tags_layout = QtWidgets.QHBoxLayout(tags_group)
        layout.addWidget(meta_group)
        self.tags_edit = QtWidgets.QLineEdit()
        self.tags_edit.setPlaceholderText("Nh·∫≠p tags: m√¥n, l·ªõp, ch·ªß ƒë·ªÅ, m·ª©c ƒë·ªô (ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y)")
        tags_layout.addWidget(self.tags_edit)
        layout.addWidget(tags_group)

        # Buttons
        button_layout = QtWidgets.QHBoxLayout()

        save_btn = QtWidgets.QPushButton("üíæ L∆∞u")
        save_btn.setStyleSheet("QPushButton { background: #28a745; color: white; padding: 10px 30px; }")
        save_btn.clicked.connect(self.save_question)

        cancel_btn = QtWidgets.QPushButton("‚ùå H·ªßy")
        cancel_btn.setStyleSheet("QPushButton { background: #6c757d; color: white; padding: 10px 30px; }")
        cancel_btn.clicked.connect(self.reject)

        button_layout.addStretch()
        button_layout.addWidget(cancel_btn)
        button_layout.addWidget(save_btn)

        layout.addLayout(button_layout)

        # Enable paste t·ª´ clipboard
        self.setup_clipboard()
    # #(Ph∆∞∆°ng th·ª©c load d·ªØ li·ªáu c√¢u h·ªèi ƒë·ªÉ ch·ªânh s·ª≠a)
    def load_question_data(self):
        """Load d·ªØ li·ªáu c√¢u h·ªèi ƒë·ªÉ ch·ªânh s·ª≠a"""
        if not self.question_id:
            return

        try:
            # L·∫•y d·ªØ li·ªáu c√¢u h·ªèi t·ª´ database
            question = self.db.execute_query(
                "SELECT * FROM question_bank WHERE id=?",
                (self.question_id,), fetch="one"
            )

            if not question:
                QtWidgets.QMessageBox.warning(self, "L·ªói", "Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi!")
                return

            # Convert to dict n·∫øu c·∫ßn
            if hasattr(question, 'keys'):
                q_dict = dict(question)
            else:
                q_dict = question

            # Load th√¥ng tin c∆° b·∫£n
            difficulty = q_dict.get('difficulty_level', 'D·ªÖ')
            if difficulty.lower() == 'easy':
                self.difficulty_combo.setCurrentText('D·ªÖ')
            elif difficulty.lower() == 'medium':
                self.difficulty_combo.setCurrentText('Trung b√¨nh')
            elif difficulty.lower() == 'hard':
                self.difficulty_combo.setCurrentText('Kh√≥')

            # Load n·ªôi dung c√¢u h·ªèi
            content_type = q_dict.get('content_type', 'text')
            content_text = q_dict.get('content_text', '')
            content_data = q_dict.get('content_data')

            if content_type == 'text':
                # Hi·ªÉn th·ªã text content
                self.content_widget.setCurrentIndex(0)  # Text editor
                self.text_editor.setHtml(content_text)
                self.content_type = 'text'

            elif content_type == 'image':
                # Hi·ªÉn th·ªã image content
                self.content_widget.setCurrentIndex(1)  # Image viewer
                if content_data:
                    self.image_viewer.load_image_from_data(content_data)
                self.content_type = 'image'
                self.content_data = content_data

            # Load ƒë√°p √°n
            answer_type = q_dict.get('answer_type', 'text')
            answer_text = q_dict.get('answer_text', '')
            answer_data = q_dict.get('answer_data')

            if answer_type == 'text':
                # Hi·ªÉn th·ªã text answer
                self.answer_widget.setCurrentIndex(0)  # Text editor
                self.answer_text_editor.setHtml(answer_text)
                self.answer_type = 'text'

            elif answer_type == 'image':
                # Hi·ªÉn th·ªã image answer
                self.answer_widget.setCurrentIndex(1)  # Image viewer
                if answer_data:
                    self.answer_image_viewer.load_image_from_data(answer_data)
                self.answer_type = 'image'
                self.answer_data = answer_data

            # Load tags
            tags = self.db.execute_query(
                "SELECT tag_name FROM question_tags WHERE question_id=?",
                (self.question_id,), fetch="all"
            ) or []

            if tags:
                tag_names = [tag['tag_name'] if hasattr(tag, 'get') else tag[0] for tag in tags]
                self.tags_edit.setText(', '.join(tag_names))

            print(f"‚úÖ ƒê√£ load d·ªØ li·ªáu c√¢u h·ªèi #{self.question_id}")

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ load d·ªØ li·ªáu c√¢u h·ªèi: {e}")
            print(f"‚ùå L·ªói load_question_data: {e}")
    # #(Ph∆∞∆°ng th·ª©c h·ªó tr·ª£ load image t·ª´ data)
    def _load_image_to_viewer(self, viewer, image_data):
        """Load image data v√†o viewer"""
        if not image_data or not viewer:
            return False

        try:
            import base64

            # N·∫øu l√† bytes
            if isinstance(image_data, bytes):
                pixmap = QtGui.QPixmap()
                if pixmap.loadFromData(image_data):
                    viewer.set_pixmap(pixmap)
                    return True

            # N·∫øu l√† string (c√≥ th·ªÉ l√† base64)
            elif isinstance(image_data, str):
                if image_data.startswith('data:image'):
                    # Data URL format
                    header, data = image_data.split(',', 1)
                    decoded_data = base64.b64decode(data)
                else:
                    # Pure base64
                    decoded_data = base64.b64decode(image_data)

                pixmap = QtGui.QPixmap()
                if pixmap.loadFromData(decoded_data):
                    viewer.set_pixmap(pixmap)
                    return True

            return False

        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói load image: {e}")
            return False
    def setup_clipboard(self):
        """X·ª≠ l√Ω paste ·∫£nh t·ª´ clipboard"""
        shortcut = QShortcut(QKeySequence.Paste, self)  # ‚úÖ cross-platform (Ctrl+V / Cmd+V)
        shortcut.activated.connect(self.paste_from_clipboard)
    def paste_from_clipboard(self):
        """D√°n n·ªôi dung (∆∞u ti√™n ·∫£nh) t·ª´ clipboard v√†o n·ªôi dung c√¢u h·ªèi"""
        try:
            cb = QtWidgets.QApplication.clipboard()
            md = cb.mimeData()

            def qimage_from_clipboard():
                # 1) ·∫¢nh thu·∫ßn
                if md.hasImage():
                    img = cb.image()
                    if not img.isNull():
                        return img
                # 2) Fallback pixmap (Windows hay d√πng)
                pm = cb.pixmap()
                if not pm.isNull():
                    return pm.toImage()
                # 3) ·∫¢nh nh√∫ng base64 trong HTML
                if md.hasHtml():
                    import re, base64
                    html = md.html()
                    m = re.search(r'data:image/(png|jpeg|jpg);base64,([A-Za-z0-9+/=]+)', html, re.I)
                    if m:
                        fmt = m.group(1).upper()
                        ba = QtCore.QByteArray.fromBase64(m.group(2).encode('ascii'))
                        img = QtGui.QImage()
                        if img.loadFromData(ba, fmt):
                            return img
                return None

            image = qimage_from_clipboard()

            if image:
                # Chuy·ªÉn sang ch·∫ø ƒë·ªô ·∫£nh v√† hi·ªÉn th·ªã
                self.content_type = "image"
                self.content_widget.setCurrentWidget(self.image_viewer)
                self.image_viewer.set_image(image)

                # L∆∞u t·∫°m bytes PNG ƒë·ªÉ save xu·ªëng DB khi b·∫•m L∆∞u
                ba = QtCore.QByteArray()
                buff = QtCore.QBuffer(ba)
                buff.open(QtCore.QIODevice.WriteOnly)
                image.save(buff, "PNG")
                self.content_data = bytes(ba)

                QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ d√°n ·∫£nh t·ª´ clipboard!")
                return

            # N·∫øu kh√¥ng c√≥ ·∫£nh, d√°n text b√¨nh th∆∞·ªùng v√†o editor (n·∫øu ƒëang ·ªü ch·∫ø ƒë·ªô text)
            if md.hasText():
                text = md.text()
                if self.content_widget.currentWidget() != self.text_editor:
                    # N·∫øu ƒëang ·ªü m√†n ·∫£nh, chuy·ªÉn v·ªÅ text
                    self.add_content("text")
                cursor = self.text_editor.textCursor()
                cursor.insertText(text)
                return

            QtWidgets.QMessageBox.information(self, "Th√¥ng b√°o", "Clipboard kh√¥ng c√≥ n·ªôi dung ph√π h·ª£p ƒë·ªÉ d√°n.")
        except Exception as e:
            QtWidgets.QMessageBox.warning(self, "L·ªói", f"Kh√¥ng th·ªÉ d√°n: {e}")
    def paste_answer_from_clipboard(self):
        """D√°n n·ªôi dung (∆∞u ti√™n ·∫£nh) t·ª´ clipboard v√†o ƒë√°p √°n"""
        # #(Ph∆∞∆°ng th·ª©c paste ·∫£nh cho ƒë√°p √°n)
        try:
            cb = QtWidgets.QApplication.clipboard()

            # Ki·ªÉm tra c√≥ ·∫£nh kh√¥ng
            if cb.mimeData().hasImage():
                image = cb.image()
                if not image.isNull():
                    # Chuy·ªÉn sang ch·∫ø ƒë·ªô text n·∫øu ch∆∞a
                    if self.answer_type != "text":
                        self.answer_type = "text"
                        self.answer_widget.setCurrentWidget(self.answer_text_editor)

                    # Ch√®n ·∫£nh v√†o text editor
                    cursor = self.answer_text_editor.textCursor()
                    cursor.insertImage(image)
                    return

            # N·∫øu kh√¥ng c√≥ ·∫£nh, paste text b√¨nh th∆∞·ªùng
            if cb.mimeData().hasText():
                cursor = self.answer_text_editor.textCursor()
                cursor.insertText(cb.text())

        except Exception as e:
            QtWidgets.QMessageBox.warning(self, "L·ªói", f"Kh√¥ng th·ªÉ d√°n: {e}")
    def eventFilter(self, obj, event):
        """B·∫Øt s·ª± ki·ªán keyboard cho text editor - S·ª¨A L·ªñI ATTRIBUTE"""
        # X·ª≠ l√Ω cho n·ªôi dung c√¢u h·ªèi
        if obj == self.text_editor and event.type() == QtCore.QEvent.KeyPress:
            if event.matches(QtGui.QKeySequence.Paste):
                self.paste_from_clipboard()
                return True

        # ‚úÖ S·ª¨A: Ki·ªÉm tra widget t·ªìn t·∫°i tr∆∞·ªõc khi so s√°nh
        elif (hasattr(self, 'answer_text_editor') and
              obj == self.answer_text_editor and
              event.type() == QtCore.QEvent.KeyPress):
            if event.matches(QtGui.QKeySequence.Paste):
                self.paste_answer_from_clipboard()
                return True

        return super().eventFilter(obj, event)
    def add_content(self, content_type):
        """Th√™m n·ªôi dung theo lo·∫°i"""
        if content_type == "text":
            self.content_type = "text"
            self.content_widget.setCurrentWidget(self.text_editor)

        elif content_type == "image":
            file_path, _ = QtWidgets.QFileDialog.getOpenFileName(
                self, "Ch·ªçn ·∫£nh", "", "Images (*.png *.jpg *.jpeg *.gif *.bmp)")
            if file_path:
                self.content_type = "image"
                pixmap = QPixmap(file_path)
                self.image_viewer.set_pixmap(pixmap)
                self.content_widget.setCurrentWidget(self.image_viewer)

        elif content_type == "pdf":
            file_path, _ = QtWidgets.QFileDialog.getOpenFileName(
                self, "Ch·ªçn PDF", "", "PDF Files (*.pdf)")
            if file_path:
                self.content_type = "pdf"
                self.pdf_viewer.load_pdf(file_path)
                self.content_widget.setCurrentWidget(self.pdf_viewer)

        elif content_type == "word":
            QtWidgets.QMessageBox.information(self, "Th√¥ng b√°o",
                                              "Ch·ª©c nƒÉng import Word ƒëang ph√°t tri·ªÉn")
    def add_answer(self, answer_type):
        """Th√™m ƒë√°p √°n theo lo·∫°i - GI·ªêNG PH·∫¶N N·ªòI DUNG"""
        if answer_type == "text":
            self.answer_type = "text"
            self.answer_widget.setCurrentWidget(self.answer_text_editor)

        elif answer_type == "image":
            file_path, _ = QtWidgets.QFileDialog.getOpenFileName(
                self, "Ch·ªçn ·∫£nh ƒë√°p √°n", "", "Images (*.png *.jpg *.jpeg *.gif *.bmp)")
            if file_path:
                self.answer_type = "image"
                pixmap = QPixmap(file_path)
                self.answer_image_viewer.set_pixmap(pixmap)
                self.answer_widget.setCurrentWidget(self.answer_image_viewer)

        elif answer_type == "pdf":
            file_path, _ = QtWidgets.QFileDialog.getOpenFileName(
                self, "Ch·ªçn PDF ƒë√°p √°n", "", "PDF Files (*.pdf)")
            if file_path:
                self.answer_type = "pdf"
                self.answer_pdf_viewer.load_pdf(file_path)
                self.answer_widget.setCurrentWidget(self.answer_pdf_viewer)

        elif answer_type == "word":
            QtWidgets.QMessageBox.information(self, "Th√¥ng b√°o",
                                              "Ch·ª©c nƒÉng import Word ƒëang ph√°t tri·ªÉn")
    def insert_latex(self):
        """Ch√®n c√¥ng th·ª©c LaTeX"""
        dialog = LaTeXInputDialog(self)
        if dialog.exec() == QtWidgets.QDialog.Accepted:
            latex_code = dialog.get_latex()
            if self.content_type == "text":
                cursor = self.text_editor.textCursor()
                cursor.insertText(f"$${latex_code}$$")
    def insert_answer_latex(self):
        """Ch√®n c√¥ng th·ª©c LaTeX v√†o ƒë√°p √°n"""
        # #(Ph∆∞∆°ng th·ª©c ch√®n LaTeX cho ƒë√°p √°n)
        dialog = LaTeXInputDialog(self)
        if dialog.exec() == QtWidgets.QDialog.Accepted:
            latex_code = dialog.get_latex()
            if self.answer_type == "text":
                cursor = self.answer_text_editor.textCursor()
                cursor.insertText(f"$${latex_code}$$")
    def save_question(self):
        """L∆∞u c√¢u h·ªèi v√†o database - ƒê√É S·ª¨A L·ªñI"""

        try:
            if not self.tree_id:
                QtWidgets.QMessageBox.warning(self, "Thi·∫øu th∆∞ m·ª•c", "Vui l√≤ng ch·ªçn v·ªã tr√≠ l∆∞u trong c√¢y.")
                return

            # ‚úÖ S·ª¨A: Chu·∫©n b·ªã d·ªØ li·ªáu n·ªôi dung
            content_text = None
            content_data = None

            if self.content_type == "text":
                content_text = (self.text_editor.toPlainText() or "").strip()
                if not content_text:
                    QtWidgets.QMessageBox.warning(self, "Thi·∫øu n·ªôi dung", "N·ªôi dung c√¢u h·ªèi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")
                    return

            elif self.content_type == "image":
                # ∆Øu ti√™n self.content_data (ƒë√£ set khi d√°n); n·∫øu ch∆∞a c√≥, l·∫•y t·ª´ viewer
                if self.content_data is None and self.image_viewer.current_pixmap:
                    ba = QtCore.QByteArray()
                    buff = QtCore.QBuffer(ba)
                    buff.open(QtCore.QIODevice.WriteOnly)
                    self.image_viewer.current_pixmap.toImage().save(buff, "PNG")
                    self.content_data = bytes(ba)
                content_data = self.content_data

                if content_data is None:
                    QtWidgets.QMessageBox.warning(self, "Thi·∫øu n·ªôi dung", "Vui l√≤ng ch·ªçn ·∫£nh cho c√¢u h·ªèi.")
                    return

            elif self.content_type == "pdf":
                # ‚úÖ TH√äM: X·ª≠ l√Ω PDF
                if hasattr(self.pdf_viewer, 'pdf_path') and self.pdf_viewer.pdf_path:
                    content_text = f"[PDF: {self.pdf_viewer.pdf_path}]"
                else:
                    QtWidgets.QMessageBox.warning(self, "Thi·∫øu n·ªôi dung", "Vui l√≤ng ch·ªçn file PDF.")
                    return

            #Kh·ªüi t·∫°o answer_data
            answer_text = ""
            answer_data = None
            answer_has_data = False

            if self.answer_type == "text":
                answer_plain = self.answer_text_editor.toPlainText().strip()
                answer_html = self.answer_text_editor.toHtml().strip()

                if answer_plain or self._has_images_in_html(answer_html):
                    answer_has_data = True
                    # L∆∞u HTML n·∫øu c√≥ ·∫£nh, ng∆∞·ª£c l·∫°i l∆∞u plain text
                    if self._has_images_in_html(answer_html):
                        answer_text = answer_html
                    else:
                        answer_text = answer_plain

            elif self.answer_type == "image":
                #  X·ª≠ l√Ω ƒë·∫ßy ƒë·ªß binary data cho ·∫£nh ƒë√°p √°n
                if hasattr(self.answer_image_viewer, 'current_pixmap') and self.answer_image_viewer.current_pixmap:
                    # Chuy·ªÉn ·∫£nh th√†nh binary data
                    ba = QtCore.QByteArray()
                    buff = QtCore.QBuffer(ba)
                    buff.open(QtCore.QIODevice.WriteOnly)
                    self.answer_image_viewer.current_pixmap.toImage().save(buff, "PNG")
                    answer_data = bytes(ba)

                    answer_has_data = True
                    answer_text = "[Answer Image]"  # Text m√¥ t·∫£

            elif self.answer_type == "pdf":
                # ‚úÖ TH√äM: X·ª≠ l√Ω PDF ƒë√°p √°n
                if hasattr(self.answer_pdf_viewer, 'pdf_path') and self.answer_pdf_viewer.pdf_path:
                    answer_has_data = True
                    answer_text = f"[Answer PDF: {self.answer_pdf_viewer.pdf_path}]"

            if not answer_has_data:
                QtWidgets.QMessageBox.warning(self, "L·ªói", "Vui l√≤ng nh·∫≠p ƒë√°p √°n")
                return

            # ‚úÖ Insert/Update v·ªõi error handling t·ªët h∆°n
            if self.question_id:
                # Update existing question
                result = self.db.execute_query(
                    """UPDATE question_bank
                       SET content_text=?, content_type=?, content_data=?,
                           answer_type=?, answer_data=?, correct=?,
                           tree_id=?, modified_date=CURRENT_TIMESTAMP
                       WHERE id=?""",
                    (content_text, self.content_type, content_data,
                     self.answer_type, answer_data, answer_text,
                     self.tree_id, self.question_id)
                )

                if not result:
                    QtWidgets.QMessageBox.critical(self, "L·ªói", "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t c√¢u h·ªèi.")
                    return
            else:
                # Insert new question
                new_id = self.db.execute_query(
                    """INSERT INTO question_bank
                       (content_text, content_type, content_data,
                        answer_type, answer_data, correct, tree_id, created_date)
                       VALUES (?,?,?,?,?,?,?, CURRENT_TIMESTAMP)""",
                    (content_text, self.content_type, content_data,
                     self.answer_type, answer_data, answer_text, self.tree_id)
                )

                if not new_id:
                    QtWidgets.QMessageBox.critical(self, "L·ªói", "Kh√¥ng th·ªÉ t·∫°o c√¢u h·ªèi m·ªõi.")
                    return

                self.question_id = new_id

            QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ l∆∞u c√¢u h·ªèi.")
            self.accept()

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ l∆∞u: {e}")
            print(f"Chi ti·∫øt l·ªói save_question: {e}")  # Debug log
    def _has_images_in_html(self, html_content):
        """Ki·ªÉm tra HTML c√≥ ch·ª©a ·∫£nh kh√¥ng"""
        # #(Helper method ki·ªÉm tra ·∫£nh trong HTML content)
        if not html_content:
            return False

        # Ki·ªÉm tra c√°c tag ·∫£nh HTML
        html_lower = html_content.lower()

        # Ki·ªÉm tra tag <img>
        if '<img' in html_lower:
            return True

        # Ki·ªÉm tra data URI cho ·∫£nh
        if 'data:image/' in html_lower:
            return True

        # Ki·ªÉm tra c√°c ƒë·ªãnh d·∫°ng ·∫£nh base64
        if 'base64' in html_lower and ('png' in html_lower or 'jpg' in html_lower or 'jpeg' in html_lower):
            return True

        return False
# ========== DIALOG XEM CHI TI·∫æT C√ÇU H·ªéI ========== #
class QuestionDetailDialog(QtWidgets.QDialog):
    """Dialog hi·ªÉn th·ªã chi ti·∫øt ƒë·∫ßy ƒë·ªß c·ªßa c√¢u h·ªèi"""

    def __init__(self, db_manager, question_id, parent=None):
        super().__init__(parent)
        self.db = db_manager
        self.question_id = question_id

        self.setWindowTitle(f"Chi ti·∫øt c√¢u h·ªèi #{question_id}")
        self.setModal(True)
        self.resize(800, 600)

        self._setup_ui()
        self._load_question_data()

    def _setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán dialog"""
        layout = QtWidgets.QVBoxLayout(self)

        # Scroll area ƒë·ªÉ ch·ª©a n·ªôi dung
        scroll = QtWidgets.QScrollArea()
        scroll.setWidgetResizable(True)

        content_widget = QtWidgets.QWidget()
        content_layout = QtWidgets.QVBoxLayout(content_widget)

        # Th√¥ng tin c∆° b·∫£n
        info_group = QtWidgets.QGroupBox("üìã Th√¥ng tin c∆° b·∫£n")
        info_layout = QtWidgets.QFormLayout(info_group)

        self.id_label = QtWidgets.QLabel()
        self.difficulty_label = QtWidgets.QLabel()
        self.created_label = QtWidgets.QLabel()

        info_layout.addRow("üÜî ID:", self.id_label)
        info_layout.addRow("üéØ ƒê·ªô kh√≥:", self.difficulty_label)
        info_layout.addRow("üìÖ Ng√†y t·∫°o:", self.created_label)

        content_layout.addWidget(info_group)

        # N·ªôi dung c√¢u h·ªèi
        content_group = QtWidgets.QGroupBox("üìù N·ªôi dung c√¢u h·ªèi")
        content_content_layout = QtWidgets.QVBoxLayout(content_group)

        self.content_display = QtWidgets.QTextEdit()
        self.content_display.setReadOnly(True)
        self.content_display.setMaximumHeight(300)
        content_content_layout.addWidget(self.content_display)

        content_layout.addWidget(content_group)

        # ƒê√°p √°n
        answer_group = QtWidgets.QGroupBox("‚úÖ ƒê√°p √°n")
        answer_layout = QtWidgets.QVBoxLayout(answer_group)

        self.answer_display = QtWidgets.QTextEdit()
        self.answer_display.setReadOnly(True)
        self.answer_display.setMaximumHeight(150)
        answer_layout.addWidget(self.answer_display)

        content_layout.addWidget(answer_group)

        scroll.setWidget(content_widget)
        layout.addWidget(scroll)

        # Buttons
        button_layout = QtWidgets.QHBoxLayout()
        close_btn = QtWidgets.QPushButton("ƒê√≥ng")
        close_btn.clicked.connect(self.accept)
        button_layout.addStretch()
        button_layout.addWidget(close_btn)
        layout.addLayout(button_layout)

    def _load_question_data(self):
        """Load d·ªØ li·ªáu c√¢u h·ªèi chi ti·∫øt"""
        try:
            question = self.db.execute_query(
                "SELECT * FROM question_bank WHERE id=?",
                (self.question_id,), fetch="one"
            )

            if question:
                # Convert to dict n·∫øu c·∫ßn
                if hasattr(question, 'keys'):
                    q_dict = dict(question)
                else:
                    q_dict = question

                # Hi·ªÉn th·ªã th√¥ng tin
                self.id_label.setText(str(q_dict.get('id', '')))
                self.difficulty_label.setText(q_dict.get('difficulty_level', 'Medium'))
                self.created_label.setText(q_dict.get('created_date', 'Kh√¥ng r√µ'))

                # Hi·ªÉn th·ªã n·ªôi dung
                content_text = q_dict.get('content_text', '')
                self.content_display.setText(content_text)

                # Hi·ªÉn th·ªã ƒë√°p √°n
                answer_text = q_dict.get('answer_text', '')
                self.answer_display.setText(answer_text)

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ load d·ªØ li·ªáu: {e}")
# ========== CLASS M·ªöI - TH√äM V√ÄO ========== #
class AdaptiveImageViewer(QtWidgets.QWidget):
    """Widget hi·ªÉn th·ªã ·∫£nh t·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc theo ·∫£nh"""

    def __init__(self, parent=None):
        super().__init__(parent)
        self.current_pixmap = None
        self.max_width = 600  # Chi·ªÅu r·ªông t·ªëi ƒëa
        self.max_height = 400  # Chi·ªÅu cao t·ªëi ƒëa
        self.min_height = 100  # Chi·ªÅu cao t·ªëi thi·ªÉu

        self._setup_ui()

    # #(X·ª≠ l√Ω t·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh khi resize widget)
    def resizeEvent(self, event):
        """T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh ·∫£nh khi widget thay ƒë·ªïi k√≠ch th∆∞·ªõc"""
        super().resizeEvent(event)
        if hasattr(self, 'current_pixmap') and self.current_pixmap:
            QtCore.QTimer.singleShot(50, self.fit_to_container)  # Delay nh·ªè ƒë·ªÉ ƒë·∫£m b·∫£o UI ƒë√£ update
    def _setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán"""
        layout = QtWidgets.QVBoxLayout(self)
        layout.setContentsMargins(5, 5, 5, 5)

        # Label hi·ªÉn th·ªã ·∫£nh
        self.image_label = QtWidgets.QLabel()
        self.image_label.setAlignment(Qt.AlignCenter)
        self.image_label.setStyleSheet("""
            QLabel {
                border: 1px solid #ddd;
                border-radius: 4px;
                background: white;
                padding: 5px;
            }
        """)

        # Scroll area cho ·∫£nh l·ªõn
        self.scroll_area = QtWidgets.QScrollArea()
        self.scroll_area.setWidget(self.image_label)
        self.scroll_area.setWidgetResizable(True)
        self.scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)

        layout.addWidget(self.scroll_area)

        # Info label hi·ªÉn th·ªã k√≠ch th∆∞·ªõc ·∫£nh
        self.info_label = QtWidgets.QLabel("No image loaded")
        self.info_label.setStyleSheet("color: #666; font-size: 11px;")
        layout.addWidget(self.info_label)

    def load_image_from_data(self, image_data):
        """Load ·∫£nh t·ª´ binary data v√† t·ª± ƒë·ªông resize widget"""
        if not image_data:
            self.clear_image()
            return

        try:
            # Load pixmap t·ª´ data
            pixmap = QtGui.QPixmap()
            if isinstance(image_data, bytes):
                pixmap.loadFromData(image_data)
            elif isinstance(image_data, str):
                # Th·ª≠ decode base64 n·∫øu l√† string
                import base64
                try:
                    if image_data.startswith('data:image'):
                        header, data = image_data.split(',', 1)
                        decoded_data = base64.b64decode(data)
                    else:
                        decoded_data = base64.b64decode(image_data)
                    pixmap.loadFromData(decoded_data)
                except:
                    pixmap = QtGui.QPixmap(image_data)  # File path

            if pixmap.isNull():
                self.clear_image()
                return

            self.current_pixmap = pixmap
            QtCore.QTimer.singleShot(100, self.fit_to_container)

        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói load image: {e}")
            self.clear_image()

    def _display_adaptive_image(self):
        """Hi·ªÉn th·ªã ·∫£nh v·ªõi k√≠ch th∆∞·ªõc t·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh"""
        if not self.current_pixmap or self.current_pixmap.isNull():
            return

        # K√≠ch th∆∞·ªõc g·ªëc c·ªßa ·∫£nh
        original_width = self.current_pixmap.width()
        original_height = self.current_pixmap.height()

        # T√≠nh to√°n k√≠ch th∆∞·ªõc hi·ªÉn th·ªã
        display_width = min(original_width, self.max_width)
        display_height = min(original_height, self.max_height)

        # Gi·ªØ t·ª∑ l·ªá khung h√¨nh
        if original_width > 0 and original_height > 0:
            aspect_ratio = original_width / original_height

            # T√≠nh scale factor ƒë·ªÉ v·ª´a v·ªõi gi·ªõi h·∫°n max_width v√† max_height
            scale_width = self.max_width / original_width
            scale_height = self.max_height / original_height
            scale_factor = min(scale_width, scale_height, 1.0)  # Kh√¥ng ph√≥ng to qu√° k√≠ch th∆∞·ªõc g·ªëc

            # √Åp d·ª•ng scale factor
            display_width = int(original_width * scale_factor)
            display_height = int(original_height * scale_factor)
        else:
            display_width = self.max_width
            display_height = self.max_height

        # ƒê·∫£m b·∫£o chi·ªÅu cao t·ªëi thi·ªÉu
        widget_min_height = max(display_height + 50, self.min_height)

        # Scale ·∫£nh theo k√≠ch th∆∞·ªõc t√≠nh to√°n
        scaled_pixmap = self.current_pixmap.scaled(
            display_width, display_height,
            Qt.KeepAspectRatio, Qt.SmoothTransformation
        )

        # Hi·ªÉn th·ªã ·∫£nh
        self.image_label.setPixmap(scaled_pixmap)
        self.image_label.setFixedSize(display_width, display_height)

        # ƒêi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc widget ch·ª©a
        #self.setMinimumHeight(display_height + 50)  # +50 cho info label v√† padding
        #self.setMaximumHeight(display_height + 50)
        if original_height <= 200:  # ·∫¢nh qu√° nh·ªè
            widget_height = max(display_height + 50, 150)  # Chi·ªÅu cao t·ªëi thi·ªÉu h·ª£p l√Ω
        else:
            widget_height = display_height + 50

        self.setMinimumHeight(widget_height)
        fixed_height = 500  # Chi·ªÅu cao c·ªë ƒë·ªãnh cho khung preview
        self.setMinimumHeight(fixed_height)
        self.setMaximumHeight(fixed_height)
        if self.parent():
            self.parent().updateGeometry()
        # C·∫≠p nh·∫≠t th√¥ng tin
        scale_percent = int(scale_factor * 100)
        self.info_label.setText(
            f"üîç G·ªëc: {original_width}√ó{original_height} | "
            f"Hi·ªÉn th·ªã: {display_width}√ó{display_height} | "
            f"T·ª∑ l·ªá: {scale_percent}%"
        )

    def clear_image(self):
        """X√≥a ·∫£nh v√† reset k√≠ch th∆∞·ªõc"""
        self.current_pixmap = None
        self.image_label.clear()
        self.image_label.setText("No image")
        self.setMinimumHeight(self.min_height)
        self.setMaximumHeight(self.min_height)
        self.info_label.setText("No image loaded")

    # ========== PH∆Ø∆†NG TH·ª®C CONFIGURATION - TH√äM V√ÄO AdaptiveImageViewer ========== #
    def set_size_limits(self, max_width=600, max_height=400, min_height=100):
        """Thi·∫øt l·∫≠p gi·ªõi h·∫°n k√≠ch th∆∞·ªõc hi·ªÉn th·ªã"""
        self.max_width = max_width
        self.max_height = max_height
        self.min_height = min_height

        # Refresh hi·ªÉn th·ªã n·∫øu ƒë√£ c√≥ ·∫£nh
        if self.current_pixmap:
            self._display_adaptive_image()

    def enable_zoom_controls(self):
        """Th√™m n√∫t zoom cho ·∫£nh l·ªõn"""
        zoom_layout = QtWidgets.QHBoxLayout()

        zoom_out_btn = QtWidgets.QPushButton("üîç-")
        zoom_out_btn.setFixedSize(30, 25)
        zoom_out_btn.clicked.connect(self._zoom_out)

        zoom_in_btn = QtWidgets.QPushButton("üîç+")
        zoom_in_btn.setFixedSize(30, 25)
        zoom_in_btn.clicked.connect(self._zoom_in)

        zoom_layout.addWidget(zoom_out_btn)
        zoom_layout.addWidget(zoom_in_btn)
        zoom_layout.addStretch()

        # Th√™m v√†o layout ch√≠nh (sau info_label)
        self.layout().addLayout(zoom_layout)

    def _zoom_in(self):
        """Ph√≥ng to ·∫£nh"""
        if self.max_height < 800:
            self.max_height += 50
            self._display_adaptive_image()

    def _zoom_out(self):
        """Thu nh·ªè ·∫£nh"""
        if self.max_height > 150:
            self.max_height -= 50
            self._display_adaptive_image()

    def fit_to_container(self):
        """ƒêi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc t·ªëi ƒëa theo container th·ª±c t·∫ø"""
        if not self.current_pixmap or self.current_pixmap.isNull():
            return

        try:
            # L·∫•y k√≠ch th∆∞·ªõc container th·ª±c t·∫ø
            container_width = self.width() - 20  # Tr·ª´ margin
            container_height = self.height() - 80  # Tr·ª´ info label v√† padding

            # ƒê·∫£m b·∫£o k√≠ch th∆∞·ªõc t·ªëi thi·ªÉu
            container_width = max(container_width, 200)
            container_height = max(container_height, self.min_height)

            # C·∫≠p nh·∫≠t gi·ªõi h·∫°n
            self.max_width = container_width
            self.max_height = container_height

            # Refresh hi·ªÉn th·ªã
            self._display_adaptive_image()
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói fit_to_container: {e}")# ========== DIALOG XEM CHI TI·∫æT C√ÇU H·ªéI ========== #
# ========== DIALOG CH·ªåN TH∆Ø M·ª§C ========== #
class FolderSelectDialog(QtWidgets.QDialog):
    """Dialog ch·ªçn th∆∞ m·ª•c ƒë√≠ch ƒë·ªÉ di chuy·ªÉn c√¢u h·ªèi"""

    def __init__(self, db_manager, parent=None):
        super().__init__(parent)
        self.db = db_manager
        self.selected_tree_id = None

        self.setWindowTitle("üóÇÔ∏è Ch·ªçn th∆∞ m·ª•c ƒë√≠ch")
        self.setModal(True)
        self.resize(400, 500)

        self._setup_ui()
        self._load_tree_data()

    def _setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán dialog"""
        layout = QtWidgets.QVBoxLayout(self)

        # Ti√™u ƒë·ªÅ
        title = QtWidgets.QLabel("Ch·ªçn th∆∞ m·ª•c ƒë·ªÉ di chuy·ªÉn c√¢u h·ªèi:")
        title.setStyleSheet("font-weight: bold; font-size: 14px; margin-bottom: 10px;")
        layout.addWidget(title)

        # Tree widget ƒë·ªÉ hi·ªÉn th·ªã c√¢y th∆∞ m·ª•c
        self.tree_widget = QtWidgets.QTreeWidget()
        self.tree_widget.setHeaderHidden(True)
        self.tree_widget.itemClicked.connect(self._on_tree_select)
        self.tree_widget.itemDoubleClicked.connect(self._on_tree_double_click)

        # Style cho tree
        self.tree_widget.setStyleSheet("""
            QTreeWidget {
                border: 1px solid #ddd;
                border-radius: 4px;
                background: white;
            }
            QTreeWidget::item {
                padding: 8px;
                border-bottom: 1px solid #f0f0f0;
            }
            QTreeWidget::item:selected {
                background-color: #e3f2fd;
                color: #1976d2;
            }
            QTreeWidget::item:hover {
                background-color: #f5f5f5;
            }
        """)

        layout.addWidget(self.tree_widget)

        # Label hi·ªÉn th·ªã l·ª±a ch·ªçn hi·ªán t·∫°i
        self.selection_label = QtWidgets.QLabel("Ch∆∞a ch·ªçn th∆∞ m·ª•c n√†o")
        self.selection_label.setStyleSheet("""
            QLabel {
                padding: 8px;
                background: #f8f9fa;
                border: 1px solid #dee2e6;
                border-radius: 4px;
                color: #495057;
            }
        """)
        layout.addWidget(self.selection_label)

        # Buttons
        button_layout = QtWidgets.QHBoxLayout()

        self.ok_button = QtWidgets.QPushButton("‚úÖ X√°c nh·∫≠n")
        self.ok_button.setEnabled(False)
        self.ok_button.clicked.connect(self.accept)
        self.ok_button.setStyleSheet("""
            QPushButton {
                background-color: #28a745;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #218838;
            }
            QPushButton:disabled {
                background-color: #6c757d;
            }
        """)

        cancel_button = QtWidgets.QPushButton("‚ùå H·ªßy")
        cancel_button.clicked.connect(self.reject)
        cancel_button.setStyleSheet("""
            QPushButton {
                background-color: #6c757d;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #545b62;
            }
        """)

        button_layout.addStretch()
        button_layout.addWidget(cancel_button)
        button_layout.addWidget(self.ok_button)

        layout.addLayout(button_layout)

    def _load_tree_data(self):
        """Load d·ªØ li·ªáu c√¢y th∆∞ m·ª•c"""
        try:
            # Load t·∫•t c·∫£ nodes
            nodes = self.db.execute_query(
                "SELECT id, parent_id, name, level FROM exercise_tree ORDER BY parent_id, name",
                fetch="all"
            ) or []

            # Chuy·ªÉn ƒë·ªïi sang dict ƒë·ªÉ d·ªÖ x·ª≠ l√Ω
            node_dict = {}
            root_nodes = []

            for node in nodes:
                node_data = dict(node) if hasattr(node, 'keys') else {}
                node_id = node_data.get('id')
                parent_id = node_data.get('parent_id')

                if node_id:
                    node_dict[node_id] = node_data
                    if not parent_id:
                        root_nodes.append(node_data)

            # T·∫°o tree structure
            self.tree_widget.clear()

            for root_node in root_nodes:
                root_item = self._create_tree_item(root_node)
                self.tree_widget.addTopLevelItem(root_item)
                self._add_child_items(root_item, root_node['id'], node_dict)

            # Expand t·∫•t c·∫£ c√°c node
            self.tree_widget.expandAll()

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ load c√¢y th∆∞ m·ª•c: {e}")

    def _create_tree_item(self, node_data):
        """T·∫°o QTreeWidgetItem t·ª´ node data"""
        name = node_data.get('name', 'Unknown')
        level = node_data.get('level', '')
        node_id = node_data.get('id')

        # Icon theo level
        level_icons = {
            'subject': 'üìö',
            'grade': 'üéì',
            'topic': 'üìñ',
            'subtopic': 'üìÑ',
            'difficulty': 'üéØ'
        }

        icon = level_icons.get(level.lower(), 'üìÅ')
        display_text = f"{icon} {name}"

        item = QtWidgets.QTreeWidgetItem([display_text])
        item.setData(0, Qt.UserRole, node_id)

        return item

    def _add_child_items(self, parent_item, parent_id, node_dict):
        """Th√™m c√°c item con v√†o parent item"""
        children = [node for node in node_dict.values() if node.get('parent_id') == parent_id]

        for child in children:
            child_item = self._create_tree_item(child)
            parent_item.addChild(child_item)

            # Recursively add grandchildren
            child_id = child.get('id')
            if child_id:
                self._add_child_items(child_item, child_id, node_dict)

    def _on_tree_select(self, item, column):
        """X·ª≠ l√Ω khi ch·ªçn item trong tree"""
        if not item:
            return

        tree_id = item.data(0, Qt.UserRole)
        if tree_id:
            self.selected_tree_id = tree_id

            # L·∫•y ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß
            path = self._get_item_path(item)
            self.selection_label.setText(f"üìÇ ƒê√£ ch·ªçn: {path}")
            self.selection_label.setStyleSheet("""
                QLabel {
                    padding: 8px;
                    background: #d4edda;
                    border: 1px solid #c3e6cb;
                    border-radius: 4px;
                    color: #155724;
                }
            """)

            self.ok_button.setEnabled(True)
        else:
            self.selected_tree_id = None
            self.selection_label.setText("Ch∆∞a ch·ªçn th∆∞ m·ª•c n√†o")
            self.ok_button.setEnabled(False)

    def _on_tree_double_click(self, item, column):
        """X·ª≠ l√Ω double click - ch·ªçn v√† ƒë√≥ng dialog"""
        self._on_tree_select(item, column)
        if self.selected_tree_id:
            self.accept()

    def _get_item_path(self, item):
        """L·∫•y ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß c·ªßa item"""
        path_parts = []
        current_item = item

        while current_item:
            text = current_item.text(0)
            # Lo·∫°i b·ªè icon emoji kh·ªèi text
            clean_text = ''.join(char for char in text if not self._is_emoji(char)).strip()
            path_parts.insert(0, clean_text)
            current_item = current_item.parent()

        return ' > '.join(path_parts)

    def _is_emoji(self, char):
        """Ki·ªÉm tra k√Ω t·ª± c√≥ ph·∫£i emoji kh√¥ng"""
        return ord(char) > 0x1F000
# ========== DIALOG QU·∫¢N L√ù TAGS C√ÇU H·ªéI ========== #
class TagsManagerDialog(QtWidgets.QDialog):
    """Dialog qu·∫£n l√Ω tags cho c√¢u h·ªèi"""

    def __init__(self, db_manager, question_id, parent=None):
        super().__init__(parent)
        self.db = db_manager
        self.question_id = question_id

        self.setWindowTitle(f"üè∑Ô∏è Qu·∫£n l√Ω Tags - C√¢u h·ªèi #{question_id}")
        self.setModal(True)
        self.resize(500, 400)

        self._setup_ui()
        self._load_current_tags()
        self._load_available_tags()

    def _setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán dialog"""
        layout = QtWidgets.QVBoxLayout(self)

        # Ti√™u ƒë·ªÅ
        title = QtWidgets.QLabel("Qu·∫£n l√Ω Tags cho c√¢u h·ªèi")
        title.setStyleSheet("font-weight: bold; font-size: 16px; margin-bottom: 15px;")
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)

        # Ph·∫ßn th√™m tag m·ªõi
        add_group = QtWidgets.QGroupBox("‚ûï Th√™m Tag M·ªõi")
        add_layout = QtWidgets.QHBoxLayout(add_group)

        self.new_tag_input = QtWidgets.QLineEdit()
        self.new_tag_input.setPlaceholderText("Nh·∫≠p t√™n tag m·ªõi...")
        self.new_tag_input.returnPressed.connect(self._add_new_tag)

        self.color_button = QtWidgets.QPushButton("üé®")
        self.color_button.setFixedSize(40, 30)
        self.color_button.clicked.connect(self._choose_color)
        self.color_button.setToolTip("Ch·ªçn m√†u tag")
        self.current_color = "#3498db"  # M√†u m·∫∑c ƒë·ªãnh
        self._update_color_button()

        add_button = QtWidgets.QPushButton("‚ûï Th√™m")
        add_button.clicked.connect(self._add_new_tag)
        add_button.setStyleSheet("""
            QPushButton {
                background-color: #28a745;
                color: white;
                border: none;
                padding: 5px 15px;
                border-radius: 3px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #218838;
            }
        """)

        add_layout.addWidget(QtWidgets.QLabel("Tag:"))
        add_layout.addWidget(self.new_tag_input, 1)
        add_layout.addWidget(self.color_button)
        add_layout.addWidget(add_button)

        layout.addWidget(add_group)

        # Splitter cho tags hi·ªán t·∫°i v√† c√≥ s·∫µn
        splitter = QtWidgets.QSplitter(Qt.Horizontal)

        # Ph·∫ßn tags hi·ªán t·∫°i
        current_group = QtWidgets.QGroupBox("üè∑Ô∏è Tags Hi·ªán T·∫°i")
        current_layout = QtWidgets.QVBoxLayout(current_group)

        self.current_tags_list = QtWidgets.QListWidget()
        self.current_tags_list.setMaximumHeight(150)
        current_layout.addWidget(self.current_tags_list)

        remove_button = QtWidgets.QPushButton("üóëÔ∏è X√≥a Tag ƒê√£ Ch·ªçn")
        remove_button.clicked.connect(self._remove_selected_tag)
        remove_button.setStyleSheet("""
            QPushButton {
                background-color: #dc3545;
                color: white;
                border: none;
                padding: 5px 15px;
                border-radius: 3px;
            }
            QPushButton:hover {
                background-color: #c82333;
            }
        """)
        current_layout.addWidget(remove_button)

        splitter.addWidget(current_group)

        # Ph·∫ßn tags c√≥ s·∫µn
        available_group = QtWidgets.QGroupBox("üìö Tags C√≥ S·∫µn (Click ƒë·ªÉ th√™m)")
        available_layout = QtWidgets.QVBoxLayout(available_group)

        self.available_tags_list = QtWidgets.QListWidget()
        self.available_tags_list.setMaximumHeight(150)
        self.available_tags_list.itemClicked.connect(self._add_existing_tag)
        available_layout.addWidget(self.available_tags_list)

        splitter.addWidget(available_group)
        layout.addWidget(splitter)

        # Buttons
        button_layout = QtWidgets.QHBoxLayout()

        save_button = QtWidgets.QPushButton("üíæ L∆∞u")
        save_button.clicked.connect(self.accept)
        save_button.setStyleSheet("""
            QPushButton {
                background-color: #007bff;
                color: white;
                border: none;
                padding: 8px 20px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #0056b3;
            }
        """)

        cancel_button = QtWidgets.QPushButton("‚ùå H·ªßy")
        cancel_button.clicked.connect(self.reject)
        cancel_button.setStyleSheet("""
            QPushButton {
                background-color: #6c757d;
                color: white;
                border: none;
                padding: 8px 20px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #545b62;
            }
        """)

        button_layout.addStretch()
        button_layout.addWidget(cancel_button)
        button_layout.addWidget(save_button)

        layout.addLayout(button_layout)

    def _update_color_button(self):
        """C·∫≠p nh·∫≠t m√†u n√∫t ch·ªçn m√†u"""
        self.color_button.setStyleSheet(f"""
            QPushButton {{
                background-color: {self.current_color};
                border: 2px solid #333;
                border-radius: 4px;
            }}
        """)

    def _choose_color(self):
        """Ch·ªçn m√†u cho tag"""
        color = QtWidgets.QColorDialog.getColor(QtGui.QColor(self.current_color), self)
        if color.isValid():
            self.current_color = color.name()
            self._update_color_button()

    def _load_current_tags(self):
        """Load tags hi·ªán t·∫°i c·ªßa c√¢u h·ªèi"""
        try:
            tags = self.db.execute_query(
                "SELECT tag_name, color FROM question_tags WHERE question_id=?",
                (self.question_id,), fetch="all"
            ) or []

            self.current_tags_list.clear()

            for tag in tags:
                tag_dict = dict(tag) if hasattr(tag, 'keys') else {}
                tag_name = tag_dict.get('tag_name', '')
                tag_color = tag_dict.get('color', '#3498db')

                if tag_name:
                    item = QtWidgets.QListWidgetItem(tag_name)
                    item.setBackground(QtGui.QColor(tag_color))
                    item.setForeground(QtGui.QColor('white'))
                    item.setData(Qt.UserRole, tag_color)
                    self.current_tags_list.addItem(item)

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ load tags hi·ªán t·∫°i: {e}")

    def _load_available_tags(self):
        """Load t·∫•t c·∫£ tags c√≥ s·∫µn trong h·ªá th·ªëng"""
        try:
            # L·∫•y t·∫•t c·∫£ tags unique, lo·∫°i tr·ª´ tags ƒë√£ c√≥
            current_tag_names = [self.current_tags_list.item(i).text()
                                 for i in range(self.current_tags_list.count())]

            all_tags = self.db.execute_query(
                "SELECT DISTINCT tag_name, color FROM question_tags ORDER BY tag_name",
                fetch="all"
            ) or []

            self.available_tags_list.clear()

            for tag in all_tags:
                tag_dict = dict(tag) if hasattr(tag, 'keys') else {}
                tag_name = tag_dict.get('tag_name', '')
                tag_color = tag_dict.get('color', '#3498db')

                # Ch·ªâ hi·ªÉn th·ªã tags ch∆∞a ƒë∆∞·ª£c th√™m
                if tag_name and tag_name not in current_tag_names:
                    item = QtWidgets.QListWidgetItem(f"üè∑Ô∏è {tag_name}")
                    item.setBackground(QtGui.QColor(tag_color))
                    item.setForeground(QtGui.QColor('white'))
                    item.setData(Qt.UserRole, {'name': tag_name, 'color': tag_color})
                    self.available_tags_list.addItem(item)

        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói load available tags: {e}")

    def _add_new_tag(self):
        """Th√™m tag m·ªõi"""
        tag_name = self.new_tag_input.text().strip()
        if not tag_name:
            QtWidgets.QMessageBox.warning(self, "L·ªói", "Vui l√≤ng nh·∫≠p t√™n tag")
            return

        # Ki·ªÉm tra tag ƒë√£ t·ªìn t·∫°i ch∆∞a
        existing_tags = [self.current_tags_list.item(i).text()
                         for i in range(self.current_tags_list.count())]

        if tag_name in existing_tags:
            QtWidgets.QMessageBox.warning(self, "L·ªói", "Tag n√†y ƒë√£ t·ªìn t·∫°i")
            return

        try:
            # Th√™m v√†o database
            self.db.execute_query(
                "INSERT OR IGNORE INTO question_tags (question_id, tag_name, color) VALUES (?, ?, ?)",
                (self.question_id, tag_name, self.current_color)
            )

            # Th√™m v√†o danh s√°ch hi·ªán t·∫°i
            item = QtWidgets.QListWidgetItem(tag_name)
            item.setBackground(QtGui.QColor(self.current_color))
            item.setForeground(QtGui.QColor('white'))
            item.setData(Qt.UserRole, self.current_color)
            self.current_tags_list.addItem(item)

            # Clear input
            self.new_tag_input.clear()

            # Refresh available tags
            self._load_available_tags()

            QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ th√™m tag '{tag_name}'")

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ th√™m tag: {e}")

    def _add_existing_tag(self, item):
        """Th√™m tag c√≥ s·∫µn v√†o c√¢u h·ªèi"""
        if not item:
            return

        tag_data = item.data(Qt.UserRole)
        if not tag_data:
            return

        tag_name = tag_data['name']
        tag_color = tag_data['color']

        try:
            # Th√™m v√†o database
            self.db.execute_query(
                "INSERT OR IGNORE INTO question_tags (question_id, tag_name, color) VALUES (?, ?, ?)",
                (self.question_id, tag_name, tag_color)
            )

            # Th√™m v√†o danh s√°ch hi·ªán t·∫°i
            new_item = QtWidgets.QListWidgetItem(tag_name)
            new_item.setBackground(QtGui.QColor(tag_color))
            new_item.setForeground(QtGui.QColor('white'))
            new_item.setData(Qt.UserRole, tag_color)
            self.current_tags_list.addItem(new_item)

            # X√≥a kh·ªèi available tags
            row = self.available_tags_list.row(item)
            self.available_tags_list.takeItem(row)

            QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ th√™m tag '{tag_name}'")

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ th√™m tag: {e}")

    def _remove_selected_tag(self):
        """X√≥a tag ƒë∆∞·ª£c ch·ªçn"""
        current_item = self.current_tags_list.currentItem()
        if not current_item:
            QtWidgets.QMessageBox.warning(self, "L·ªói", "Vui l√≤ng ch·ªçn tag ƒë·ªÉ x√≥a")
            return

        tag_name = current_item.text()

        if QtWidgets.QMessageBox.question(
                self, "X√°c nh·∫≠n", f"B·∫°n c√≥ mu·ªën x√≥a tag '{tag_name}'?"
        ) != QtWidgets.QMessageBox.Yes:
            return

        try:
            # X√≥a kh·ªèi database
            self.db.execute_query(
                "DELETE FROM question_tags WHERE question_id=? AND tag_name=?",
                (self.question_id, tag_name)
            )

            # X√≥a kh·ªèi danh s√°ch
            row = self.current_tags_list.row(current_item)
            self.current_tags_list.takeItem(row)

            # Refresh available tags
            self._load_available_tags()

            QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ x√≥a tag '{tag_name}'")

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ x√≥a tag: {e}")
class TreeNodeDialog(QtWidgets.QDialog):
    def __init__(self, db_manager, mode="add", node_id=None, parent=None):
        super().__init__(parent)
        self.db = db_manager
        self.mode = mode  # "add" ho·∫∑c "edit"
        self.node_id = node_id
        self.parent_id = None

        self._setup_dialog()
        self._build_ui()
        self._load_data()

    def _setup_dialog(self):
        """Thi·∫øt l·∫≠p dialog"""
        if self.mode == "add":
            self.setWindowTitle("‚ûï Th√™m nh√°nh m·ªõi")
        else:
            self.setWindowTitle("‚úèÔ∏è S·ª≠a nh√°nh")

        self.setModal(True)
        self.resize(450, 400)

    def _build_ui(self):
        """X√¢y d·ª±ng giao di·ªán"""
        layout = QtWidgets.QVBoxLayout(self)
        layout.setSpacing(15)
        layout.setContentsMargins(20, 20, 20, 20)

        # Header
        header = QtWidgets.QLabel()
        if self.mode == "add":
            header.setText("‚ûï Th√™m nh√°nh m·ªõi v√†o c√¢y th∆∞ m·ª•c")
        else:
            header.setText("‚úèÔ∏è Ch·ªânh s·ª≠a th√¥ng tin nh√°nh")

        header.setStyleSheet("""
            QLabel {
                font-size: 16px;
                font-weight: bold;
                color: #2E86AB;
                padding: 15px;
                background-color: #f8f9fa;
                border-radius: 8px;
                border: 1px solid #dee2e6;
            }
        """)
        layout.addWidget(header)

        # Form container
        form_container = QtWidgets.QWidget()
        form_container.setStyleSheet("""
            QWidget {
                background-color: white;
                border-radius: 8px;
                border: 1px solid #e1e5e9;
            }
        """)

        form_layout = QtWidgets.QFormLayout(form_container)
        form_layout.setSpacing(12)
        form_layout.setContentsMargins(20, 20, 20, 20)

        # Parent selection (ch·ªâ hi·ªán khi th√™m)
        if self.mode == "add":
            self.parent_combo = QtWidgets.QComboBox()
            self.parent_combo.addItem("(Kh√¥ng c√≥ parent - C·∫•p g·ªëc)", None)
            self._load_parent_options()

            parent_label = QtWidgets.QLabel("üìÅ Nh√°nh cha:")
            parent_label.setStyleSheet("font-weight: 500; color: #495057;")
            form_layout.addRow(parent_label, self.parent_combo)

        # T√™n nh√°nh
        self.name_edit = QtWidgets.QLineEdit()
        self.name_edit.setPlaceholderText("Nh·∫≠p t√™n nh√°nh...")

        name_label = QtWidgets.QLabel("üìù T√™n nh√°nh:")
        name_label.setStyleSheet("font-weight: 500; color: #495057;")
        form_layout.addRow(name_label, self.name_edit)

        # C·∫•p ƒë·ªô
        self.level_combo = QtWidgets.QComboBox()
        self.level_combo.addItems(["M√¥n", "L·ªõp", "Ch·ªß ƒë·ªÅ", "D·∫°ng", "M·ª©c ƒë·ªô"])

        level_label = QtWidgets.QLabel("üìä C·∫•p ƒë·ªô:")
        level_label.setStyleSheet("font-weight: 500; color: #495057;")
        form_layout.addRow(level_label, self.level_combo)

        # M√¥ t·∫£
        self.description_edit = QtWidgets.QTextEdit()
        self.description_edit.setMaximumHeight(100)
        self.description_edit.setPlaceholderText("Nh·∫≠p m√¥ t·∫£ chi ti·∫øt...")

        desc_label = QtWidgets.QLabel("üìÑ M√¥ t·∫£:")
        desc_label.setStyleSheet("font-weight: 500; color: #495057;")
        form_layout.addRow(desc_label, self.description_edit)

        # Style cho form inputs
        input_style = """
            QLineEdit, QComboBox, QTextEdit {
                padding: 10px;
                border: 2px solid #e1e5e9;
                border-radius: 6px;
                font-size: 13px;
                background-color: white;
            }
            QLineEdit:focus, QComboBox:focus, QTextEdit:focus {
                border-color: #2E86AB;
                outline: none;
                background-color: #f8fbff;
            }
        """

        self.name_edit.setStyleSheet(input_style)
        self.level_combo.setStyleSheet(input_style)
        self.description_edit.setStyleSheet(input_style)

        if hasattr(self, 'parent_combo'):
            self.parent_combo.setStyleSheet(input_style)

        layout.addWidget(form_container)

        # Buttons
        button_layout = QtWidgets.QHBoxLayout()
        button_layout.setContentsMargins(0, 10, 0, 0)

        cancel_btn = QtWidgets.QPushButton("‚ùå H·ªßy")
        cancel_btn.setFixedSize(100, 40)
        cancel_btn.clicked.connect(self.reject)
        cancel_btn.setStyleSheet("""
            QPushButton {
                background-color: #6c757d;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 6px;
                font-weight: 600;
                font-size: 13px;
            }
            QPushButton:hover {
                background-color: #5a6268;
            }
        """)

        # Save button
        if self.mode == "add":
            save_btn = QtWidgets.QPushButton("‚ûï Th√™m")
            save_btn.setStyleSheet("""
                QPushButton {
                    background-color: #28a745;
                    color: white;
                    border: none;
                    padding: 10px 20px;
                    border-radius: 6px;
                    font-weight: 600;
                    font-size: 13px;
                }
                QPushButton:hover {
                    background-color: #218838;
                }
            """)
        else:
            save_btn = QtWidgets.QPushButton("üíæ L∆∞u")
            save_btn.setStyleSheet("""
                QPushButton {
                    background-color: #007bff;
                    color: white;
                    border: none;
                    padding: 10px 20px;
                    border-radius: 6px;
                    font-weight: 600;
                    font-size: 13px;
                }
                QPushButton:hover {
                    background-color: #0056b3;
                }
            """)

        save_btn.setFixedSize(100, 40)
        save_btn.clicked.connect(self.accept)
        save_btn.setDefault(True)

        button_layout.addStretch()
        button_layout.addWidget(cancel_btn)
        button_layout.addSpacing(10)
        button_layout.addWidget(save_btn)

        layout.addWidget(QtWidgets.QWidget())
        layout.layout().addLayout(button_layout)

        # Focus v√†o name edit
        self.name_edit.setFocus()

    def _load_parent_options(self):
        """Load danh s√°ch parent c√≥ th·ªÉ ch·ªçn"""
        if self.mode != "add":
            return

        try:
            rows = self.db.execute_query(
                "SELECT id, name, level FROM exercise_tree ORDER BY level, name",
                fetch="all"
            ) or []

            for row in rows:
                # N·∫øu ƒëang edit, kh√¥ng cho ch·ªçn ch√≠nh n√≥ l√†m parent
                if self.mode == "edit" and row["id"] == self.node_id:
                    continue

                display_text = f"{row['name']} ({row['level']})"
                self.parent_combo.addItem(display_text, row["id"])

        except Exception as e:
            print(f"L·ªói load parent options: {e}")

    def set_parent_id(self, parent_id):
        """ƒê·∫∑t parent ƒë∆∞·ª£c ch·ªçn"""
        self.parent_id = parent_id

        if self.mode == "add" and hasattr(self, 'parent_combo'):
            # T√¨m v√† ch·ªçn parent trong combo
            for i in range(self.parent_combo.count()):
                if self.parent_combo.itemData(i) == parent_id:
                    self.parent_combo.setCurrentIndex(i)
                    break

    def _load_data(self):
        """Load d·ªØ li·ªáu n·∫øu ƒëang edit"""
        if self.mode != "edit" or not self.node_id:
            return

        try:
            row = self.db.execute_query(
                "SELECT name, level, description FROM exercise_tree WHERE id = ?",
                (self.node_id,), fetch="one"
            )

            if row:
                self.name_edit.setText(row["name"] or "")

                # Set level
                level = row["level"] or "M√¥n"
                index = self.level_combo.findText(level)
                if index >= 0:
                    self.level_combo.setCurrentIndex(index)

                # Description
                description = row.get('description', '') or ''
                self.description_edit.setPlainText(description)

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu: {e}")

    def accept(self):
        """X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n Save/Add"""
        if not self._validate_input():
            return

        name = self.name_edit.text().strip()
        level = self.level_combo.currentText()
        description = self.description_edit.toPlainText().strip()

        try:
            if self.mode == "add":
                # Th√™m node m·ªõi
                parent_id = None
                if hasattr(self, 'parent_combo'):
                    parent_id = self.parent_combo.currentData()
                elif self.parent_id:
                    parent_id = self.parent_id

                self.db.execute_query(
                    "INSERT INTO exercise_tree (parent_id, name, level, description) VALUES (?, ?, ?, ?)",
                    (parent_id, name, level, description)
                )

                QtWidgets.QMessageBox.information(
                    self, "Th√†nh c√¥ng",
                    f"ƒê√£ th√™m nh√°nh '{name}' th√†nh c√¥ng!"
                )

            else:
                # C·∫≠p nh·∫≠t node
                self.db.execute_query(
                    "UPDATE exercise_tree SET name = ?, level = ?, description = ? WHERE id = ?",
                    (name, level, description, self.node_id)
                )

                QtWidgets.QMessageBox.information(
                    self, "Th√†nh c√¥ng",
                    f"ƒê√£ c·∫≠p nh·∫≠t nh√°nh '{name}' th√†nh c√¥ng!"
                )

            super().accept()

        except Exception as e:
            QtWidgets.QMessageBox.critical(
                self, "L·ªói database",
                f"Kh√¥ng th·ªÉ l∆∞u d·ªØ li·ªáu:\n{str(e)}"
            )

    def _validate_input(self):
        """Validate d·ªØ li·ªáu ƒë·∫ßu v√†o"""
        name = self.name_edit.text().strip()

        if not name:
            QtWidgets.QMessageBox.warning(
                self, "L·ªói",
                "T√™n nh√°nh kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!"
            )
            self.name_edit.setFocus()
            return False

        if len(name) > 100:
            QtWidgets.QMessageBox.warning(
                self, "L·ªói",
                "T√™n nh√°nh kh√¥ng ƒë∆∞·ª£c qu√° 100 k√Ω t·ª±!"
            )
            self.name_edit.setFocus()
            return False

        return True
# ========== CLASS QU·∫¢N L√ù C√ÇY N√ÇNG CAO ========== #
class TreeManagerDialog(QtWidgets.QDialog):
    def __init__(self, db_manager, parent=None):
        super().__init__(parent)
        self.db = db_manager
        self.setWindowTitle("‚öôÔ∏è Qu·∫£n l√Ω c√¢y th∆∞ m·ª•c")
        self.setModal(True)
        self.resize(800, 600)
        self._build_ui()
        self._load_tree_data()

    def _build_ui(self):
        """X√¢y d·ª±ng giao di·ªán"""
        layout = QtWidgets.QVBoxLayout(self)

        # Toolbar
        toolbar = QtWidgets.QToolBar()
        toolbar.setToolButtonStyle(Qt.ToolButtonTextBesideIcon)

        add_action = toolbar.addAction("‚ûï Th√™m nh√°nh")
        add_action.triggered.connect(self._add_node)

        edit_action = toolbar.addAction("‚úèÔ∏è S·ª≠a nh√°nh")
        edit_action.triggered.connect(self._edit_node)

        delete_action = toolbar.addAction("üóëÔ∏è X√≥a nh√°nh")
        delete_action.triggered.connect(self._delete_node)

        toolbar.addSeparator()

        export_action = toolbar.addAction("üì§ Xu·∫•t c·∫•u tr√∫c")
        export_action.triggered.connect(self._export_structure)

        layout.addWidget(toolbar)

        # Tree view
        self.tree_table = QtWidgets.QTreeWidget()
        self.tree_table.setHeaderLabels(["T√™n", "C·∫•p ƒë·ªô", "S·ªë c√¢u h·ªèi", "M√¥ t·∫£"])
        self.tree_table.setColumnWidth(0, 250)
        self.tree_table.setColumnWidth(1, 100)
        self.tree_table.setColumnWidth(2, 100)

        layout.addWidget(self.tree_table)

        # Buttons
        button_layout = QtWidgets.QHBoxLayout()

        close_btn = QtWidgets.QPushButton("ƒê√≥ng")
        close_btn.clicked.connect(self.accept)

        button_layout.addStretch()
        button_layout.addWidget(close_btn)

        layout.addLayout(button_layout)

    def _load_tree_data(self):
        """Load d·ªØ li·ªáu c√¢y"""
        # Implementation t∆∞∆°ng t·ª± refresh_tree nh∆∞ng hi·ªÉn th·ªã trong table
        pass

    def _add_node(self):
        """Th√™m node m·ªõi"""
        dialog = TreeNodeDialog(self.db, mode="add", parent=self)
        if dialog.exec() == QtWidgets.QDialog.Accepted:
            self._load_tree_data()

    def _edit_node(self):
        """S·ª≠a node ƒë∆∞·ª£c ch·ªçn"""
        # Implementation
        pass

    def _delete_node(self):
        """X√≥a node ƒë∆∞·ª£c ch·ªçn"""
        # Implementation
        pass

    def _export_structure(self):
        """Xu·∫•t c·∫•u tr√∫c c√¢y"""
        # Implementation
        pass
# ========== DIALOG XEM ·∫¢NH FULLSCREEN ========== #
class ImageViewerDialog(QtWidgets.QDialog):
    """Dialog xem ·∫£nh fullscreen v·ªõi zoom"""

    def __init__(self, pixmap, parent=None):
        super().__init__(parent)
        self.original_pixmap = pixmap
        self.current_zoom = 1.0

        self.setWindowTitle("üñºÔ∏è Xem ·∫£nh")
        self.setModal(True)
        self.resize(800, 600)

        self._setup_ui()
        self._display_image()

    def _setup_ui(self):
        """Setup UI cho image viewer"""
        layout = QtWidgets.QVBoxLayout(self)

        # Toolbar
        toolbar = QtWidgets.QHBoxLayout()

        zoom_out_btn = QtWidgets.QPushButton("üîç-")
        zoom_out_btn.clicked.connect(self._zoom_out)

        self.zoom_label = QtWidgets.QLabel("100%")
        self.zoom_label.setMinimumWidth(60)
        self.zoom_label.setAlignment(Qt.AlignCenter)

        zoom_in_btn = QtWidgets.QPushButton("üîç+")
        zoom_in_btn.clicked.connect(self._zoom_in)

        fit_btn = QtWidgets.QPushButton("‚õ∂ Fit")
        fit_btn.clicked.connect(self._fit_to_window)

        actual_btn = QtWidgets.QPushButton("1:1")
        actual_btn.clicked.connect(self._actual_size)

        close_btn = QtWidgets.QPushButton("‚ùå ƒê√≥ng")
        close_btn.clicked.connect(self.accept)

        toolbar.addWidget(zoom_out_btn)
        toolbar.addWidget(self.zoom_label)
        toolbar.addWidget(zoom_in_btn)
        toolbar.addWidget(fit_btn)
        toolbar.addWidget(actual_btn)
        toolbar.addStretch()
        toolbar.addWidget(close_btn)

        layout.addLayout(toolbar)

        # Scroll area cho ·∫£nh
        self.scroll_area = QtWidgets.QScrollArea()
        self.scroll_area.setAlignment(Qt.AlignCenter)

        self.image_label = QtWidgets.QLabel()
        self.image_label.setAlignment(Qt.AlignCenter)
        self.scroll_area.setWidget(self.image_label)

        layout.addWidget(self.scroll_area, 1)

    def _display_image(self):
        """Hi·ªÉn th·ªã ·∫£nh v·ªõi zoom hi·ªán t·∫°i"""
        if not self.original_pixmap or self.original_pixmap.isNull():
            return

        size = self.original_pixmap.size() * self.current_zoom
        scaled_pixmap = self.original_pixmap.scaled(
            size, Qt.KeepAspectRatio, Qt.SmoothTransformation
        )

        self.image_label.setPixmap(scaled_pixmap)
        self.zoom_label.setText(f"{int(self.current_zoom * 100)}%")

    def _zoom_in(self):
        """Zoom in"""
        self.current_zoom = min(self.current_zoom * 1.25, 10.0)
        self._display_image()

    def _zoom_out(self):
        """Zoom out"""
        self.current_zoom = max(self.current_zoom / 1.25, 0.1)
        self._display_image()

    def _fit_to_window(self):
        """Fit ·∫£nh v√†o c·ª≠a s·ªï"""
        if not self.original_pixmap or self.original_pixmap.isNull():
            return

        available_size = self.scroll_area.size() - QtCore.QSize(20, 20)
        self.current_zoom = min(
            available_size.width() / self.original_pixmap.width(),
            available_size.height() / self.original_pixmap.height()
        )
        self._display_image()

    def _actual_size(self):
        """Hi·ªÉn th·ªã k√≠ch th∆∞·ªõc th·ª±c"""
        self.current_zoom = 1.0
        self._display_image()