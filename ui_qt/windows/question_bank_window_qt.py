# ui_qt/windows/question_bank_window_qt.py
# Imports ph·∫£i ƒë√∫ng th·ª© t·ª±
from __future__ import annotations
import json
import os
import re
from typing import List, Dict
from datetime import datetime
from PySide6 import QtCore, QtGui, QtWidgets
from PySide6.QtCore import Qt
from PySide6.QtWidgets import QMenu
from PySide6.QtGui import QKeySequence, QShortcut

# Imports n√†y c√≥ th·ªÉ optional
try:
    from docx.oxml.text.paragraph import CT_P
    from docx.oxml.table import CT_Tbl
except ImportError:
    # B·ªè qua n·∫øu ch∆∞a c√†i python-docx
    pass

# TH√äM v√†o ƒë·∫ßu file question_bank_window_qt.py (sau c√°c import)
import re


# TH√äM class helper cho MathJax
class MathJaxHelper:
    """Helper class ƒë·ªÉ x·ª≠ l√Ω c√¥ng th·ª©c to√°n h·ªçc MathJax"""

    @staticmethod
    def add_math_toolbar(text_widget):
        """Th√™m toolbar v·ªõi c√°c k√Ω hi·ªáu to√°n h·ªçc th∆∞·ªùng d√πng"""
        if not hasattr(text_widget, 'math_toolbar_added'):
            # T·∫°o tooltip v·ªõi h∆∞·ªõng d·∫´n
            tooltip = """H·ªó tr·ª£ c√¥ng th·ª©c to√°n h·ªçc:
‚Ä¢ Inline: $x^2 + y^2 = z^2$
‚Ä¢ Block: $$\\frac{-b \\pm \\sqrt{b^2-4ac}}{2a}$$
‚Ä¢ Ph√¢n s·ªë: \\frac{t·ª≠}{m·∫´u}
‚Ä¢ CƒÉn b·∫≠c: \\sqrt{x} ho·∫∑c \\sqrt[n]{x}
‚Ä¢ M≈©: x^{2} ho·∫∑c x_{i}
‚Ä¢ T√≠ch ph√¢n: \\int_{a}^{b} f(x)dx
‚Ä¢ T·ªïng: \\sum_{i=1}^{n} x_i"""

            text_widget.setToolTip(tooltip)
            text_widget.math_toolbar_added = True

    @staticmethod
    def preview_math_text(text):
        """Chuy·ªÉn ƒë·ªïi text c√≥ MathJax th√†nh HTML preview"""
        if not text:
            return ""

        # Thay th·∫ø c√°c c√¥ng th·ª©c inline $...$
        text = re.sub(r'\$([^$]+)\$', r'<span style="color: #2E8B57; font-style: italic;">[\1]</span>', text)

        # Thay th·∫ø c√°c c√¥ng th·ª©c block $$...$$
        text = re.sub(r'\$\$([^$]+)\$\$',
                      r'<div style="text-align: center; color: #2E8B57; font-style: italic; padding: 10px;">[C√¥ng th·ª©c: \1]</div>',
                      text)

        # Highlight c√°c k√Ω hi·ªáu LaTeX ph·ªï bi·∫øn
        latex_symbols = {
            r'\\frac': 'ph√¢n s·ªë',
            r'\\sqrt': 'cƒÉn b·∫≠c',
            r'\\int': 't√≠ch ph√¢n',
            r'\\sum': 't·ªïng',
            r'\\alpha': 'Œ±',
            r'\\beta': 'Œ≤',
            r'\\gamma': 'Œ≥',
            r'\\Delta': 'Œî',
            r'\\pi': 'œÄ'
        }

        for latex, replacement in latex_symbols.items():
            text = text.replace(latex, f'<strong style="color: #FF6347;">{replacement}</strong>')

        return text

    @staticmethod
    def insert_common_formulas(text_widget):
        """Ch√®n c√°c c√¥ng th·ª©c to√°n h·ªçc th∆∞·ªùng d√πng"""
        current_text = text_widget.toPlainText() if hasattr(text_widget, 'toPlainText') else text_widget.text()
        cursor_pos = text_widget.textCursor().position() if hasattr(text_widget, 'textCursor') else len(current_text)

        # Menu popup v·ªõi c√°c c√¥ng th·ª©c
        menu = QtWidgets.QMenu()

        formulas = [
            ("Ph√¢n s·ªë", "\\frac{t·ª≠}{m·∫´u}"),
            ("CƒÉn b·∫≠c hai", "\\sqrt{x}"),
            ("CƒÉn b·∫≠c n", "\\sqrt[n]{x}"),
            ("M≈©", "x^{n}"),
            ("Ch·ªâ s·ªë d∆∞·ªõi", "x_{i}"),
            ("T√≠ch ph√¢n", "\\int_{a}^{b} f(x)dx"),
            ("T·ªïng", "\\sum_{i=1}^{n} x_i"),
            ("Gi·ªõi h·∫°n", "\\lim_{x \\to 0} f(x)"),
            ("Alpha", "\\alpha"),
            ("Beta", "\\beta"),
            ("Pi", "\\pi"),
            ("Delta", "\\Delta")
        ]

        for name, formula in formulas:
            action = menu.addAction(f"{name}: ${formula}$")
            action.triggered.connect(lambda checked, f=formula: text_widget.insertPlainText(f"${f}$"))

        # Hi·ªÉn th·ªã menu t·∫°i v·ªã tr√≠ chu·ªôt
        menu.exec(QtWidgets.QCursor.pos())


# TH√äM v√†o __init__() c·ªßa QuestionBankWindowQt (sau khi t·∫°o UI)
def setup_math_support(self):
    """Thi·∫øt l·∫≠p h·ªó tr·ª£ MathJax cho t·∫•t c·∫£ text widgets"""
    # S·∫Ω ƒë∆∞·ª£c g·ªçi khi t·∫°o c√°c text widget
    pass


# C·∫¨P NH·∫¨T ph∆∞∆°ng th·ª©c update_preview() ƒë·ªÉ h·ªó tr·ª£ MathJax
def update_preview(self):
    """C·∫≠p nh·∫≠t preview v·ªõi h·ªó tr·ª£ MathJax"""
    if not hasattr(self, 'preview_area'):
        return

    try:
        # L·∫•y n·ªôi dung c√¢u h·ªèi
        content = ""
        if hasattr(self, 'content_text'):
            content = self.content_text.toPlainText()

        # T·∫°o HTML preview
        html_content = "<div style='font-family: Arial; padding: 10px;'>"

        # N·ªôi dung c√¢u h·ªèi
        if content:
            preview_content = MathJaxHelper.preview_math_text(content)
            html_content += f"<h3>üìù C√¢u h·ªèi:</h3><p>{preview_content}</p>"

        # Preview theo lo·∫°i c√¢u h·ªèi
        if hasattr(self, 'multiple_choice_rb') and self.multiple_choice_rb.isChecked():
            html_content += self._preview_multiple_choice()
        elif hasattr(self, 'true_false_rb') and self.true_false_rb.isChecked():
            html_content += self._preview_true_false()
        elif hasattr(self, 'essay_rb') and self.essay_rb.isChecked():
            html_content += self._preview_essay()

        html_content += "</div>"

        # Hi·ªÉn th·ªã preview
        self.preview_area.setHtml(html_content)

    except Exception as e:
        print(f"L·ªói update preview: {e}")


# TH√äM c√°c ph∆∞∆°ng th·ª©c preview cho t·ª´ng lo·∫°i c√¢u h·ªèi
def _preview_multiple_choice(self):
    """Preview cho c√¢u h·ªèi tr·∫Øc nghi·ªám"""
    html = "<h4>üìã ƒê√°p √°n:</h4><ul>"

    if hasattr(self, 'option_entries'):
        for letter in ['A', 'B', 'C', 'D']:
            option_text = self.option_entries[letter].text().strip()
            if option_text:
                preview_text = MathJaxHelper.preview_math_text(option_text)

                # Highlight ƒë√°p √°n ƒë√∫ng n·∫øu ƒë√£ ch·ªçn
                is_correct = False
                if hasattr(self, 'correct_group'):
                    for button in self.correct_group.buttons():
                        if button.isChecked() and button.text() == letter:
                            is_correct = True
                            break

                style = "color: green; font-weight: bold;" if is_correct else ""
                html += f"<li style='{style}'><strong>{letter}.</strong> {preview_text}</li>"

    html += "</ul>"
    return html


def _preview_true_false(self):
    """Preview cho c√¢u h·ªèi ƒë√∫ng/sai"""
    html = "<h4>üìã C√°c m·ªánh ƒë·ªÅ:</h4>"

    if hasattr(self, 'statement_entries'):
        for i in range(1, 5):
            statement_text = self.statement_entries[i].text().strip()
            if statement_text:
                preview_text = MathJaxHelper.preview_math_text(statement_text)
                is_correct = self.statement_checkboxes[i].isChecked()

                status = "‚úÖ ƒê√∫ng" if is_correct else "‚ùå Sai"
                color = "green" if is_correct else "red"

                html += f"<p><strong>{i}.</strong> {preview_text} "
                html += f"<span style='color: {color}; font-weight: bold;'>[{status}]</span></p>"

                # Hi·ªÉn th·ªã l·ªùi gi·∫£i n·∫øu c√≥
                if hasattr(self, 'explanation_entries'):
                    explanation = self.explanation_entries[i].toPlainText().strip()
                    if explanation:
                        preview_explanation = MathJaxHelper.preview_math_text(explanation)
                        html += f"<blockquote style='margin-left: 20px; color: #666; font-style: italic;'>üí° {preview_explanation}</blockquote>"

    return html


def _preview_essay(self):
    """Preview cho c√¢u h·ªèi t·ª± lu·∫≠n"""
    html = ""

    if hasattr(self, 'detailed_answer'):
        answer_text = self.detailed_answer.toPlainText().strip()
        if answer_text:
            preview_answer = MathJaxHelper.preview_math_text(answer_text)
            html += f"<h4>üìñ ƒê√°p √°n chi ti·∫øt:</h4><div style='background: #f9f9f9; padding: 10px; border-left: 3px solid #007bff;'>{preview_answer}</div>"

    return html
# Enhanced pattern matching cho ƒë·ªãnh d·∫°ng c√¢u h·ªèi c·ªßa b·∫°n
class FlexiblePatternMatcher:
    def __init__(self):
        # Patterns cho c√¢u h·ªèi tr·∫Øc nghi·ªám - ƒë·ªãnh d·∫°ng: "1. N·ªôi dung c√¢u h·ªèi..."
        self.multiple_choice_patterns = [
            r'^(\d+)\.\s*(.*)',  # ƒê·ªãnh d·∫°ng ch√≠nh: "1. Cho..."
            r'^(?:c√¢u\s*(?:h·ªèi)?\s*)?(\d+)\s*[:.)\-‚Äì‚Äî]\s*(.*)',
            r'^(?:question\s*)?(\d+)\s*[:.)\-‚Äì‚Äî]\s*(.*)',
        ]

        # Patterns cho ph·∫ßn header c·ªßa c√¢u ƒë√∫ng/sai
        self.true_false_section_patterns = [
            r'^PH·∫¶N\s*II\.\s*C√¢u\s*tr·∫Øc\s*nghi·ªám\s*ƒë√∫ng\s*sai',
            r'^(\d+)\.\s*(.*)',  # C√¢u h·ªèi ch√≠nh trong ph·∫ßn ƒë√∫ng/sai
        ]

        # Patterns cho c√°c ph·∫ßn a), b), c), d) trong c√¢u ƒë√∫ng/sai - c√≥ th·ªÉ c√≥ d·∫•u X
        self.sub_question_patterns = [
            r'^([a-e])\)\s*(.*?)\s*X?\s*$',  # a) N·ªôi dung (c√≥ th·ªÉ c√≥ X ·ªü cu·ªëi)
            r'^([a-e])\)\s*(.*)',
        ]

        # Patterns cho c√¢u tr·∫£ l·ªùi ng·∫Øn
        self.short_answer_patterns = [
            r'^PH·∫¶N\s*III\.\s*C√¢u\s*tr·∫Øc\s*nghi·ªám\s*tr·∫£\s*l·ªùi\s*ng·∫Øn',
            r'^(\d+)\.\s*(.*)',  # C√¢u h·ªèi ch√≠nh trong ph·∫ßn tr·∫£ l·ªùi ng·∫Øn
            r'^K·∫øt\s*qu·∫£\s*[:.]?\s*(.+)',  # "K·∫øt qu·∫£: 10"
        ]

        # Patterns cho options tr·∫Øc nghi·ªám - ƒë·ªãnh d·∫°ng: "A. N·ªôi dung" v·ªõi c√≥ th·ªÉ c√≥ g·∫°ch ch√¢n
        self.option_patterns = [
            r'^\*\*([A-E])\.\*\*\s*(.*)',  # **A.** N·ªôi dung (ƒë·ªãnh d·∫°ng bold)
            r'^([A-E])\.\s*(.*)',  # A. N·ªôi dung (ƒë·ªãnh d·∫°ng th∆∞·ªùng)
            r'^([A-E])\s+(.*)',
        ]

        # Patterns cho ƒë√°p √°n ƒë√∫ng - nh·∫≠n di·ªán g·∫°ch ch√¢n ho·∫∑c bold
        self.answer_patterns = [
            r'^\*\*\[([A-E])\.\]\{\.underline\}\*\*',  # **[A.]{.underline}** (ƒë√°p √°n ƒë√∫ng)
            r'^\[([A-E])\.\]\{\.underline\}',  # [A.]{.underline} (ƒë√°p √°n ƒë√∫ng)
            r'^\*\*([A-E])\.\*\*.*\{\.mark\}',  # **A.** v·ªõi {.mark} (ƒë√°p √°n ƒë√∫ng)
        ]

    # Nh·∫≠n di·ªán c√¢u h·ªèi tr·∫Øc nghi·ªám 4 ƒë√°p √°n
    def smart_detect_question(self, line, question_type='multiple_choice', context_lines=None, line_index=0):
        """Ph√°t hi·ªán c√¢u h·ªèi v·ªõi confidence score theo lo·∫°i"""
        line_clean = line.strip()

        if question_type == 'multiple_choice':
            return self._detect_multiple_choice(line_clean)
        elif question_type == 'true_false':
            return self._detect_true_false_question(line_clean, context_lines, line_index)
        elif question_type == 'short_answer':
            return self._detect_short_answer(line_clean)

        return {'is_question': False, 'confidence': 0}

    def _detect_multiple_choice(self, line):
        """Ph√°t hi·ªán c√¢u h·ªèi tr·∫Øc nghi·ªám th√¥ng th∆∞·ªùng"""
        for pattern in self.multiple_choice_patterns:
            match = re.match(pattern, line, re.IGNORECASE | re.UNICODE)
            if match:
                return {
                    'is_question': True,
                    'question_type': 'multiple_choice',
                    'number': match.group(1),
                    'content': match.group(2),
                    'confidence': 0.9,
                    'pattern_used': pattern
                }
        return {'is_question': False, 'confidence': 0}

    def _detect_true_false_question(self, line, context_lines=None, line_index=0):
        """Ph√°t hi·ªán c√¢u h·ªèi ƒë√∫ng/sai v·ªõi c√°c ph·∫ßn a), b), c), d)"""
        # Ki·ªÉm tra xem c√≥ ph·∫£i l√† c√¢u h·ªèi ch√≠nh
        for pattern in self.true_false_section_patterns:
            match = re.match(pattern, line, re.IGNORECASE | re.UNICODE)
            if match:
                return {
                    'is_question': True,
                    'question_type': 'true_false',
                    'number': match.group(1) if len(match.groups()) > 0 else None,
                    'content': match.group(2) if len(match.groups()) > 1 else line,
                    'confidence': 0.9,
                    'has_sub_parts': True,
                    'pattern_used': pattern
                }
        return {'is_question': False, 'confidence': 0}

    def _detect_short_answer(self, line):
        """Ph√°t hi·ªán c√¢u h·ªèi tr·∫£ l·ªùi ng·∫Øn"""
        for pattern in self.short_answer_patterns:
            match = re.match(pattern, line, re.IGNORECASE | re.UNICODE)
            if match:
                return {
                    'is_question': True,
                    'question_type': 'short_answer',
                    'number': match.group(1) if len(match.groups()) > 0 else None,
                    'content': match.group(2) if len(match.groups()) > 1 else line,
                    'confidence': 0.9,
                    'pattern_used': pattern
                }
        return {'is_question': False, 'confidence': 0}

    # Nh·∫≠n di·ªán c√°c ƒë√°p √°n A, B, C, D
    def smart_detect_option(self, line):
        """Ph√°t hi·ªán ƒë√°p √°n A, B, C, D v·ªõi x·ª≠ l√Ω g·∫°ch ch√¢n"""
        line_clean = line.strip()

        for pattern in self.option_patterns:
            match = re.match(pattern, line_clean, re.IGNORECASE | re.UNICODE)
            if match:
                return {
                    'is_option': True,
                    'label': match.group(1),
                    'text': match.group(2),
                    'confidence': 0.9
                }
        return {'is_option': False, 'confidence': 0}

    # Nh·∫≠n di·ªán ƒë√°p √°n ƒë√∫ng t·ª´ g·∫°ch ch√¢n ho·∫∑c bold
    def detect_correct_answer_from_format(self, line):
        """Ph√°t hi·ªán ƒë√°p √°n ƒë√∫ng t·ª´ ƒë·ªãnh d·∫°ng g·∫°ch ch√¢n ho·∫∑c bold"""
        for pattern in self.answer_patterns:
            match = re.search(pattern, line)
            if match:
                return {
                    'is_correct': True,
                    'answer': match.group(1),
                    'confidence': 0.95
                }
        return {'is_correct': False, 'confidence': 0}

    # Nh·∫≠n di·ªán sub-question cho c√¢u ƒë√∫ng/sai
    def detect_sub_question(self, line):
        """Ph√°t hi·ªán c√°c ph·∫ßn a), b), c), d) v√† tr·∫°ng th√°i ƒê√∫ng/Sai"""
        line_clean = line.strip()

        for pattern in self.sub_question_patterns:
            match = re.match(pattern, line_clean, re.IGNORECASE | re.UNICODE)
            if match:
                content = match.group(2).strip()

                return {
                    'is_sub_question': True,
                    'label': match.group(1) + ')',
                    'content': content,
                    'confidence': 0.9
                }
        return {'is_sub_question': False, 'confidence': 0}

    # Nh·∫≠n di·ªán k·∫øt qu·∫£ cho c√¢u tr·∫£ l·ªùi ng·∫Øn
    def detect_short_answer_result(self, line):
        """Ph√°t hi·ªán k·∫øt qu·∫£ cho c√¢u tr·∫£ l·ªùi ng·∫Øn"""
        line_clean = line.strip()

        # Pattern "K·∫øt qu·∫£: 10"
        result_pattern = r'^K·∫øt\s*qu·∫£\s*[:.]?\s*(.+)'
        match = re.match(result_pattern, line_clean, re.IGNORECASE | re.UNICODE)
        if match:
            return {
                'is_result': True,
                'result': match.group(1).strip(),
                'confidence': 0.95
            }
        return {'is_result': False, 'confidence': 0}

    # Nh·∫≠n di·ªán ph·∫ßn header (PH·∫¶N I, II, III)
    def detect_section_header(self, line):
        """Ph√°t hi·ªán c√°c ph·∫ßn PH·∫¶N I, II, III"""
        section_patterns = [
            r'^PH·∫¶N\s*I\.\s*C√¢u\s*tr·∫Øc\s*nghi·ªám\s*v·ªõi\s*nhi·ªÅu\s*ph∆∞∆°ng\s*√°n',
            r'^PH·∫¶N\s*II\.\s*C√¢u\s*tr·∫Øc\s*nghi·ªám\s*ƒë√∫ng\s*sai',
            r'^PH·∫¶N\s*III\.\s*C√¢u\s*tr·∫Øc\s*nghi·ªám\s*tr·∫£\s*l·ªùi\s*ng·∫Øn'
        ]

        for i, pattern in enumerate(section_patterns):
            if re.match(pattern, line.strip(), re.IGNORECASE | re.UNICODE):
                section_types = ['multiple_choice', 'true_false', 'short_answer']
                return {
                    'is_section': True,
                    'section_type': section_types[i],
                    'section_number': i + 1,
                    'confidence': 1.0
                }
        return {'is_section': False, 'confidence': 0}
# Enhanced pattern matching cho 3 d·∫°ng c√¢u h·ªèi kh√°c nhau

# Validation n√¢ng cao v·ªõi scoring system
class AdvancedQuestionValidator:
    def __init__(self):
        self.min_question_length = 10
        self.max_question_length = 1000
        self.min_option_length = 1
        self.max_option_length = 200

        # T·ª´ kh√≥a nghi ng·ªù
        self.suspicious_keywords = [
            'lorem ipsum', 'test', 'sample', 'example only',
            'placeholder', 'temp', 'xxx', '???'
        ]

        # Patterns kh√¥ng h·ª£p l·ªá
        self.invalid_patterns = [
            r'^[.\-_\s]*$',  # Ch·ªâ k√Ω t·ª± ƒë·∫∑c bi·ªát
            r'^\d+$',  # Ch·ªâ s·ªë
            r'^[A-E]$',  # Ch·ªâ m·ªôt ch·ªØ c√°i
        ]

    # Validation to√†n di·ªán v·ªõi scoring system
    def comprehensive_validate(self, question_data, line_number):
        """Validation to√†n di·ªán v·ªõi scoring system"""

        validation_result = {
            'valid': True,
            'score': 100,  # ƒêi·ªÉm ch·∫•t l∆∞·ª£ng
            'errors': [],
            'warnings': [],
            'suggestions': []
        }

        # 1. Content validation
        content = question_data.get('content', '').strip()

        if not content:
            validation_result['errors'].append(f"D√≤ng {line_number}: Thi·∫øu n·ªôi dung c√¢u h·ªèi")
            validation_result['valid'] = False
            validation_result['score'] -= 50
        elif len(content) < self.min_question_length:
            validation_result['warnings'].append(f"D√≤ng {line_number}: N·ªôi dung qu√° ng·∫Øn ({len(content)} k√Ω t·ª±)")
            validation_result['score'] -= 20
        elif len(content) > self.max_question_length:
            validation_result['warnings'].append(f"D√≤ng {line_number}: N·ªôi dung qu√° d√†i")
            validation_result['score'] -= 10

        # 2. Options validation
        options = question_data.get('options', [])

        if len(options) < 2:
            validation_result['errors'].append(f"D√≤ng {line_number}: C·∫ßn √≠t nh·∫•t 2 ƒë√°p √°n")
            validation_result['valid'] = False
            validation_result['score'] -= 30
        elif len(options) > 5:
            validation_result['warnings'].append(f"D√≤ng {line_number}: Qu√° nhi·ªÅu ƒë√°p √°n ({len(options)})")
            validation_result['score'] -= 5

        # Check option quality
        for i, option in enumerate(options):
            option_text = option.get('text', '').strip()
            label = chr(65 + i)  # A, B, C, D, E

            if not option_text:
                validation_result['errors'].append(f"D√≤ng {line_number}: ƒê√°p √°n {label} tr·ªëng")
                validation_result['valid'] = False
                validation_result['score'] -= 15
            elif len(option_text) < self.min_option_length:
                validation_result['warnings'].append(f"D√≤ng {line_number}: ƒê√°p √°n {label} qu√° ng·∫Øn")
                validation_result['score'] -= 5

        # 3. Similarity check between options
        if len(options) >= 2:
            similarity_score = self.check_option_similarity(options)
            if similarity_score > 0.8:
                validation_result['warnings'].append(f"D√≤ng {line_number}: C√°c ƒë√°p √°n qu√° gi·ªëng nhau")
                validation_result['score'] -= 15

        # 4. Answer validation
        correct_answer = question_data.get('answer', '').upper()
        if not correct_answer:
            validation_result['errors'].append(f"D√≤ng {line_number}: Thi·∫øu ƒë√°p √°n ƒë√∫ng")
            validation_result['valid'] = False
            validation_result['score'] -= 25
        elif correct_answer not in 'ABCDE'[:len(options)]:
            validation_result['errors'].append(f"D√≤ng {line_number}: ƒê√°p √°n ƒë√∫ng '{correct_answer}' kh√¥ng h·ª£p l·ªá")
            validation_result['valid'] = False
            validation_result['score'] -= 25

        # 5. Content quality checks
        self.check_content_quality(content, validation_result, line_number)

        # 6. Suggestions for improvement
        if validation_result['score'] < 80:
            validation_result['suggestions'].append("C√¢n nh·∫Øc ki·ªÉm tra l·∫°i n·ªôi dung c√¢u h·ªèi")

        return validation_result

    # Ki·ªÉm tra ƒë·ªô t∆∞∆°ng t·ª± gi·ªØa c√°c ƒë√°p √°n
    def check_option_similarity(self, options):
        """Ki·ªÉm tra ƒë·ªô t∆∞∆°ng t·ª± gi·ªØa c√°c ƒë√°p √°n"""
        from difflib import SequenceMatcher

        if len(options) < 2:
            return 0

        similarities = []
        for i in range(len(options)):
            for j in range(i + 1, len(options)):
                text1 = options[i].get('text', '').lower()
                text2 = options[j].get('text', '').lower()
                sim = SequenceMatcher(None, text1, text2).ratio()
                similarities.append(sim)

        return max(similarities) if similarities else 0

    # Ki·ªÉm tra ch·∫•t l∆∞·ª£ng n·ªôi dung
    def check_content_quality(self, content, validation_result, line_number):
        """Ki·ªÉm tra ch·∫•t l∆∞·ª£ng n·ªôi dung"""
        content_lower = content.lower()

        # Check suspicious content
        for keyword in self.suspicious_keywords:
            if keyword in content_lower:
                validation_result['warnings'].append(f"D√≤ng {line_number}: N·ªôi dung nghi ng·ªù ch·ª©a '{keyword}'")
                validation_result['score'] -= 10

        # Check invalid patterns
        for pattern in self.invalid_patterns:
            if re.match(pattern, content):
                validation_result['errors'].append(f"D√≤ng {line_number}: N·ªôi dung kh√¥ng h·ª£p l·ªá")
                validation_result['valid'] = False
                validation_result['score'] -= 30
                break

        # Grammar hints (basic)
        if content.count('?') == 0 and any(word in content_lower for word in ['g√¨', 'n√†o', 't√≠nh', 't√¨m']):
            validation_result['suggestions'].append(f"D√≤ng {line_number}: C√≥ th·ªÉ thi·∫øu d·∫•u h·ªèi")
            validation_result['score'] -= 5
# Progress dialog v·ªõi real-time feedback cho import
class ImportProgressDialog(QtWidgets.QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("üîÑ ƒêang import c√¢u h·ªèi...")
        self.setModal(True)
        self.resize(600, 400)
        self.setup_ui()

    def setup_ui(self):
        layout = QtWidgets.QVBoxLayout(self)

        # Header info
        self.status_label = QtWidgets.QLabel("ƒêang kh·ªüi t·∫°o...")
        self.status_label.setStyleSheet("font-weight: bold; color: #2c3e50;")
        layout.addWidget(self.status_label)

        # Progress bar
        self.progress_bar = QtWidgets.QProgressBar()
        self.progress_bar.setTextVisible(True)
        layout.addWidget(self.progress_bar)

        # Statistics panel
        stats_group = QtWidgets.QGroupBox("üìä Th·ªëng k√™")
        stats_layout = QtWidgets.QGridLayout(stats_group)

        self.questions_found_label = QtWidgets.QLabel("0")
        self.questions_valid_label = QtWidgets.QLabel("0")
        self.errors_count_label = QtWidgets.QLabel("0")
        self.warnings_count_label = QtWidgets.QLabel("0")

        stats_layout.addWidget(QtWidgets.QLabel("C√¢u h·ªèi t√¨m th·∫•y:"), 0, 0)
        stats_layout.addWidget(self.questions_found_label, 0, 1)
        stats_layout.addWidget(QtWidgets.QLabel("C√¢u h·ªèi h·ª£p l·ªá:"), 0, 2)
        stats_layout.addWidget(self.questions_valid_label, 0, 3)
        stats_layout.addWidget(QtWidgets.QLabel("L·ªói:"), 1, 0)
        stats_layout.addWidget(self.errors_count_label, 1, 1)
        stats_layout.addWidget(QtWidgets.QLabel("C·∫£nh b√°o:"), 1, 2)
        stats_layout.addWidget(self.warnings_count_label, 1, 3)

        layout.addWidget(stats_group)

        # Log area v·ªõi tabs
        log_tabs = QtWidgets.QTabWidget()

        # Tab 1: Live processing
        self.live_log = QtWidgets.QTextEdit()
        self.live_log.setMaximumHeight(150)
        self.live_log.setReadOnly(True)
        log_tabs.addTab(self.live_log, "üîÑ Live")

        # Tab 2: Errors
        self.error_log = QtWidgets.QTextEdit()
        self.error_log.setReadOnly(True)
        self.error_log.setStyleSheet("color: #e74c3c;")
        log_tabs.addTab(self.error_log, "‚ùå L·ªói")

        # Tab 3: Warnings
        self.warning_log = QtWidgets.QTextEdit()
        self.warning_log.setReadOnly(True)
        self.warning_log.setStyleSheet("color: #f39c12;")
        log_tabs.addTab(self.warning_log, "‚ö†Ô∏è C·∫£nh b√°o")

        layout.addWidget(log_tabs)

        # Control buttons
        button_layout = QtWidgets.QHBoxLayout()

        self.pause_btn = QtWidgets.QPushButton("‚è∏Ô∏è T·∫°m d·ª´ng")
        self.pause_btn.clicked.connect(self.toggle_pause)

        self.cancel_btn = QtWidgets.QPushButton("‚ùå H·ªßy")
        self.cancel_btn.clicked.connect(self.cancel_import)

        self.details_btn = QtWidgets.QPushButton("üìã Chi ti·∫øt")
        self.details_btn.clicked.connect(self.show_details)
        self.details_btn.setVisible(False)

        button_layout.addWidget(self.pause_btn)
        button_layout.addWidget(self.cancel_btn)
        button_layout.addWidget(self.details_btn)
        button_layout.addStretch()

        layout.addLayout(button_layout)

    # Update progress v·ªõi detailed stats
    def update_progress(self, current, total, status, stats=None):
        """Update progress v·ªõi detailed stats"""

        # Update progress bar
        self.progress_bar.setMaximum(total)
        self.progress_bar.setValue(current)
        self.progress_bar.setFormat(f"{current}/{total} ({current / total * 100:.1f}%)")

        # Update status
        self.status_label.setText(status)

        # Update live log
        self.live_log.append(f"[{current:03d}] {status}")

        # Update statistics
        if stats:
            self.questions_found_label.setText(str(stats.get('found', 0)))
            self.questions_valid_label.setText(str(stats.get('valid', 0)))
            self.errors_count_label.setText(str(stats.get('errors', 0)))
            self.warnings_count_label.setText(str(stats.get('warnings', 0)))

            # Update error/warning logs
            if 'new_errors' in stats:
                for error in stats['new_errors']:
                    self.error_log.append(error)

            if 'new_warnings' in stats:
                for warning in stats['new_warnings']:
                    self.warning_log.append(warning)

        # Auto-scroll to bottom
        self.live_log.verticalScrollBar().setValue(
            self.live_log.verticalScrollBar().maximum()
        )

        # Process events to keep UI responsive
        QtWidgets.QApplication.processEvents()

    def toggle_pause(self):
        """Toggle pause/resume import"""
        # Implementation for pause/resume
        pass

    def cancel_import(self):
        """Cancel import process"""
        self.reject()

    def show_details(self):
        """Show detailed import results"""
        pass
class QuestionBankWindowQt(QtWidgets.QWidget):
    """
    PySide6 - Ng√¢n h√†ng c√¢u h·ªèi
    - Tr√°i: C√¢y th∆∞ m·ª•c (exercise_tree)
    - Gi·ªØa: Danh s√°ch c√¢u h·ªèi
    - Ph·∫£i: Chi ti·∫øt c√¢u h·ªèi + ƒë√°p √°n A-E
    - Thanh c·∫•u h√¨nh: M√¥n / L·ªõp / Ch·ªß ƒë·ªÅ / D·∫°ng / M·ª©c ƒë·ªô, T√¨m ki·∫øm, Nh·∫≠p t·ª´ Word
    """
    def __init__(self, db_manager, parent=None):
        super().__init__(parent)
        self.db = db_manager
        self.setObjectName("QuestionBankWindowQt")
        self.setWindowTitle("Ng√¢n h√†ng c√¢u h·ªèi")
        self.resize(1200, 680)

        # ƒë·∫£m b·∫£o b·∫£ng t·ªìn t·∫°i (an to√†n n·∫øu CSDL c≈©)
        self._ensure_tables()

        self.current_question_id: int | None = None
        self.tree_nodes: Dict[str, int] = {}  # QTreeWidgetItem->id

        root = QtWidgets.QVBoxLayout(self)

        # T·∫°o toolbar ch√≠nh v·ªõi nh√≥m ch·ª©c nƒÉng hi·ªán ƒë·∫°i
        main_toolbar = QtWidgets.QToolBar()
        main_toolbar.setToolButtonStyle(Qt.ToolButtonTextBesideIcon)
        main_toolbar.setMovable(False)
        main_toolbar.setStyleSheet("""
                    QToolBar { 
                        background: #f8f9fa; 
                        border: 1px solid #dee2e6; 
                        spacing: 8px; 
                        padding: 4px;
                    }
                    QToolBar::separator { 
                        background: #dee2e6; 
                        width: 2px; 
                        margin: 0 4px;
                    }
                """)
        root.addWidget(main_toolbar)

        # Nh√≥m qu·∫£n l√Ω c√¢y
        toggle_action = main_toolbar.addAction("üå≤ ·∫®n/Hi·ªán c√¢y")
        toggle_action.triggered.connect(self.toggle_tree_panel)

        manage_action = main_toolbar.addAction("‚öôÔ∏è Qu·∫£n l√Ω c√¢y")
        manage_action.triggered.connect(self.open_tree_manager)

        main_toolbar.addSeparator()

        # Nh√≥m t√¨m ki·∫øm v·ªõi widget t√πy ch·ªânh
        search_widget = QtWidgets.QWidget()
        search_layout = QtWidgets.QHBoxLayout(search_widget)
        search_layout.setContentsMargins(0, 0, 0, 0)

        search_layout.addWidget(QtWidgets.QLabel("üîç"))

        self.search_edit = QtWidgets.QLineEdit()
        self.search_edit.setPlaceholderText("T√¨m ki·∫øm c√¢u h·ªèi...")
        self.search_edit.setMinimumWidth(200)
        self.search_edit.setStyleSheet("padding: 4px; border: 1px solid #ced4da; border-radius: 4px;")
        search_layout.addWidget(self.search_edit)

        main_toolbar.addWidget(search_widget)

        search_action = main_toolbar.addAction("T√¨m")
        search_action.triggered.connect(self.search_questions)

        advanced_search_action = main_toolbar.addAction("üîç N√¢ng cao")
        advanced_search_action.triggered.connect(self.show_advanced_search_dialog)

        main_toolbar.addSeparator()

        # Nh√≥m template v√† t·∫°o m·ªõi
        new_action = main_toolbar.addAction("‚ûï T·∫°o m·ªõi")
        new_action.triggered.connect(self.new_question)

        template_action = main_toolbar.addAction("üìù Template")
        template_action.triggered.connect(self.show_template_dialog)

        main_toolbar.addSeparator()

        # Nh√≥m import/export
        import_action = main_toolbar.addAction("üì• Import Word")
        import_action.triggered.connect(self.import_from_word)

        export_action = main_toolbar.addAction("üì§ Export Word")
        export_action.triggered.connect(self.export_to_word)

        export_pdf_action = main_toolbar.addAction("üìÑ Export PDF")
        export_pdf_action.triggered.connect(self.export_to_pdf)

        main_toolbar.addSeparator()

        # Toolbar ph·ª• cho filters
        filter_toolbar = QtWidgets.QToolBar()
        filter_toolbar.setStyleSheet("QToolBar { background: #e9ecef; border: 1px solid #dee2e6; }")
        root.addWidget(filter_toolbar)

        self._create_filter_controls(filter_toolbar)
        # ----------------- splitter 3 c·ªôt -----------------
        split = QtWidgets.QSplitter(Qt.Horizontal)
        root.addWidget(split, 1)

        # --- C·ªôt tr√°i: C√¢y ---
        left = QtWidgets.QWidget()
        left_l = QtWidgets.QVBoxLayout(left)
        left_l.setContentsMargins(6, 6, 6, 6)

        left_l.addWidget(QtWidgets.QLabel("C√¢y th∆∞ m·ª•c"))
        self.tree = QtWidgets.QTreeWidget()
        self.tree.setHeaderHidden(True)
        self.tree.itemSelectionChanged.connect(self.on_tree_select)
        left_l.addWidget(self.tree, 1)

        split.addWidget(left)
        # --- C·ªôt gi·ªØa: Danh s√°ch c√¢u h·ªèi ---
        mid = QtWidgets.QWidget()
        mid_l = QtWidgets.QVBoxLayout(mid)
        mid_l.setContentsMargins(6, 6, 6, 6)

        mid_l.addWidget(QtWidgets.QLabel("Danh s√°ch c√¢u h·ªèi"))
        # B·∫£ng c√¢u h·ªèi v·ªõi nhi·ªÅu t√≠nh nƒÉng c·∫£i ti·∫øn
        self.q_table = QtWidgets.QTableWidget(0, 8)  # Th√™m c·ªôt checkbox v√† actions
        self.question_table = self.q_table
        headers = ["‚òëÔ∏è", "ID", "N·ªôi dung", "S·ªë ƒë√°p √°n", "ƒê√°p √°n ƒë√∫ng", "D·∫°ng", "M·ª©c ƒë·ªô", "üè∑Ô∏è"]
        self.q_table.setHorizontalHeaderLabels(headers)

        # C·∫•u h√¨nh resize mode
        header = self.q_table.horizontalHeader()
        header.setSectionResizeMode(0, QtWidgets.QHeaderView.ResizeToContents)  # Checkbox
        header.setSectionResizeMode(1, QtWidgets.QHeaderView.ResizeToContents)  # ID
        header.setSectionResizeMode(2, QtWidgets.QHeaderView.Stretch)  # N·ªôi dung
        header.setSectionResizeMode(3, QtWidgets.QHeaderView.ResizeToContents)  # S·ªë ƒë√°p √°n
        header.setSectionResizeMode(4, QtWidgets.QHeaderView.ResizeToContents)  # ƒê√°p √°n ƒë√∫ng
        header.setSectionResizeMode(5, QtWidgets.QHeaderView.ResizeToContents)  # D·∫°ng
        header.setSectionResizeMode(6, QtWidgets.QHeaderView.ResizeToContents)  # M·ª©c ƒë·ªô
        header.setSectionResizeMode(7, QtWidgets.QHeaderView.ResizeToContents)  # Tags

        # Cho ph√©p s·∫Øp x·∫øp
        self.q_table.setSortingEnabled(True)

        # Th√™m context menu
        self.q_table.setContextMenuPolicy(Qt.CustomContextMenu)
        self.q_table.customContextMenuRequested.connect(self.show_table_context_menu)

        # C·∫£i ti·∫øn visual
        self.q_table.setAlternatingRowColors(True)
        self.q_table.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.q_table.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)

        # Styling cho b·∫£ng
        self.q_table.setStyleSheet("""
                    QTableWidget {
                        gridline-color: #e9ecef;
                        background-color: white;
                        alternate-background-color: #f8f9fa;
                    }
                    QTableWidget::item {
                        padding: 8px;
                        border-bottom: 1px solid #e9ecef;
                    }
                    QTableWidget::item:selected {
                        background-color: #007bff;
                        color: white;
                    }
                """)

        mid_l.addWidget(self.q_table, 1)
        split.addWidget(mid)
        # K·∫øt n·ªëi signal cho table selection
        self.q_table.itemSelectionChanged.connect(self.on_question_select)

        # --- C·ªôt ph·∫£i: Panel chi ti·∫øt v·ªõi tabs ---
        right_tabs = QtWidgets.QTabWidget()
        right_tabs.setStyleSheet("""
                    QTabWidget::pane {
                        border: 1px solid #dee2e6;
                        background: white;
                    }
                    QTabBar::tab {
                        background: #f8f9fa;
                        padding: 8px 16px;
                        margin-right: 2px;
                        border: 1px solid #dee2e6;
                        border-bottom: none;
                    }
                    QTabBar::tab:selected {
                        background: white;
                        border-bottom: 1px solid white;
                    }
                """)

        # Tab 1: Ch·ªânh s·ª≠a c√¢u h·ªèi
        edit_tab = QtWidgets.QWidget()
        edit_layout = QtWidgets.QVBoxLayout(edit_tab)
        edit_layout.setContentsMargins(10, 10, 10, 10)

        self._create_edit_tab_content(edit_layout)
        right_tabs.addTab(edit_tab, "‚úèÔ∏è Ch·ªânh s·ª≠a")

        # Tab 2: Preview c√¢u h·ªèi
        preview_tab = QtWidgets.QWidget()
        preview_layout = QtWidgets.QVBoxLayout(preview_tab)
        preview_layout.setContentsMargins(10, 10, 10, 10)

        self._create_preview_tab_content(preview_layout)
        right_tabs.addTab(preview_tab, "üëÅÔ∏è Xem tr∆∞·ªõc")

        # Tab 3: Th·ªëng k√™
        stats_tab = QtWidgets.QWidget()
        stats_layout = QtWidgets.QVBoxLayout(stats_tab)
        stats_layout.setContentsMargins(10, 10, 10, 10)

        self._create_stats_tab_content(stats_layout)
        right_tabs.addTab(stats_tab, "üìä Th·ªëng k√™")

        # Tab 4: L·ªãch s·ª≠
        history_tab = QtWidgets.QWidget()
        history_layout = QtWidgets.QVBoxLayout(history_tab)
        history_layout.setContentsMargins(10, 10, 10, 10)

        self._create_history_tab_content(history_layout)
        right_tabs.addTab(history_tab, "üìú L·ªãch s·ª≠")

        split.addWidget(right_tabs)

        split.setSizes([240, 520, 440])

        # init d·ªØ li·ªáu
        self.refresh_tree()
        self.load_available_subjects()
        self.load_available_grades()

        # signal cho combobox
        self.subject_cb.currentIndexChanged.connect(self.load_available_topics)
        self.grade_cb.currentIndexChanged.connect(self.load_available_topics)
        self.topic_cb.currentIndexChanged.connect(self.load_available_types)
        # Th√™m keyboard shortcuts cho tƒÉng nƒÉng su·∫•t
        QShortcut("Ctrl+N", self, self.new_question)
        QShortcut("Ctrl+S", self, self.save_question)
        QShortcut("Ctrl+F", self, self.focus_search)
        QShortcut("Ctrl+Shift+F", self, self.show_advanced_search_dialog)
        QShortcut("Delete", self, self.delete_question)
        QShortcut("Ctrl+D", self, self.duplicate_question)
        QShortcut("F5", self, self.refresh_all)
        QShortcut("Ctrl+E", self, self.export_to_word)
        QShortcut("Ctrl+I", self, self.import_from_word)
        QShortcut("Ctrl+T", self, self.show_template_dialog)

        # K√≠ch ho·∫°t drag & drop
        self.setAcceptDrops(True)
        self.q_table.setDragDropMode(QtWidgets.QAbstractItemView.InternalMove)
        self.q_table.itemSelectionChanged.connect(self.on_question_select)
        self.q_table.itemClicked.connect(self.on_question_select)
        self._setup_tree_management()
    # ====================== DB helpers ======================
    # Th√™m sau d√≤ng 790 (sau ph∆∞∆°ng th·ª©c __init__)
    def _get_row_value(self, row, key, default=""):
        """Helper ƒë·ªÉ l·∫•y gi√° tr·ªã t·ª´ sqlite3.Row m·ªôt c√°ch an to√†n"""
        try:
            value = row[key]
            return value if value is not None else default
        except (KeyError, TypeError, IndexError):
            return default

    def _get_row_int(self, row, key, default=0):
        """Helper ƒë·ªÉ l·∫•y gi√° tr·ªã integer t·ª´ sqlite3.Row"""
        try:
            value = row[key]
            return int(value) if value is not None else default
        except (KeyError, TypeError, IndexError, ValueError):
            return default

    def _get_row_bool(self, row, key, default=False):
        """Helper ƒë·ªÉ l·∫•y gi√° tr·ªã boolean t·ª´ sqlite3.Row"""
        try:
            value = row[key]
            return bool(value) if value is not None else default
        except (KeyError, TypeError, IndexError):
            return default
    def _ensure_tables(self):
        """T·∫°o c√°c b·∫£ng c·∫ßn thi·∫øt cho h·ªá th·ªëng c√¢u h·ªèi m·ªõi - S·ª¨A L·ªñI"""

        # B·∫£ng ch√≠nh question_bank - C·∫§U TR√öC M·ªöI
        self.db.execute_query("""
            CREATE TABLE IF NOT EXISTS question_bank (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                content_text TEXT,  -- N·ªôi dung c√¢u h·ªèi (h·ªó tr·ª£ MathJax)
                question_type TEXT DEFAULT 'multiple_choice',  -- 'multiple_choice', 'true_false', 'essay'

                -- D·ªØ li·ªáu cho tr·∫Øc nghi·ªám 4 ƒë√°p √°n
                option_a TEXT,  -- ƒê√°p √°n A (h·ªó tr·ª£ MathJax)
                option_b TEXT,  -- ƒê√°p √°n B (h·ªó tr·ª£ MathJax)
                option_c TEXT,  -- ƒê√°p √°n C (h·ªó tr·ª£ MathJax)
                option_d TEXT,  -- ƒê√°p √°n D (h·ªó tr·ª£ MathJax)
                correct_answer TEXT,  -- A, B, C, D ho·∫∑c NULL (kh√¥ng b·∫Øt bu·ªôc)
                show_correct_answer INTEGER DEFAULT 0,  -- 0: ·∫©n, 1: hi·ªán

                -- D·ªØ li·ªáu cho t·ª± lu·∫≠n
                detailed_answer TEXT,  -- ƒê√°p √°n chi ti·∫øt (h·ªó tr·ª£ MathJax)

                tree_id INTEGER,  -- Li√™n k·∫øt v·ªõi exercise_tree
                created_date TEXT DEFAULT CURRENT_TIMESTAMP,
                modified_date TEXT DEFAULT CURRENT_TIMESTAMP
            );
        """)

        # B·∫£ng cho c√¢u h·ªèi ƒë√∫ng/sai - C·∫§U TR√öC M·ªöI
        self.db.execute_query("""
            CREATE TABLE IF NOT EXISTS question_true_false_parts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                question_id INTEGER,
                part_number INTEGER,  -- 1, 2, 3, 4
                statement_text TEXT,  -- M·ªánh ƒë·ªÅ (h·ªó tr·ª£ MathJax)
                is_correct INTEGER DEFAULT 0,  -- 0: sai, 1: ƒë√∫ng
                explanation TEXT,  -- L·ªùi gi·∫£i chi ti·∫øt (h·ªó tr·ª£ MathJax)
                show_explanation INTEGER DEFAULT 0,  -- 0: ·∫©n, 1: hi·ªán
                FOREIGN KEY (question_id) REFERENCES question_bank(id) ON DELETE CASCADE
            );
        """)

        # B·∫£ng tags (gi·ªØ nguy√™n)
        self.db.execute_query("""
            CREATE TABLE IF NOT EXISTS question_tags (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                question_id INTEGER,
                tag_name TEXT,
                color TEXT DEFAULT '#3498db',
                created_date TEXT DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(question_id, tag_name),
                FOREIGN KEY (question_id) REFERENCES question_bank(id) ON DELETE CASCADE
            );
        """)

        # B·∫£ng l·ªãch s·ª≠ (gi·ªØ nguy√™n)
        self.db.execute_query("""
            CREATE TABLE IF NOT EXISTS question_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                question_id INTEGER,
                action_type TEXT,  -- 'CREATE', 'UPDATE', 'DELETE'
                old_content TEXT,
                new_content TEXT,
                change_date TEXT DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (question_id) REFERENCES question_bank(id) ON DELETE CASCADE
            );
        """)

        # === S·ª¨A L·ªñI: KI·ªÇM TRA C·ªòT ƒê√É T·ªíN T·∫†I TR∆Ø·ªöC KHI TH√äM ===
        self._add_columns_safely()
        self._ensure_question_bank_columns()  # ƒê·∫£m b·∫£o c√°c c·ªôt c·∫ßn thi·∫øt
    def _ensure_question_bank_columns(self):
        """ƒê·∫£m b·∫£o b·∫£ng question_bank c√≥ ƒë·∫ßy ƒë·ªß c√°c c·ªôt c·∫ßn thi·∫øt"""
        try:
            # L·∫•y th√¥ng tin c·ªôt hi·ªán t·∫°i
            columns_info = self.db.execute_query("PRAGMA table_info(question_bank)", fetch="all")
            existing_columns = [col[1] for col in columns_info] if columns_info else []

            # Danh s√°ch c·ªôt c·∫ßn thi·∫øt
            required_columns = [
                ('question_type', 'TEXT DEFAULT "multiple_choice"'),
                ('option_a', 'TEXT DEFAULT ""'),
                ('option_b', 'TEXT DEFAULT ""'),
                ('option_c', 'TEXT DEFAULT ""'),
                ('option_d', 'TEXT DEFAULT ""'),
                ('correct_answer', 'TEXT DEFAULT ""'),
                ('show_correct_answer', 'INTEGER DEFAULT 0'),
                ('detailed_answer', 'TEXT DEFAULT ""'),
                ('created_date', 'TEXT DEFAULT ""'),
                ('modified_date', 'TEXT DEFAULT ""')
            ]

            # Th√™m t·ª´ng c·ªôt n·∫øu ch∆∞a t·ªìn t·∫°i
            for column_name, column_definition in required_columns:
                if column_name not in existing_columns:
                    try:
                        query = f"ALTER TABLE question_bank ADD COLUMN {column_name} {column_definition}"
                        self.db.execute_query(query)
                        print(f"‚úÖ ƒê√£ th√™m c·ªôt {column_name} v√†o question_bank")

                        # C·∫≠p nh·∫≠t gi√° tr·ªã th·ªùi gian cho c√°c c·ªôt date n·∫øu c·∫ßn
                        if column_name in ['created_date', 'modified_date']:
                            self.db.execute_query(f"""
                                UPDATE question_bank 
                                SET {column_name} = datetime('now') 
                                WHERE {column_name} = '' OR {column_name} IS NULL
                            """)

                    except Exception as e:
                        print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ th√™m c·ªôt {column_name}: {e}")
        except Exception as e:
            print(f"‚ùå L·ªói khi ki·ªÉm tra c·ªôt question_bank: {e}")

    def _add_columns_safely(self):
        """Th√™m c·ªôt m·ªõi m·ªôt c√°ch an to√†n - ki·ªÉm tra tr∆∞·ªõc khi th√™m"""
        try:
            # L·∫•y danh s√°ch c·ªôt hi·ªán c√≥ trong b·∫£ng question_bank
            existing_columns = self._get_table_columns('question_bank')

            # Danh s√°ch c·ªôt c·∫ßn th√™m
            columns_to_add = [
                ('option_a', 'TEXT DEFAULT ""'),
                ('option_b', 'TEXT DEFAULT ""'),
                ('option_c', 'TEXT DEFAULT ""'),
                ('option_d', 'TEXT DEFAULT ""'),
                ('correct_answer', 'TEXT DEFAULT ""'),
                ('show_correct_answer', 'INTEGER DEFAULT 0'),
                ('detailed_answer', 'TEXT DEFAULT ""')
            ]

            # Th√™m t·ª´ng c·ªôt n·∫øu ch∆∞a t·ªìn t·∫°i
            for column_name, column_type in columns_to_add:
                if column_name not in existing_columns:
                    try:
                        query = f"ALTER TABLE question_bank ADD COLUMN {column_name} {column_type}"
                        self.db.execute_query(query)
                        print(f"‚úÖ ƒê√£ th√™m c·ªôt {column_name}")
                    except Exception as e:
                        # B·ªè qua l·ªói n·∫øu c·ªôt ƒë√£ t·ªìn t·∫°i
                        if "duplicate column name" not in str(e).lower():
                            print(f"‚ö†Ô∏è L·ªói th√™m c·ªôt {column_name}: {e}")

        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói ki·ªÉm tra c·ªôt: {e}")
    def _get_table_columns(self, table_name):
        """L·∫•y danh s√°ch t√™n c·ªôt c·ªßa b·∫£ng"""
        try:
            result = self.db.execute_query(f"PRAGMA table_info({table_name})", fetch="all")
            if result:
                return [row[1] for row in result]  # row[1] l√† t√™n c·ªôt
            return []
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói l·∫•y th√¥ng tin c·ªôt: {e}")
            return []
    # T·∫°o c√°c control filter trong toolbar
    def _create_filter_controls(self, toolbar):
        """T·∫°o c√°c combobox filter trong toolbar"""
        toolbar.addWidget(QtWidgets.QLabel("M√¥n:"))
        self.subject_cb = QtWidgets.QComboBox()
        self.subject_cb.setMinimumWidth(120)
        toolbar.addWidget(self.subject_cb)

        toolbar.addWidget(QtWidgets.QLabel("L·ªõp:"))
        self.grade_cb = QtWidgets.QComboBox()
        self.grade_cb.setMinimumWidth(100)
        toolbar.addWidget(self.grade_cb)

        toolbar.addWidget(QtWidgets.QLabel("Ch·ªß ƒë·ªÅ:"))
        self.topic_cb = QtWidgets.QComboBox()
        self.topic_cb.setMinimumWidth(150)
        toolbar.addWidget(self.topic_cb)

        toolbar.addWidget(QtWidgets.QLabel("D·∫°ng:"))
        self.type_cb = QtWidgets.QComboBox()
        self.type_cb.setMinimumWidth(120)
        toolbar.addWidget(self.type_cb)

        toolbar.addWidget(QtWidgets.QLabel("M·ª©c ƒë·ªô:"))
        self.level_cb = QtWidgets.QComboBox()
        self.level_cb.addItems(["", "Nh·∫≠n bi·∫øt", "Th√¥ng hi·ªÉu", "V·∫≠n d·ª•ng", "V·∫≠n d·ª•ng cao", "S√°ng t·∫°o"])
        self.level_cb.setMinimumWidth(120)
        toolbar.addWidget(self.level_cb)

        toolbar.addSeparator()

        filter_btn = toolbar.addAction("üîΩ L·ªçc")
        filter_btn.triggered.connect(self.filter_by_combobox)

        clear_filter_btn = toolbar.addAction("üîÑ X√≥a l·ªçc")
        clear_filter_btn.triggered.connect(self.clear_filters)
    # T·∫°o n·ªôi dung tab ch·ªânh s·ª≠a c√¢u h·ªèi
    def _create_edit_tab_content(self, layout):
        """T·∫°o n·ªôi dung cho tab ch·ªânh s·ª≠a"""
        # Toolbar cho text editor
        text_toolbar = QtWidgets.QToolBar()
        text_toolbar.setToolButtonStyle(Qt.ToolButtonIconOnly)
        # Selector cho lo·∫°i c√¢u h·ªèi - C·∫¨P NH·∫¨T M·ªöI
        question_type_group = QtWidgets.QGroupBox("üéØ Lo·∫°i c√¢u h·ªèi")
        type_layout = QtWidgets.QHBoxLayout(question_type_group)

        self.question_type_group = QtWidgets.QButtonGroup(self)

        # Radio button cho tr·∫Øc nghi·ªám 4 ƒë√°p √°n
        self.multiple_choice_rb = QtWidgets.QRadioButton("üîò Tr·∫Øc nghi·ªám 4 ƒë√°p √°n")
        self.multiple_choice_rb.setChecked(True)  # M·∫∑c ƒë·ªãnh
        self.multiple_choice_rb.toggled.connect(
            lambda checked: self._setup_multiple_choice_ui() if checked else None
        )
        self.question_type_group.addButton(self.multiple_choice_rb, 0)
        type_layout.addWidget(self.multiple_choice_rb)

        # Radio button cho ƒë√∫ng/sai
        self.true_false_rb = QtWidgets.QRadioButton("‚úÖ Tr·∫Øc nghi·ªám ƒë√∫ng/sai")
        self.true_false_rb.toggled.connect(
            lambda checked: self._setup_true_false_ui() if checked else None
        )
        self.question_type_group.addButton(self.true_false_rb, 1)
        type_layout.addWidget(self.true_false_rb)

        # Radio button cho t·ª± lu·∫≠n (thay th·∫ø short_answer)
        self.essay_rb = QtWidgets.QRadioButton("üìù T·ª± lu·∫≠n")
        self.essay_rb.toggled.connect(
            lambda checked: self._setup_essay_ui() if checked else None
        )
        self.question_type_group.addButton(self.essay_rb, 2)
        type_layout.addWidget(self.essay_rb)

        type_layout.addStretch()  # ƒê·∫©y c√°c button v·ªÅ b√™n tr√°i

        # QUAN TR·ªåNG: X√ìA d√≤ng connect c≈© n√†y n·∫øu c√≥:
        # self.question_type_group.buttonClicked.connect(self.on_question_type_changed)

        layout.addWidget(question_type_group)

        # T·∫°o font v√† action cho Bold
        bold_action = text_toolbar.addAction("B")
        bold_font = QtGui.QFont("Arial", 10)
        bold_font.setBold(True)
        bold_action.setFont(bold_font)
        bold_action.triggered.connect(self.format_bold)

        # T·∫°o font v√† action cho Italic
        italic_action = text_toolbar.addAction("I")
        italic_font = QtGui.QFont("Arial", 10)
        italic_font.setItalic(True)
        italic_action.setFont(italic_font)
        italic_action.triggered.connect(self.format_italic)

        text_toolbar.addSeparator()

        # C√°c action kh√°c
        math_action = text_toolbar.addAction("‚àë")
        math_action.triggered.connect(self.insert_math)

        image_action = text_toolbar.addAction("üñºÔ∏è")
        image_action.triggered.connect(self.insert_image)

        layout.addWidget(text_toolbar)
        # N·ªôi dung c√¢u h·ªèi
        layout.addWidget(QtWidgets.QLabel("N·ªôi dung c√¢u h·ªèi:"))
        self.content_text = QtWidgets.QTextEdit()
        self.content_text.setMinimumHeight(150)
        self.content_text.textChanged.connect(self.update_preview)
        layout.addWidget(self.content_text)

        # ƒê√°p √°n v·ªõi nh√≥m
        answers_group = QtWidgets.QGroupBox("ƒê√°p √°n")
        answers_layout = QtWidgets.QVBoxLayout(answers_group)
        self.answers_group = answers_group

        self.correct_group = QtWidgets.QButtonGroup(self)
        self.option_entries = {}

        for label in ["A", "B", "C", "D", "E"]:
            row_widget = QtWidgets.QWidget()
            row_layout = QtWidgets.QHBoxLayout(row_widget)
            row_layout.setContentsMargins(0, 0, 0, 0)

            rb = QtWidgets.QRadioButton(label)
            self.correct_group.addButton(rb)
            row_layout.addWidget(rb)

            ent = QtWidgets.QLineEdit()
            ent.setPlaceholderText(f"N·ªôi dung ƒë√°p √°n {label}")
            ent.textChanged.connect(self.update_preview)
            row_layout.addWidget(ent, 1)

            # N√∫t x√≥a ƒë√°p √°n
            del_btn = QtWidgets.QPushButton("‚å´")
            del_btn.setMaximumWidth(30)
            del_btn.clicked.connect(lambda checked, lbl=label: self.remove_option(lbl))
            row_layout.addWidget(del_btn)

            answers_layout.addWidget(row_widget)
            self.option_entries[label] = ent

        layout.addWidget(answers_group)

        # Tags section
        tags_group = QtWidgets.QGroupBox("üè∑Ô∏è Th·∫ª")
        tags_layout = QtWidgets.QHBoxLayout(tags_group)

        self.tags_edit = QtWidgets.QLineEdit()
        self.tags_edit.setPlaceholderText("Nh·∫≠p th·∫ª, ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y")
        tags_layout.addWidget(self.tags_edit)

        add_tag_btn = QtWidgets.QPushButton("‚ûï")
        add_tag_btn.clicked.connect(self.add_new_tag)
        tags_layout.addWidget(add_tag_btn)

        layout.addWidget(tags_group)

        # Buttons
        buttons_layout = QtWidgets.QHBoxLayout()

        self.btn_save = QtWidgets.QPushButton("üíæ L∆∞u/C·∫≠p nh·∫≠t")
        self.btn_save.clicked.connect(self.save_question)
        self.btn_save.setStyleSheet("QPushButton { background: #28a745; color: white; padding: 8px 16px; }")

        self.btn_delete = QtWidgets.QPushButton("üóëÔ∏è X√≥a")
        self.btn_delete.clicked.connect(self.delete_question)
        self.btn_delete.setStyleSheet("QPushButton { background: #dc3545; color: white; padding: 8px 16px; }")

        duplicate_btn = QtWidgets.QPushButton("üìã Nh√¢n b·∫£n")
        duplicate_btn.clicked.connect(self.duplicate_question)
        duplicate_btn.setStyleSheet("QPushButton { background: #6c757d; color: white; padding: 8px 16px; }")

        buttons_layout.addWidget(self.btn_save)
        buttons_layout.addWidget(duplicate_btn)
        buttons_layout.addWidget(self.btn_delete)

        layout.addLayout(buttons_layout)

    def _setup_multiple_choice_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán cho c√¢u h·ªèi tr·∫Øc nghi·ªám 4 ƒë√°p √°n - SMART RESPONSIVE"""
        # X√≥a widget c≈©
        self._clear_question_content_area()

        # === T·∫†O SCROLL AREA ƒê·ªÇ KH√îNG B·ªä M·∫§T MENU ===
        scroll_area = QtWidgets.QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)

        # Widget ch√≠nh trong scroll area
        main_widget = QtWidgets.QWidget()
        layout = QtWidgets.QVBoxLayout(main_widget)

        # N·ªôi dung c√¢u h·ªèi - SMART SIZING
        content_group = QtWidgets.QGroupBox("üìù N·ªôi dung c√¢u h·ªèi")
        content_layout = QtWidgets.QVBoxLayout()

        self.content_text = QtWidgets.QTextEdit()
        self.content_text.setPlaceholderText("Nh·∫≠p n·ªôi dung c√¢u h·ªèi (h·ªó tr·ª£ c√¥ng th·ª©c to√°n: $x^2 + y^2 = z^2$)")

        # === SMART SIZING: T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh theo n·ªôi dung ===
        self.content_text.setMinimumHeight(60)  # T·ªëi thi·ªÉu nh·ªè
        self.content_text.setMaximumHeight(300)  # T·ªëi ƒëa l·ªõn h∆°n

        # === S·ª¨A FONT V√Ä STYLING ƒê·ªÇ CH·ªÆ R√ï N√âT ===
        self.content_text.setStyleSheet("""
            QTextEdit {
                font-family: 'Segoe UI', Arial, sans-serif;
                font-size: 13px;
                line-height: 1.4;
                padding: 10px;
                border: 2px solid #ddd;
                border-radius: 6px;
                background-color: white;
            }
            QTextEdit:focus {
                border-color: #007bff;
                background-color: #f8fbff;
            }
        """)

        # === AUTO-RESIZE KHI NH·∫¨P TEXT ===
        self.content_text.textChanged.connect(lambda: self._auto_resize_text_edit(self.content_text))

        content_layout.addWidget(self.content_text)
        content_group.setLayout(content_layout)
        layout.addWidget(content_group)

        # 4 ƒë√°p √°n - COMPACT AND SMART
        options_group = QtWidgets.QGroupBox("üìã 4 ƒë√°p √°n")
        options_layout = QtWidgets.QVBoxLayout()

        self.option_entries = {}
        option_style = """
            QTextEdit {
                font-family: 'Segoe UI', Arial, sans-serif;
                font-size: 12px;
                padding: 8px;
                border: 1px solid #ccc;
                border-radius: 4px;
                background-color: white;
            }
            QTextEdit:focus {
                border-color: #007bff;
                background-color: #f8fbff;
            }
        """

        for letter in ['A', 'B', 'C', 'D']:
            option_layout = QtWidgets.QHBoxLayout()

            label = QtWidgets.QLabel(f"{letter}:")
            label.setMinimumWidth(20)
            label.setStyleSheet("font-weight: bold; font-size: 13px; color: #333;")

            # === S·ª¨A: D√ôNG QTEXTEDIT NH∆ØNG COMPACT ===
            entry = QtWidgets.QTextEdit()
            entry.setPlaceholderText(f"Nh·∫≠p ƒë√°p √°n {letter}")
            entry.setMinimumHeight(35)  # Nh·ªè h∆°n
            entry.setMaximumHeight(120)  # C√≥ th·ªÉ m·ªü r·ªông
            entry.setStyleSheet(option_style)

            # Auto-resize cho t·ª´ng ƒë√°p √°n
            entry.textChanged.connect(lambda e=entry: self._auto_resize_text_edit(e))

            option_layout.addWidget(label)
            option_layout.addWidget(entry, 1)  # stretch factor = 1
            options_layout.addLayout(option_layout)

            self.option_entries[letter] = entry

        options_group.setLayout(options_layout)
        layout.addWidget(options_group)

        # ƒê√°p √°n ƒë√∫ng (compact)
        correct_group = QtWidgets.QGroupBox("üéØ ƒê√°p √°n ƒë√∫ng")
        correct_layout = QtWidgets.QVBoxLayout()

        # N√∫t toggle
        toggle_layout = QtWidgets.QHBoxLayout()
        self.show_correct_btn = QtWidgets.QPushButton("üëÅÔ∏è Hi·ªán ƒë√°p √°n ƒë√∫ng")
        self.show_correct_btn.setCheckable(True)
        self.show_correct_btn.clicked.connect(self._toggle_correct_answer_visibility)
        self.show_correct_btn.setMaximumWidth(200)  # Gi·ªõi h·∫°n chi·ªÅu r·ªông
        toggle_layout.addWidget(self.show_correct_btn)
        toggle_layout.addStretch()
        correct_layout.addLayout(toggle_layout)

        # Radio buttons
        self.correct_answer_widget = QtWidgets.QWidget()
        correct_answer_layout = QtWidgets.QHBoxLayout()
        self.correct_group = QtWidgets.QButtonGroup()

        for letter in ['A', 'B', 'C', 'D']:
            rb = QtWidgets.QRadioButton(letter)
            rb.setStyleSheet("font-weight: bold; font-size: 12px;")
            self.correct_group.addButton(rb)
            correct_answer_layout.addWidget(rb)

        none_rb = QtWidgets.QRadioButton("Kh√¥ng ch·ªçn")
        none_rb.setChecked(True)
        self.correct_group.addButton(none_rb)
        correct_answer_layout.addWidget(none_rb)
        correct_answer_layout.addStretch()

        self.correct_answer_widget.setLayout(correct_answer_layout)
        self.correct_answer_widget.setVisible(False)
        correct_layout.addWidget(self.correct_answer_widget)

        correct_group.setLayout(correct_layout)
        layout.addWidget(correct_group)

        # === TH√äM SPACER ƒê·ªÇ ƒê·∫®Y N·ªòI DUNG L√äN TR√äN ===
        layout.addStretch(1)

        # === ƒê·∫∂T WIDGET V√ÄO SCROLL AREA ===
        scroll_area.setWidget(main_widget)

        # Thi·∫øt l·∫≠p widget ch√≠nh
        self.question_content_widget = scroll_area  # S·ª≠ d·ª•ng scroll_area l√†m widget ch√≠nh

        # Th√™m v√†o layout cha
        if hasattr(self, 'edit_tab_layout'):
            self.edit_tab_layout.addWidget(self.question_content_widget)
        else:
            parent_widget = self.findChild(QtWidgets.QWidget, "edit_tab")
            if parent_widget and parent_widget.layout():
                parent_widget.layout().addWidget(self.question_content_widget)

    def _auto_resize_text_edit(self, text_edit):
        """T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh chi·ªÅu cao QTextEdit theo n·ªôi dung"""
        try:
            # L·∫•y document height
            document = text_edit.document()
            height = document.size().height() + 20  # Th√™m padding

            # Gi·ªõi h·∫°n trong kho·∫£ng min-max
            min_height = text_edit.minimumHeight()
            max_height = text_edit.maximumHeight()

            new_height = max(min_height, min(height, max_height))

            # Ch·ªâ thay ƒë·ªïi n·∫øu kh√°c bi·ªát ƒë√°ng k·ªÉ
            if abs(text_edit.height() - new_height) > 5:
                text_edit.setFixedHeight(int(new_height))
        except:
            pass  # B·ªè qua l·ªói

    def _setup_true_false_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán cho c√¢u h·ªèi ƒë√∫ng/sai - SMART RESPONSIVE"""
        self._clear_question_content_area()

        # === T·∫†O SCROLL AREA ===
        scroll_area = QtWidgets.QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)

        main_widget = QtWidgets.QWidget()
        layout = QtWidgets.QVBoxLayout(main_widget)

        # N·ªôi dung c√¢u h·ªèi
        content_group = QtWidgets.QGroupBox("üìù N·ªôi dung c√¢u h·ªèi")
        content_layout = QtWidgets.QVBoxLayout()

        self.content_text = QtWidgets.QTextEdit()
        self.content_text.setPlaceholderText("Nh·∫≠p n·ªôi dung c√¢u h·ªèi (h·ªó tr·ª£ c√¥ng th·ª©c to√°n)")
        self.content_text.setMinimumHeight(60)
        self.content_text.setMaximumHeight(250)
        self.content_text.setStyleSheet("""
            QTextEdit {
                font-family: 'Segoe UI', Arial, sans-serif;
                font-size: 13px;
                line-height: 1.4;
                padding: 10px;
                border: 2px solid #ddd;
                border-radius: 6px;
            }
            QTextEdit:focus {
                border-color: #007bff;
            }
        """)
        self.content_text.textChanged.connect(lambda: self._auto_resize_text_edit(self.content_text))

        content_layout.addWidget(self.content_text)
        content_group.setLayout(content_layout)
        layout.addWidget(content_group)

        # 4 m·ªánh ƒë·ªÅ - COMPACT
        statements_group = QtWidgets.QGroupBox("üìã 4 m·ªánh ƒë·ªÅ ƒë√∫ng/sai")
        statements_layout = QtWidgets.QVBoxLayout()

        self.statement_entries = {}
        self.statement_checkboxes = {}
        self.explanation_entries = {}
        self.explanation_widgets = {}
        self.show_explanation_btns = {}

        statement_style = """
            QTextEdit {
                font-family: 'Segoe UI', Arial, sans-serif;
                font-size: 12px;
                padding: 6px;
                border: 1px solid #ccc;
                border-radius: 4px;
            }
            QTextEdit:focus {
                border-color: #007bff;
            }
        """

        for i in range(1, 5):
            # Container compact
            statement_container = QtWidgets.QGroupBox(f"M·ªánh ƒë·ªÅ {i}")
            container_layout = QtWidgets.QVBoxLayout()

            # M·ªánh ƒë·ªÅ trong 1 h√†ng
            statement_layout = QtWidgets.QHBoxLayout()

            entry = QtWidgets.QTextEdit()
            entry.setPlaceholderText(f"Nh·∫≠p m·ªánh ƒë·ªÅ {i}")
            entry.setMinimumHeight(40)
            entry.setMaximumHeight(100)
            entry.setStyleSheet(statement_style)
            entry.textChanged.connect(lambda e=entry: self._auto_resize_text_edit(e))

            checkbox = QtWidgets.QCheckBox("ƒê√∫ng")
            checkbox.setStyleSheet("font-weight: bold; color: #28a745;")

            statement_layout.addWidget(entry, 1)
            statement_layout.addWidget(checkbox)
            container_layout.addLayout(statement_layout)

            # N√∫t l·ªùi gi·∫£i compact
            explanation_btn_layout = QtWidgets.QHBoxLayout()
            show_explanation_btn = QtWidgets.QPushButton(f"üí° L·ªùi gi·∫£i {i}")
            show_explanation_btn.setCheckable(True)
            show_explanation_btn.setMaximumWidth(120)
            show_explanation_btn.clicked.connect(
                lambda checked, idx=i: self._toggle_explanation_visibility(idx - 1, checked)
            )
            explanation_btn_layout.addWidget(show_explanation_btn)
            explanation_btn_layout.addStretch()
            container_layout.addLayout(explanation_btn_layout)

            # L·ªùi gi·∫£i
            explanation_widget = QtWidgets.QWidget()
            explanation_layout = QtWidgets.QVBoxLayout()
            explanation_entry = QtWidgets.QTextEdit()
            explanation_entry.setPlaceholderText(f"L·ªùi gi·∫£i cho m·ªánh ƒë·ªÅ {i}")
            explanation_entry.setMinimumHeight(50)
            explanation_entry.setMaximumHeight(120)
            explanation_entry.setStyleSheet(statement_style)
            explanation_entry.textChanged.connect(lambda e=explanation_entry: self._auto_resize_text_edit(e))

            explanation_layout.addWidget(explanation_entry)
            explanation_widget.setLayout(explanation_layout)
            explanation_widget.setVisible(False)
            container_layout.addWidget(explanation_widget)

            statement_container.setLayout(container_layout)
            statements_layout.addWidget(statement_container)

            # L∆∞u references
            self.statement_entries[i] = entry
            self.statement_checkboxes[i] = checkbox
            self.explanation_entries[i] = explanation_entry
            self.explanation_widgets[i] = explanation_widget
            self.show_explanation_btns[i] = show_explanation_btn

        statements_group.setLayout(statements_layout)
        layout.addWidget(statements_group)

        # Spacer
        layout.addStretch(1)

        # Scroll area setup
        scroll_area.setWidget(main_widget)
        self.question_content_widget = scroll_area

        if hasattr(self, 'edit_tab_layout'):
            self.edit_tab_layout.addWidget(self.question_content_widget)
        else:
            parent_widget = self.findChild(QtWidgets.QWidget, "edit_tab")
            if parent_widget and parent_widget.layout():
                parent_widget.layout().addWidget(self.question_content_widget)

    def _setup_essay_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán cho c√¢u h·ªèi t·ª± lu·∫≠n - SMART RESPONSIVE"""
        self._clear_question_content_area()

        # Scroll area
        scroll_area = QtWidgets.QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)

        main_widget = QtWidgets.QWidget()
        layout = QtWidgets.QVBoxLayout(main_widget)

        # N·ªôi dung c√¢u h·ªèi
        content_group = QtWidgets.QGroupBox("üìù N·ªôi dung c√¢u h·ªèi")
        content_layout = QtWidgets.QVBoxLayout()

        self.content_text = QtWidgets.QTextEdit()
        self.content_text.setPlaceholderText("Nh·∫≠p n·ªôi dung c√¢u h·ªèi (h·ªó tr·ª£ c√¥ng th·ª©c to√°n)")
        self.content_text.setMinimumHeight(80)
        self.content_text.setMaximumHeight(300)
        self.content_text.setStyleSheet("""
            QTextEdit {
                font-family: 'Segoe UI', Arial, sans-serif;
                font-size: 13px;
                line-height: 1.4;
                padding: 12px;
                border: 2px solid #ddd;
                border-radius: 6px;
            }
            QTextEdit:focus {
                border-color: #007bff;
            }
        """)
        self.content_text.textChanged.connect(lambda: self._auto_resize_text_edit(self.content_text))

        content_layout.addWidget(self.content_text)
        content_group.setLayout(content_layout)
        layout.addWidget(content_group)

        # ƒê√°p √°n chi ti·∫øt
        answer_group = QtWidgets.QGroupBox("üìñ ƒê√°p √°n chi ti·∫øt")
        answer_layout = QtWidgets.QVBoxLayout()

        self.detailed_answer = QtWidgets.QTextEdit()
        self.detailed_answer.setPlaceholderText("Nh·∫≠p ƒë√°p √°n chi ti·∫øt (h·ªó tr·ª£ c√¥ng th·ª©c to√°n)")
        self.detailed_answer.setMinimumHeight(150)
        # Kh√¥ng gi·ªõi h·∫°n max height cho detailed answer
        self.detailed_answer.setStyleSheet("""
            QTextEdit {
                font-family: 'Segoe UI', Arial, sans-serif;
                font-size: 13px;
                line-height: 1.4;
                padding: 12px;
                border: 2px solid #ddd;
                border-radius: 6px;
            }
            QTextEdit:focus {
                border-color: #007bff;
            }
        """)

        answer_layout.addWidget(self.detailed_answer)
        answer_group.setLayout(answer_layout)
        layout.addWidget(answer_group)

        # Spacer
        layout.addStretch(1)

        # Scroll area setup
        scroll_area.setWidget(main_widget)
        self.question_content_widget = scroll_area

        if hasattr(self, 'edit_tab_layout'):
            self.edit_tab_layout.addWidget(self.question_content_widget)
        else:
            parent_widget = self.findChild(QtWidgets.QWidget, "edit_tab")
            if parent_widget and parent_widget.layout():
                parent_widget.layout().addWidget(self.question_content_widget)
    # 4. C·∫¨P NH·∫¨T ph∆∞∆°ng th·ª©c _create_edit_tab_content() ƒë·ªÉ l∆∞u layout reference
    def _create_edit_tab_content(self, layout):
        """T·∫°o n·ªôi dung cho tab ch·ªânh s·ª≠a - C·∫¨P NH·∫¨T"""
        self.edit_tab_layout = layout  # L∆ØU LAYOUT REFERENCE

        # Toolbar cho text editor
        text_toolbar = QtWidgets.QToolBar()
        text_toolbar.setToolButtonStyle(Qt.ToolButtonIconOnly)

        # Selector cho lo·∫°i c√¢u h·ªèi -
        question_type_group = QtWidgets.QGroupBox("üéØ Lo·∫°i c√¢u h·ªèi")
        type_layout = QtWidgets.QHBoxLayout(question_type_group)

        self.question_type_group = QtWidgets.QButtonGroup(self)

        # Radio button cho tr·∫Øc nghi·ªám 4 ƒë√°p √°n
        self.multiple_choice_rb = QtWidgets.QRadioButton("üîò Tr·∫Øc nghi·ªám 4 ƒë√°p √°n")
        self.multiple_choice_rb.setChecked(True)  # M·∫∑c ƒë·ªãnh
        self.multiple_choice_rb.toggled.connect(
            lambda checked: self._setup_multiple_choice_ui() if checked else None
        )
        self.question_type_group.addButton(self.multiple_choice_rb, 0)
        type_layout.addWidget(self.multiple_choice_rb)

        # Radio button cho ƒë√∫ng/sai
        self.true_false_rb = QtWidgets.QRadioButton("‚úÖ Tr·∫Øc nghi·ªám ƒë√∫ng/sai")
        self.true_false_rb.toggled.connect(
            lambda checked: self._setup_true_false_ui() if checked else None
        )
        self.question_type_group.addButton(self.true_false_rb, 1)
        type_layout.addWidget(self.true_false_rb)

        # Radio button cho t·ª± lu·∫≠n (thay th·∫ø short_answer)
        self.essay_rb = QtWidgets.QRadioButton("üìù T·ª± lu·∫≠n")
        self.essay_rb.toggled.connect(
            lambda checked: self._setup_essay_ui() if checked else None
        )
        self.question_type_group.addButton(self.essay_rb, 2)
        type_layout.addWidget(self.essay_rb)

        type_layout.addStretch()  # ƒê·∫©y c√°c button v·ªÅ b√™n tr√°i
        layout.addWidget(question_type_group)

        # Buttons - Nh√≥m n√∫t ch·ª©c nƒÉng ch√≠nh
        buttons_layout = QtWidgets.QHBoxLayout()

        self.btn_save = QtWidgets.QPushButton("üíæ L∆∞u/C·∫≠p nh·∫≠t")
        self.btn_save.clicked.connect(self.save_question)
        self.btn_save.setStyleSheet("""
                    QPushButton { 
                        background: #28a745; 
                        color: white; 
                        padding: 8px 16px; 
                        border-radius: 4px;
                        font-weight: bold;
                    }
                    QPushButton:hover { background: #218838; }
                """)

        self.btn_delete = QtWidgets.QPushButton("üóëÔ∏è X√≥a")
        self.btn_delete.clicked.connect(self.delete_question)
        self.btn_delete.setStyleSheet("""
                    QPushButton { 
                        background: #dc3545; 
                        color: white; 
                        padding: 8px 16px;
                        border-radius: 4px;
                        font-weight: bold;
                    }
                    QPushButton:hover { background: #c82333; }
                """)

        duplicate_btn = QtWidgets.QPushButton("üìã Nh√¢n b·∫£n")
        duplicate_btn.clicked.connect(self.duplicate_question)
        duplicate_btn.setStyleSheet("""
                    QPushButton { 
                        background: #17a2b8; 
                        color: white; 
                        padding: 8px 16px;
                        border-radius: 4px;
                        font-weight: bold;
                    }
                    QPushButton:hover { background: #138496; }
                """)

        new_btn = QtWidgets.QPushButton("‚ûï T·∫°o m·ªõi")
        new_btn.clicked.connect(self.new_question)
        new_btn.setStyleSheet("""
                    QPushButton { 
                        background: #6f42c1; 
                        color: white; 
                        padding: 8px 16px;
                        border-radius: 4px;
                        font-weight: bold;
                    }
                    QPushButton:hover { background: #5a3498; }
                """)

        # S·∫Øp x·∫øp n√∫t
        buttons_layout.addWidget(new_btn)
        buttons_layout.addWidget(self.btn_save)
        buttons_layout.addWidget(duplicate_btn)
        buttons_layout.addWidget(self.btn_delete)
        buttons_layout.addStretch()  # ƒê·∫©y c√°c n√∫t v·ªÅ ph√≠a tr√°i

        layout.addLayout(buttons_layout)

        # Thi·∫øt l·∫≠p UI m·∫∑c ƒë·ªãnh
        self._setup_multiple_choice_ui()


    # TH√äM c√°c ph∆∞∆°ng th·ª©c helper m·ªõi
    def _toggle_correct_answer_visibility(self):
        """Toggle hi·ªÉn th·ªã ƒë√°p √°n ƒë√∫ng cho tr·∫Øc nghi·ªám"""
        is_visible = self.show_correct_btn.isChecked()
        self.correct_answer_widget.setVisible(is_visible)

        if is_visible:
            self.show_correct_btn.setText("üëÅÔ∏è ·∫®n ƒë√°p √°n ƒë√∫ng")
        else:
            self.show_correct_btn.setText("üëÅÔ∏è Hi·ªán ƒë√°p √°n ƒë√∫ng")

    def _toggle_explanation_visibility(self, index, checked):
        """Toggle hi·ªÉn th·ªã l·ªùi gi·∫£i cho m·ªánh ƒë·ªÅ ƒë√∫ng/sai"""
        statement_num = index + 1
        self.explanation_widgets[statement_num].setVisible(checked)

        if checked:
            self.show_explanation_btns[statement_num].setText(f"üí° ·∫®n l·ªùi gi·∫£i {statement_num}")
        else:
            self.show_explanation_btns[statement_num].setText(f"üí° Hi·ªán l·ªùi gi·∫£i {statement_num}")

    def _clear_question_content_area(self):
        """X√≥a t·∫•t c·∫£ widget trong content area - S·ª¨A ƒê·ªÇ X·ª¨ L√ù SCROLL AREA"""
        if hasattr(self, 'question_content_widget') and self.question_content_widget:
            # N·∫øu l√† scroll area, c·∫ßn x√≥a widget b√™n trong tr∆∞·ªõc
            if isinstance(self.question_content_widget, QtWidgets.QScrollArea):
                inner_widget = self.question_content_widget.widget()
                if inner_widget:
                    inner_widget.deleteLater()

            self.question_content_widget.deleteLater()
            self.question_content_widget = None
    # T·∫°o widget cho sub-questions (ƒë√∫ng/sai)
    def _create_sub_questions_widget(self):
        """T·∫°o widget cho c√°c ph·∫ßn a), b), c), d) c·ªßa c√¢u ƒë√∫ng/sai"""
        self.sub_questions_widget = QtWidgets.QGroupBox("üìã C√°c ph·∫ßn ƒë√∫ng/sai")
        sub_layout = QtWidgets.QVBoxLayout(self.sub_questions_widget)

        self.sub_question_entries = {}
        self.sub_question_checkboxes = {}

        for label in ["a)", "b)", "c)", "d)"]:
            row_widget = QtWidgets.QWidget()
            row_layout = QtWidgets.QHBoxLayout(row_widget)
            row_layout.setContentsMargins(0, 0, 0, 0)

            # Label
            label_widget = QtWidgets.QLabel(label.upper())
            label_widget.setMinimumWidth(30)
            row_layout.addWidget(label_widget)

            # Content
            content_edit = QtWidgets.QLineEdit()
            content_edit.setPlaceholderText(f"N·ªôi dung ph·∫ßn {label}")
            row_layout.addWidget(content_edit, 1)

            # ƒê√∫ng/Sai checkbox
            correct_cb = QtWidgets.QCheckBox("ƒê√∫ng")
            row_layout.addWidget(correct_cb)

            sub_layout.addWidget(row_widget)

            self.sub_question_entries[label] = content_edit
            self.sub_question_checkboxes[label] = correct_cb

        # Th√™m v√†o layout ch√≠nh (c·∫ßn t√¨m v·ªã tr√≠ ph√π h·ª£p)
        parent_widget = self.content_text.parent()
        if parent_widget and parent_widget.layout():
            parent_widget.layout().addWidget(self.sub_questions_widget)
        # Gi·∫£ s·ª≠ th√™m sau answers_group
        if hasattr(self, 'answers_group') and self.answers_group.parent():
            parent_layout = self.answers_group.parent().layout()
            if parent_layout:
                index = parent_layout.indexOf(self.answers_group) + 1
                parent_layout.insertWidget(index, self.sub_questions_widget)
        else:
            # Th√™m tr·ª±c ti·∫øp v√†o layout ch√≠nh n·∫øu kh√¥ng t√¨m th·∫•y answers_group
            self.content_text.parent().layout().addWidget(self.sub_questions_widget)
        if parent_layout:
            index = parent_layout.indexOf(self.answers_group) + 1
            parent_layout.insertWidget(index, self.sub_questions_widget)
        self.sub_questions_widget.setVisible(False)
    # T·∫°o widget cho c√¢u tr·∫£ l·ªùi ng·∫Øn
    def _create_short_answer_widget(self):
        """T·∫°o widget cho c√¢u h·ªèi tr·∫£ l·ªùi ng·∫Øn"""
        self.short_answer_widget = QtWidgets.QGroupBox("üìù ƒê√°p √°n tr·∫£ l·ªùi ng·∫Øn")
        short_layout = QtWidgets.QVBoxLayout(self.short_answer_widget)

        # Lo·∫°i ƒë√°p √°n
        answer_type_layout = QtWidgets.QHBoxLayout()
        answer_type_layout.addWidget(QtWidgets.QLabel("Lo·∫°i ƒë√°p √°n:"))

        self.answer_type_combo = QtWidgets.QComboBox()
        self.answer_type_combo.addItems([
            "S·ªë nguy√™n", "S·ªë th·ª±c", "VƒÉn b·∫£n", "Bi·ªÉu th·ª©c to√°n h·ªçc"
        ])
        answer_type_layout.addWidget(self.answer_type_combo)

        short_layout.addLayout(answer_type_layout)

        # ƒê√°p √°n
        short_layout.addWidget(QtWidgets.QLabel("ƒê√°p √°n ƒë√∫ng:"))
        self.short_answer_edit = QtWidgets.QLineEdit()
        self.short_answer_edit.setPlaceholderText("Nh·∫≠p ƒë√°p √°n ƒë√∫ng")
        short_layout.addWidget(self.short_answer_edit)
        # ƒê√°p √°n thay th·∫ø (n·∫øu c√≥)
        short_layout.addWidget(QtWidgets.QLabel("ƒê√°p √°n thay th·∫ø (t√πy ch·ªçn):"))
        self.alternative_answers_edit = QtWidgets.QTextEdit()
        self.alternative_answers_edit.setMaximumHeight(80)
        self.alternative_answers_edit.setPlaceholderText("Nh·∫≠p c√°c ƒë√°p √°n thay th·∫ø, m·ªói ƒë√°p √°n m·ªôt d√≤ng")
        short_layout.addWidget(self.alternative_answers_edit)

        # Th√™m v√†o layout ch√≠nh
        parent_layout = self.answers_group.parent().layout()
        if parent_layout:
            index = parent_layout.indexOf(self.answers_group) + 1
            parent_layout.insertWidget(index, self.short_answer_widget)
    # T·∫°o n·ªôi dung tab preview
    def _create_preview_tab_content(self, layout):
        """T·∫°o n·ªôi dung cho tab preview"""
        layout.addWidget(QtWidgets.QLabel("üîç Xem tr∆∞·ªõc c√¢u h·ªèi:"))

        self.preview_widget = QtWidgets.QTextEdit()
        self.preview_widget.setReadOnly(True)
        self.preview_widget.setStyleSheet("""
            QTextEdit {
                background: white;
                border: 2px solid #e9ecef;
                border-radius: 8px;
                padding: 16px;
                font-size: 14px;
                line-height: 1.5;
            }
        """)
        layout.addWidget(self.preview_widget)

        # N√∫t refresh preview
        refresh_btn = QtWidgets.QPushButton("üîÑ L√†m m·ªõi preview")
        refresh_btn.clicked.connect(self.update_preview)
        layout.addWidget(refresh_btn)

    # T·∫°o n·ªôi dung tab th·ªëng k√™
    def _create_stats_tab_content(self, layout):
        """T·∫°o n·ªôi dung cho tab th·ªëng k√™"""
        layout.addWidget(QtWidgets.QLabel("üìä Th·ªëng k√™ ng√¢n h√†ng c√¢u h·ªèi:"))

        self.stats_widget = QtWidgets.QTextEdit()
        self.stats_widget.setReadOnly(True)
        layout.addWidget(self.stats_widget)

        # N√∫t c·∫≠p nh·∫≠t th·ªëng k√™
        update_stats_btn = QtWidgets.QPushButton("üîÑ C·∫≠p nh·∫≠t th·ªëng k√™")
        update_stats_btn.clicked.connect(self.update_statistics)
        layout.addWidget(update_stats_btn)

    # T·∫°o n·ªôi dung tab l·ªãch s·ª≠
    def _create_history_tab_content(self, layout):
        """T·∫°o n·ªôi dung cho tab l·ªãch s·ª≠"""
        layout.addWidget(QtWidgets.QLabel("üìú L·ªãch s·ª≠ ch·ªânh s·ª≠a:"))

        self.history_table = QtWidgets.QTableWidget(0, 4)
        self.history_table.setHorizontalHeaderLabels(["Th·ªùi gian", "H√†nh ƒë·ªông", "N·ªôi dung c≈©", "N·ªôi dung m·ªõi"])
        self.history_table.horizontalHeader().setSectionResizeMode(0, QtWidgets.QHeaderView.ResizeToContents)
        self.history_table.horizontalHeader().setSectionResizeMode(1, QtWidgets.QHeaderView.ResizeToContents)
        self.history_table.horizontalHeader().setSectionResizeMode(2, QtWidgets.QHeaderView.Stretch)
        self.history_table.horizontalHeader().setSectionResizeMode(3, QtWidgets.QHeaderView.Stretch)

        layout.addWidget(self.history_table)

        # N√∫t x√≥a l·ªãch s·ª≠
        clear_history_btn = QtWidgets.QPushButton("üóëÔ∏è X√≥a l·ªãch s·ª≠")
        clear_history_btn.clicked.connect(self.clear_history)
        layout.addWidget(clear_history_btn)
    def validate_question_data(self, content, correct, opts):
        """Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa d·ªØ li·ªáu c√¢u h·ªèi"""
        errors = []

        if not content or len(content.strip()) < 10:
            errors.append("N·ªôi dung c√¢u h·ªèi ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±")

        if not correct:
            errors.append("Ph·∫£i ch·ªçn ƒë√°p √°n ƒë√∫ng")

        if len(opts) < 2:
            errors.append("Ph·∫£i c√≥ √≠t nh·∫•t 2 ƒë√°p √°n")

        # Ki·ªÉm tra ƒë√°p √°n tr·ªëng
        empty_options = [opt for opt in opts if not opt.get("text", "").strip()]
        if empty_options:
            errors.append("Kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng ƒë√°p √°n")

        return errors
    # ====================== Tree ======================
    def refresh_tree(self):
        """L√†m m·ªõi c√¢y th∆∞ m·ª•c v·ªõi x·ª≠ l√Ω l·ªói t·ªët h∆°n"""
        try:
            self.tree.clear()
            self.tree_nodes.clear()

            # ƒê·∫£m b·∫£o b·∫£ng exercise_tree t·ªìn t·∫°i
            self._ensure_exercise_tree_table()

            rows = self.db.execute_query(
                "SELECT id,parent_id,name,level FROM exercise_tree ORDER BY parent_id,level,name",
                fetch='all'
            ) or []

            if not rows:
                # N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu, th√™m d·ªØ li·ªáu m·∫´u
                self._insert_sample_tree_data()
                rows = self.db.execute_query(
                    "SELECT id,parent_id,name,level FROM exercise_tree ORDER BY parent_id,level,name",
                    fetch='all'
                ) or []

            children: Dict[int | None, list] = {}
            for r in rows:
                children.setdefault(r["parent_id"], []).append(r)

            def build(parent_db_id: int | None, parent_item: QtWidgets.QTreeWidgetItem | None):
                for node in children.get(parent_db_id, []):
                    # T·∫°o icon theo level
                    icon_text = self._get_level_icon(node["level"])
                    item_text = f"{icon_text} {node['name']}"

                    item = QtWidgets.QTreeWidgetItem([item_text])
                    item.setData(0, Qt.UserRole, node["id"])
                    item.setToolTip(0, f"Level: {node['level']}\nID: {node['id']}")

                    self.tree_nodes[str(id(item))] = node["id"]

                    if parent_item is None:
                        self.tree.addTopLevelItem(item)
                    else:
                        parent_item.addChild(item)
                    build(node["id"], item)

            build(None, None)
            self.tree.expandAll()

        except Exception as e:
            QtWidgets.QMessageBox.critical(
                self, "L·ªói",
                f"Kh√¥ng th·ªÉ t·∫£i c√¢y th∆∞ m·ª•c: {e}\n\nVui l√≤ng ki·ªÉm tra k·∫øt n·ªëi database."
            )

    def _ensure_exercise_tree_table(self):
        """ƒê·∫£m b·∫£o b·∫£ng exercise_tree t·ªìn t·∫°i"""
        self.db.execute_query("""
            CREATE TABLE IF NOT EXISTS exercise_tree (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                parent_id INTEGER,
                name TEXT NOT NULL,
                level TEXT NOT NULL,
                description TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (parent_id) REFERENCES exercise_tree (id)
            )
        """)

    def _insert_sample_tree_data(self):
        """Th√™m d·ªØ li·ªáu m·∫´u cho c√¢y th∆∞ m·ª•c"""
        sample_data = [
            # M√¥n h·ªçc
            (None, "To√°n", "M√¥n", "M√¥n To√°n h·ªçc"),
            (None, "L√Ω", "M√¥n", "M√¥n V·∫≠t l√Ω"),
            (None, "H√≥a", "M√¥n", "M√¥n H√≥a h·ªçc"),

            # L·ªõp (con c·ªßa To√°n - id=1)
            (1, "L·ªõp 10", "L·ªõp", "To√°n l·ªõp 10"),
            (1, "L·ªõp 11", "L·ªõp", "To√°n l·ªõp 11"),
            (1, "L·ªõp 12", "L·ªõp", "To√°n l·ªõp 12"),

            # Ch·ªß ƒë·ªÅ (con c·ªßa L·ªõp 10 - id=4)
            (4, "M·ªánh ƒë·ªÅ - T·∫≠p h·ª£p", "Ch·ªß ƒë·ªÅ", "Ch∆∞∆°ng 1: M·ªánh ƒë·ªÅ v√† t·∫≠p h·ª£p"),
            (4, "H√†m s·ªë", "Ch·ªß ƒë·ªÅ", "Ch∆∞∆°ng 2: H√†m s·ªë"),
            (4, "Ph∆∞∆°ng tr√¨nh", "Ch·ªß ƒë·ªÅ", "Ch∆∞∆°ng 3: Ph∆∞∆°ng tr√¨nh v√† b·∫•t ph∆∞∆°ng tr√¨nh"),

            # D·∫°ng (con c·ªßa M·ªánh ƒë·ªÅ - T·∫≠p h·ª£p - id=7)
            (7, "M·ªánh ƒë·ªÅ", "D·∫°ng", "D·∫°ng b√†i v·ªÅ m·ªánh ƒë·ªÅ"),
            (7, "T·∫≠p h·ª£p", "D·∫°ng", "D·∫°ng b√†i v·ªÅ t·∫≠p h·ª£p"),
            (7, "Ph√©p to√°n t·∫≠p h·ª£p", "D·∫°ng", "Giao, h·ª£p, hi·ªáu t·∫≠p h·ª£p"),

            # M·ª©c ƒë·ªô (con c·ªßa M·ªánh ƒë·ªÅ - id=10)
            (10, "Nh·∫≠n bi·∫øt", "M·ª©c ƒë·ªô", "C√¢u h·ªèi nh·∫≠n bi·∫øt c∆° b·∫£n"),
            (10, "Th√¥ng hi·ªÉu", "M·ª©c ƒë·ªô", "C√¢u h·ªèi th√¥ng hi·ªÉu"),
            (10, "V·∫≠n d·ª•ng", "M·ª©c ƒë·ªô", "C√¢u h·ªèi v·∫≠n d·ª•ng"),
            (10, "V·∫≠n d·ª•ng cao", "M·ª©c ƒë·ªô", "C√¢u h·ªèi v·∫≠n d·ª•ng cao"),
        ]

        for parent_id, name, level, description in sample_data:
            self.db.execute_query(
                "INSERT INTO exercise_tree (parent_id, name, level, description) VALUES (?, ?, ?, ?)",
                (parent_id, name, level, description)
            )

    def _get_level_icon(self, level: str) -> str:
        """Tr·∫£ v·ªÅ icon emoji cho t·ª´ng level"""
        icons = {
            "M√¥n": "üìö",
            "L·ªõp": "üéì",
            "Ch·ªß ƒë·ªÅ": "üìñ",
            "D·∫°ng": "üìù",
            "M·ª©c ƒë·ªô": "‚≠ê"
        }
        return icons.get(level, "üìÅ")

    def on_tree_select(self):
        """X·ª≠ l√Ω khi ch·ªçn node tr√™n c√¢y"""
        items = self.tree.selectedItems()
        if not items:
            self._load_question_rows([])  # Clear b·∫£ng n·∫øu kh√¥ng ch·ªçn g√¨
            return

        tree_id = items[0].data(0, Qt.UserRole)
        if not tree_id:
            self._load_question_rows([])
            return

        # Load c√¢u h·ªèi cho tree_id ƒë∆∞·ª£c ch·ªçn
        self.load_questions_by_tree(tree_id)
    # Nhi·ªám v·ª•: Ph√¢n t√≠ch b·∫£ng c√¢u h·ªèi ƒê√∫ng/Sai
    def _process_true_false_table(self, table):
        """
        X·ª≠ l√Ω m·ªôt ƒë·ªëi t∆∞·ª£ng b·∫£ng (table) t·ª´ docx ƒë·ªÉ tr√≠ch xu·∫•t c√°c c√¢u h·ªèi con
        theo ƒë·ªãnh d·∫°ng: Kh·∫≥ng ƒë·ªãnh | ƒê√∫ng | Sai
        """
        sub_questions = []
        if not table or len(table.rows) < 2:
            return sub_questions  # B·∫£ng kh√¥ng h·ª£p l·ªá

        # B·ªè qua h√†ng ti√™u ƒë·ªÅ (h√†ng ƒë·∫ßu ti√™n)
        for row_index, row in enumerate(table.rows[1:], start=1):
            try:
                if len(row.cells) < 3:
                    continue  # B·ªè qua h√†ng kh√¥ng ƒë·ªß c·ªôt

                # C·ªôt 0: N·ªôi dung, C·ªôt 1: ƒê√∫ng, C·ªôt 2: Sai
                content_cell = row.cells[0].text.strip()
                true_cell = row.cells[1].text.strip()
                false_cell = row.cells[2].text.strip()

                if not content_cell:
                    continue  # B·ªè qua h√†ng tr·ªëng

                # T√°ch label 'a)' ra kh·ªèi n·ªôi dung
                label_match = re.match(r'^([a-e])\)\s*(.*)', content_cell)
                if label_match:
                    label = label_match.group(1) + ')'
                    content = label_match.group(2).strip()
                else:
                    # N·∫øu kh√¥ng c√≥ label, t·ª± ƒë·ªông t·∫°o
                    label = chr(ord('a') + row_index - 1) + ')'
                    content = content_cell

                # Ki·ªÉm tra d·∫•u 'X' trong c·ªôt ƒê√∫ng ho·∫∑c Sai
                is_correct = None
                if 'X' in true_cell.upper() or 'x' in true_cell:
                    is_correct = True
                elif 'X' in false_cell.upper() or 'x' in false_cell:
                    is_correct = False
                else:
                    # M·∫∑c ƒë·ªãnh l√† ƒë√∫ng n·∫øu kh√¥ng c√≥ d·∫•u X r√µ r√†ng
                    is_correct = True

                if content:
                    sub_questions.append({
                        'label': label,
                        'content': content,
                        'is_correct': is_correct
                    })

            except Exception as e:
                print(f"L·ªói khi x·ª≠ l√Ω h√†ng {row_index} trong b·∫£ng ƒë√∫ng/sai: {e}")
                continue  # B·ªè qua h√†ng b·ªã l·ªói v√† ti·∫øp t·ª•c

        return sub_questions
    # ====================== Questions list ======================

    def _load_question_rows(self, rows):
        """Load danh s√°ch c√¢u h·ªèi v√†o b·∫£ng - S·ª¨A L·ªñI sqlite3.Row"""
        # Clear b·∫£ng tr∆∞·ªõc
        self.q_table.setRowCount(0)

        for row_data in rows:
            row_idx = self.q_table.rowCount()
            self.q_table.insertRow(row_idx)

            # Checkbox c·ªôt 0
            checkbox = QtWidgets.QCheckBox()
            self.q_table.setCellWidget(row_idx, 0, checkbox)

            # ID c·ªôt 1 - S·ª≠ d·ª•ng row_data["key"] thay v√¨ .get()
            try:
                id_val = row_data["id"] if row_data["id"] is not None else ""
            except (KeyError, TypeError):
                id_val = ""
            id_item = QtWidgets.QTableWidgetItem(str(id_val))
            id_item.setTextAlignment(Qt.AlignCenter)
            self.q_table.setItem(row_idx, 1, id_item)

            # N·ªôi dung c·ªôt 2 (r√∫t g·ªçn)
            try:
                content = row_data["content_text"] if row_data["content_text"] else ""
            except (KeyError, TypeError):
                content = ""
            if len(content) > 100:
                content = content[:100] + "..."
            self.q_table.setItem(row_idx, 2, QtWidgets.QTableWidgetItem(content))

            # S·ªë ƒë√°p √°n c·ªôt 3
            try:
                question_type = row_data["question_type"] if row_data["question_type"] else "multiple_choice"
            except (KeyError, TypeError):
                question_type = "multiple_choice"

            if question_type == "multiple_choice":
                num_options = 0
                for opt in ['option_a', 'option_b', 'option_c', 'option_d']:
                    try:
                        if row_data[opt]:
                            num_options += 1
                    except (KeyError, TypeError):
                        pass
                self.q_table.setItem(row_idx, 3, QtWidgets.QTableWidgetItem(str(num_options)))
            else:
                self.q_table.setItem(row_idx, 3, QtWidgets.QTableWidgetItem("-"))

            # ƒê√°p √°n ƒë√∫ng c·ªôt 4
            if question_type == "multiple_choice":
                try:
                    correct = row_data["correct_answer"] if row_data["correct_answer"] else ""
                except (KeyError, TypeError):
                    correct = ""
                self.q_table.setItem(row_idx, 4, QtWidgets.QTableWidgetItem(correct))
            else:
                self.q_table.setItem(row_idx, 4, QtWidgets.QTableWidgetItem("-"))

            # D·∫°ng c√¢u h·ªèi c·ªôt 5
            type_display = {
                'multiple_choice': 'Tr·∫Øc nghi·ªám',
                'true_false': 'ƒê√∫ng/Sai',
                'essay': 'T·ª± lu·∫≠n',
                'short_answer': 'ƒêi·ªÅn ƒë√°p √°n'
            }
            display_type = type_display.get(question_type, question_type)
            self.q_table.setItem(row_idx, 5, QtWidgets.QTableWidgetItem(display_type))

            # M·ª©c ƒë·ªô c·ªôt 6
            try:
                level = str(row_data["do_kho"]) if row_data["do_kho"] else ""
            except (KeyError, TypeError):
                level = ""
            self.q_table.setItem(row_idx, 6, QtWidgets.QTableWidgetItem(level))

            # Tags c·ªôt 7
            self.q_table.setItem(row_idx, 7, QtWidgets.QTableWidgetItem(""))

        # Resize columns
        self.q_table.resizeColumnsToContents()
    def refresh_question_list(self):
        """Refresh l·∫°i danh s√°ch c√¢u h·ªèi hi·ªán t·∫°i"""
        tree_id = self._current_tree_id()
        if tree_id:
            self.load_questions_by_tree(tree_id)
        else:
            self._load_question_rows([])
    def _get_answer_display(self, question_data):
        """L·∫•y text hi·ªÉn th·ªã cho c·ªôt ƒë√°p √°n"""
        question_type = question_data.get("question_type", "")

        if question_type == "multiple_choice":
            # Hi·ªÉn th·ªã ƒë√°p √°n ƒë√∫ng n·∫øu c√≥
            correct = question_data.get("correct_answer", "")
            if correct:
                return f"ƒê√°p √°n: {correct}"
            return "Ch∆∞a c√≥ ƒë√°p √°n"

        elif question_type == "true_false":
            # ƒê·∫øm s·ªë m·ªánh ƒë·ªÅ ƒë√∫ng/sai
            parts = self.db.execute_query("""
                SELECT COUNT(*) as total,
                       SUM(CASE WHEN is_correct = 1 THEN 1 ELSE 0 END) as correct_count
                FROM question_true_false_parts
                WHERE question_id = ?
            """, (question_data["id"],), fetch="one")

            if parts:
                total = parts["total"] or 0
                correct = parts["correct_count"] or 0
                false = total - correct
                return f"{correct}ƒê, {false}S"
            return "Ch∆∞a c√≥ m·ªánh ƒë·ªÅ"

        elif question_type == "essay":
            # Ki·ªÉm tra c√≥ ƒë√°p √°n chi ti·∫øt kh√¥ng
            detailed = question_data.get("detailed_answer", "")
            if detailed and detailed.strip():
                return "C√≥ ƒë√°p √°n"
            return "Ch∆∞a c√≥ ƒë√°p √°n"

        return ""

    def _get_answer_summary(self, question_data):
        """T·∫°o t√≥m t·∫Øt ƒë√°p √°n cho hi·ªÉn th·ªã trong b·∫£ng"""
        question_type = question_data.get("question_type", "multiple_choice")

        if question_type == "multiple_choice":
            # Hi·ªÉn th·ªã ƒë√°p √°n ƒë√∫ng n·∫øu c√≥
            correct = question_data.get("correct_answer")
            if correct:
                return f"ƒê√°p √°n: {correct}"
            else:
                return "Ch∆∞a ch·ªçn ƒë√°p √°n"

        elif question_type == "true_false":
            # ƒê·∫øm s·ªë m·ªánh ƒë·ªÅ ƒë√∫ng/sai
            parts = self.db.execute_query(
                "SELECT COUNT(*) as total, SUM(is_correct) as correct_count FROM question_true_false_parts WHERE question_id=?",
                (question_data["id"],), fetch="one"
            )
            if parts:
                total = parts["total"] or 0
                correct_count = parts["correct_count"] or 0
                false_count = total - correct_count
                return f"{correct_count}ƒê, {false_count}S"
            return "Ch∆∞a c√≥ m·ªánh ƒë·ªÅ"

        elif question_type == "essay":
            # Hi·ªÉn th·ªã c√≥ ƒë√°p √°n hay ch∆∞a
            detailed_answer = question_data.get("detailed_answer", "")
            if detailed_answer and detailed_answer.strip():
                return "C√≥ ƒë√°p √°n chi ti·∫øt"
            else:
                return "Ch∆∞a c√≥ ƒë√°p √°n"

        return ""

    # C·∫¨P NH·∫¨T ph∆∞∆°ng th·ª©c load questions t·ª´ tree
    def load_questions_by_tree(self, tree_id):
        """Load c√¢u h·ªèi theo tree_id - C·∫¨P NH·∫¨T"""
        if not tree_id:
            self._load_question_rows([])
            return

        # Query v·ªõi c·∫•u tr√∫c m·ªõi
        rows = self.db.execute_query("""
            SELECT * FROM question_bank 
            WHERE tree_id=? 
            ORDER BY question_type, created_date DESC
        """, (tree_id,), fetch="all") or []

        self._load_question_rows(rows)

        # Clear selection
        if hasattr(self, 'current_question_id'):
            self.current_question_id = None

        # Setup UI m·∫∑c ƒë·ªãnh
        if hasattr(self, 'multiple_choice_rb'):
            self.multiple_choice_rb.setChecked(True)
            self._setup_multiple_choice_ui()


    def _reload_question_list(self):
        """Reload danh s√°ch c√¢u h·ªèi sau khi thay ƒë·ªïi"""
        tree_id = self._current_tree_id()
        if tree_id:
            self.load_questions_by_tree(tree_id)
        else:
            self._load_question_rows([])
    # Load c√¢u h·ªèi v·ªõi h·ªó tr·ª£ 3 d·∫°ng
    def on_question_select(self):
        """Load c√¢u h·ªèi ƒë∆∞·ª£c ch·ªçn t·ª´ b·∫£ng - S·ª¨A L·ªñI sqlite3.Row"""
        current_row = self.q_table.currentRow()
        if current_row < 0:
            return

        # L·∫•y ID t·ª´ c·ªôt 1
        id_item = self.q_table.item(current_row, 1)
        if not id_item:
            return

        try:
            qid = int(id_item.text())
        except (ValueError, TypeError):
            return

        # Load c√¢u h·ªèi t·ª´ database
        q = self.db.execute_query("SELECT * FROM question_bank WHERE id=?", (qid,), fetch="one")
        if not q:
            return

        self.current_question_id = qid

        # Load n·ªôi dung chung
        if hasattr(self, 'content_text'):
            self.content_text.blockSignals(True)
            try:
                content = q["content_text"] if q["content_text"] else ""
            except (KeyError, TypeError):
                content = ""
            self.content_text.setPlainText(content)
            self.content_text.blockSignals(False)

        # X√°c ƒë·ªãnh lo·∫°i c√¢u h·ªèi - S·ª¨A c√°ch truy c·∫≠p
        try:
            question_type = q["question_type"] if q["question_type"] else "multiple_choice"
        except (KeyError, TypeError):
            question_type = "multiple_choice"

        if hasattr(self, 'question_type_group'):
            if question_type == 'multiple_choice':
                self.multiple_choice_rb.setChecked(True)
                self._setup_multiple_choice_ui()
                self._load_multiple_choice_data(q)
            elif question_type == 'true_false':
                self.true_false_rb.setChecked(True)
                self._setup_true_false_ui()
                self._load_true_false_data(q)
            elif question_type == 'essay':
                self.essay_rb.setChecked(True)
                self._setup_essay_ui()
                self._load_essay_data(q)

        # Update preview
        if hasattr(self, 'update_preview'):
            self.update_preview()

    def _get_row_value(self, row, key, default=""):
        """Helper ƒë·ªÉ l·∫•y gi√° tr·ªã t·ª´ sqlite3.Row m·ªôt c√°ch an to√†n"""
        try:
            value = row[key]
            return value if value is not None else default
        except (KeyError, TypeError, IndexError):
            return default

    def _load_multiple_choice_data(self, question_data):
        """Load d·ªØ li·ªáu cho c√¢u h·ªèi tr·∫Øc nghi·ªám - S·ª¨A sqlite3.Row"""
        if not hasattr(self, 'option_entries'):
            return

        # Load c√°c ƒë√°p √°n - S·ª≠ d·ª•ng helper
        self.option_entries['A'].setPlainText(self._get_row_value(question_data, "option_a", ""))
        self.option_entries['B'].setPlainText(self._get_row_value(question_data, "option_b", ""))
        self.option_entries['C'].setPlainText(self._get_row_value(question_data, "option_c", ""))
        self.option_entries['D'].setPlainText(self._get_row_value(question_data, "option_d", ""))

        # Load ƒë√°p √°n ƒë√∫ng
        correct_answer = self._get_row_value(question_data, "correct_answer", "")
        show_correct = bool(self._get_row_value(question_data, "show_correct_answer", 0))

        # Thi·∫øt l·∫≠p tr·∫°ng th√°i hi·ªÉn th·ªã
        self.show_correct_btn.setChecked(show_correct)
        self._toggle_correct_answer_visibility()

        # Ch·ªçn ƒë√°p √°n ƒë√∫ng n·∫øu c√≥
        if correct_answer and show_correct:
            for button in self.correct_group.buttons():
                if button.text() == correct_answer:
                    button.setChecked(True)
                    break
        else:
            # Ch·ªçn "Kh√¥ng ch·ªçn" n·∫øu kh√¥ng c√≥ ƒë√°p √°n ƒë√∫ng
            for button in self.correct_group.buttons():
                if button.text() == "Kh√¥ng ch·ªçn":
                    button.setChecked(True)
                    break

    def _load_true_false_data(self, question_data):
        """Load d·ªØ li·ªáu cho c√¢u h·ªèi ƒë√∫ng/sai - VERSION v·ªõi helper"""
        if not hasattr(self, 'statement_entries'):
            return

        # Clear form tr∆∞·ªõc
        for i in range(1, 5):
            if i in self.statement_entries:
                self.statement_entries[i].clear()
            if i in self.statement_checkboxes:
                self.statement_checkboxes[i].setChecked(False)
            if i in self.explanation_entries:
                self.explanation_entries[i].clear()
            if i in self.show_explanation_btns:
                self.show_explanation_btns[i].setChecked(False)
            if i in self.explanation_widgets:
                self.explanation_widgets[i].setVisible(False)

        # L·∫•y question_id
        question_id = self._get_row_value(question_data, "id", None)
        if not question_id:
            return

        # Load d·ªØ li·ªáu t·ª´ database
        parts = self.db.execute_query("""
            SELECT * FROM question_true_false_parts 
            WHERE question_id=?
            ORDER BY part_number
        """, (question_id,), fetch="all") or []

        for part in parts:
            part_num = self._get_row_int(part, "part_number", 1)
            if part_num < 1 or part_num > 4:
                continue

            # Load c√°c tr∆∞·ªùng
            if part_num in self.statement_entries:
                self.statement_entries[part_num].setPlainText(
                    self._get_row_value(part, "statement_text", "")
                )

            if part_num in self.statement_checkboxes:
                self.statement_checkboxes[part_num].setChecked(
                    self._get_row_bool(part, "is_correct", False)
                )

            if part_num in self.explanation_entries:
                self.explanation_entries[part_num].setPlainText(
                    self._get_row_value(part, "explanation", "")
                )

            show_explanation = self._get_row_bool(part, "show_explanation", False)
            if part_num in self.show_explanation_btns:
                self.show_explanation_btns[part_num].setChecked(show_explanation)

            if part_num in self.explanation_widgets:
                self.explanation_widgets[part_num].setVisible(show_explanation)

    def _load_essay_data(self, question_data):
        """Load d·ªØ li·ªáu cho c√¢u h·ªèi t·ª± lu·∫≠n - VERSION v·ªõi helper"""
        if not hasattr(self, 'detailed_answer_text'):
            return

        # Load c√°c tr∆∞·ªùng v·ªõi helper
        self.detailed_answer_text.setPlainText(
            self._get_row_value(question_data, "detailed_answer", "")
        )

        if hasattr(self, 'rubric_text'):
            self.rubric_text.setPlainText(
                self._get_row_value(question_data, "rubric", "")
            )

        if hasattr(self, 'max_score_spin'):
            self.max_score_spin.setValue(
                self._get_row_int(question_data, "max_score", 10)
            )

        if hasattr(self, 'keywords_edit'):
            self.keywords_edit.setText(
                self._get_row_value(question_data, "keywords", "")
            )

        if hasattr(self, 'show_answer_checkbox'):
            self.show_answer_checkbox.setChecked(
                self._get_row_bool(question_data, "show_answer", False)
            )

    def load_question(self, qid):
        """Load c√¢u h·ªèi theo ID - LOGIC M·ªöI"""
        if not qid:
            return

        # L·∫•y d·ªØ li·ªáu c√¢u h·ªèi
        q = self.db.execute_query("SELECT * FROM question_bank WHERE id=?", (qid,), fetch="one")
        if not q:
            return

        self.current_question_id = qid

        # Load n·ªôi dung chung
        if hasattr(self, 'content_text'):
            self.content_text.blockSignals(True)
            self.content_text.setPlainText(q["content_text"] or "")
            self.content_text.blockSignals(False)

        # X√°c ƒë·ªãnh lo·∫°i c√¢u h·ªèi v√† setup UI + load data
        question_type = q.get("question_type", "multiple_choice")

        if hasattr(self, 'question_type_group'):
            if question_type == 'multiple_choice':
                self.multiple_choice_rb.setChecked(True)
                self._setup_multiple_choice_ui()
                self._load_multiple_choice_data(q)
            elif question_type == 'true_false':
                self.true_false_rb.setChecked(True)
                self._setup_true_false_ui()
                self._load_true_false_data(q)
            elif question_type == 'essay':
                self.essay_rb.setChecked(True)
                self._setup_essay_ui()
                self._load_essay_data(q)

                # Load tags (gi·ªØ nguy√™n logic c≈©)
        if hasattr(self, 'tags_edit'):
            tags = self.db.execute_query(
                "SELECT tag_name FROM question_tags WHERE question_id=? ORDER BY tag_name",
                (qid,), fetch="all"
            ) or []
            tags_text = ", ".join([tag["tag_name"] for tag in tags])
            self.tags_edit.setText(tags_text)

        # Load l·ªãch s·ª≠ (gi·ªØ nguy√™n)
        if hasattr(self, 'history_table'):
            self._load_question_history(qid)

        # Update preview
        self.update_preview()
    # Load l·ªãch s·ª≠ c√¢u h·ªèi
    def _load_question_history(self, question_id):
        """Load l·ªãch s·ª≠ thay ƒë·ªïi c·ªßa c√¢u h·ªèi"""
        if not hasattr(self, 'history_table'):
            return

        history = self.db.execute_query(
            "SELECT * FROM question_history WHERE question_id=? ORDER BY changed_date DESC LIMIT 50",
            (question_id,), fetch="all"
        ) or []

        self.history_table.setRowCount(0)

        for h in history:
            row_idx = self.history_table.rowCount()
            self.history_table.insertRow(row_idx)

            # Format th·ªùi gian
            time_str = self._get_row_value(h, "changed_date", "")
            if time_str:
                try:
                    from datetime import datetime
                    dt = datetime.fromisoformat(time_str.replace('Z', '+00:00'))
                    formatted_time = dt.strftime("%d/%m/%Y %H:%M")
                except:
                    formatted_time = time_str
            else:
                formatted_time = "-"

            # Set data
            self.history_table.setItem(row_idx, 0, QtWidgets.QTableWidgetItem(formatted_time))
            self.history_table.setItem(row_idx, 1, QtWidgets.QTableWidgetItem(
                self._get_row_value(h, "action_type", "")
            ))

            # Truncate content cho display
            # L·∫•y n·ªôi dung m·ªôt c√°ch an to√†n v√† c·∫Øt b·ªõt ƒë·ªÉ hi·ªÉn th·ªã
            old_content_full = self._get_row_value(h, "old_content", "")
            new_content_full = self._get_row_value(h, "new_content", "")

            old_content_display = (old_content_full[:100] + "...") if len(old_content_full) > 100 else old_content_full
            new_content_display = (new_content_full[:100] + "...") if len(new_content_full) > 100 else new_content_full

            self.history_table.setItem(row_idx, 2, QtWidgets.QTableWidgetItem(old_content_display))
            self.history_table.setItem(row_idx, 3, QtWidgets.QTableWidgetItem(new_content_display))
    # ====================== Save/Update/Delete ======================
    def _current_tree_id(self) -> int | None:
        items = self.tree.selectedItems()
        if not items:
            return None
        return items[0].data(0, Qt.UserRole)

    # L·∫•y lo·∫°i c√¢u h·ªèi hi·ªán t·∫°i
    def _get_current_question_type(self):
        """L·∫•y lo·∫°i c√¢u h·ªèi hi·ªán t·∫°i t·ª´ UI - C·∫¨P NH·∫¨T"""
        if hasattr(self, 'question_type_group'):
            selected_id = self.question_type_group.checkedId()
            if selected_id == 0:
                return 'multiple_choice'
            elif selected_id == 1:
                return 'true_false'
            elif selected_id == 2:
                return 'essay'  # <-- ƒê√É ƒê·ªîI
        return 'multiple_choice'  # M·∫∑c ƒë·ªãnh
    # L∆∞u l·ªãch s·ª≠ thay ƒë·ªïi c√¢u h·ªèi
    def _save_question_history(self, question_id, action_type, old_content, new_content):
        """L∆∞u l·ªãch s·ª≠ thay ƒë·ªïi c√¢u h·ªèi"""
        try:
            self.db.execute_query(
                "INSERT INTO question_history(question_id, action_type, old_content, new_content) VALUES (?,?,?,?)",
                (question_id, action_type, old_content, new_content)
            )
        except Exception as e:
            print(f"L·ªói l∆∞u l·ªãch s·ª≠: {e}")

    def _save_multiple_choice_question(self, content, tree_id, old_content):
        """L∆∞u c√¢u h·ªèi tr·∫Øc nghi·ªám 4 ƒë√°p √°n - C·∫¨P NH·∫¨T"""
        # L·∫•y d·ªØ li·ªáu ƒë√°p √°n
        option_a = self.option_entries['A'].toPlainText().strip()
        option_b = self.option_entries['B'].toPlainText().strip()
        option_c = self.option_entries['C'].toPlainText().strip()
        option_d = self.option_entries['D'].toPlainText().strip()

        # L·∫•y ƒë√°p √°n ƒë√∫ng
        correct_answer = None
        show_correct = self.show_correct_btn.isChecked()

        if show_correct:
            for button in self.correct_group.buttons():
                if button.isChecked() and button.text() != "Kh√¥ng ch·ªçn":
                    correct_answer = button.text()
                    break

        # C·∫≠p nh·∫≠t th·ªùi gian
        from datetime import datetime
        current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

        if self.current_question_id:
            # C·∫≠p nh·∫≠t - set modified_date v·ªõi gi√° tr·ªã c·ª• th·ªÉ
            self.db.execute_query("""
                    UPDATE question_bank SET 
                        content_text=?, question_type=?, option_a=?, option_b=?, option_c=?, option_d=?,
                        correct_answer=?, show_correct_answer=?, tree_id=?, modified_date=?
                    WHERE id=?
                """, (content, 'multiple_choice', option_a, option_b, option_c, option_d,
                      correct_answer, int(show_correct), tree_id, current_time, self.current_question_id))
        else:
            # Th√™m m·ªõi - set c·∫£ created_date v√† modified_date
            new_id = self.db.execute_query("""
                INSERT INTO question_bank(
                    content_text, question_type, option_a, option_b, option_c, option_d,
                    correct_answer, show_correct_answer, tree_id, created_date, modified_date
                ) VALUES (?,?,?,?,?,?,?,?,?,?,?)
            """, (content, 'multiple_choice', option_a, option_b, option_c, option_d,
                  correct_answer, int(show_correct), tree_id, current_time, current_time))

            self.current_question_id = new_id
            self._save_question_history(new_id, "CREATE", "", content)
    # THAY TH·∫æ ph∆∞∆°ng th·ª©c _save_true_false_question()
    def _save_true_false_question(self, content, tree_id, old_content):
        """L∆∞u c√¢u h·ªèi ƒë√∫ng/sai - S·ª¨A ƒê·ªÇ T∆Ø∆†NG TH√çCH QTEXTEDIT"""
        # Validation
        if not content.strip():
            raise ValueError("N·ªôi dung c√¢u h·ªèi kh√¥ng ƒë∆∞·ª£c tr·ªëng")

        # Ki·ªÉm tra c√≥ √≠t nh·∫•t 2 m·ªánh ƒë·ªÅ - S·ª¨A ƒê·ªÇ D√ôNG toPlainText()
        filled_statements = 0
        for i in range(1, 5):
            if self.statement_entries[i].toPlainText().strip():
                filled_statements += 1

        if filled_statements < 2:
            raise ValueError("Ph·∫£i c√≥ √≠t nh·∫•t 2 m·ªánh ƒë·ªÅ")

        if self.current_question_id:
            # C·∫≠p nh·∫≠t c√¢u h·ªèi ch√≠nh
            from datetime import datetime
            current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

            self.db.execute_query("""
                UPDATE question_bank SET 
                    content_text=?, question_type=?, tree_id=?, modified_date=?
                WHERE id=?
            """, (content, 'true_false', tree_id, current_time, self.current_question_id))

            # X√≥a c√°c parts c≈©
            self.db.execute_query(
                "DELETE FROM question_true_false_parts WHERE question_id=?",
                (self.current_question_id,)
            )

            question_id = self.current_question_id
            action = "UPDATE"
        else:
            # Th√™m c√¢u h·ªèi m·ªõi
            question_id = self.db.execute_query("""
                INSERT INTO question_bank(content_text, question_type, tree_id) 
                VALUES (?,?,?)
            """, (content, 'true_false', tree_id))

            self.current_question_id = question_id
            action = "CREATE"

        # L∆∞u c√°c m·ªánh ƒë·ªÅ v√† l·ªùi gi·∫£i - S·ª¨A ƒê·ªÇ D√ôNG toPlainText()
        for i in range(1, 5):
            statement_text = self.statement_entries[i].toPlainText().strip()
            if statement_text:
                is_correct = self.statement_checkboxes[i].isChecked()
                explanation = self.explanation_entries[i].toPlainText().strip()
                show_explanation = self.show_explanation_btns[i].isChecked()

                self.db.execute_query("""
                    INSERT INTO question_true_false_parts(
                        question_id, part_number, statement_text, is_correct, 
                        explanation, show_explanation
                    ) VALUES (?,?,?,?,?,?)
                """, (question_id, i, statement_text, int(is_correct),
                      explanation, int(show_explanation)))

        self._save_question_history(question_id, action, old_content, content)

        if action == "UPDATE":
            QtWidgets.QMessageBox.information(self, "C·∫≠p nh·∫≠t", "ƒê√£ c·∫≠p nh·∫≠t c√¢u h·ªèi ƒë√∫ng/sai.")
        else:
            QtWidgets.QMessageBox.information(self, "Th√™m m·ªõi", "ƒê√£ l∆∞u c√¢u h·ªèi ƒë√∫ng/sai m·ªõi.")
    # THAY TH·∫æ ph∆∞∆°ng th·ª©c _save_short_answer_question() th√†nh _save_essay_question()
    def _save_essay_question(self, content, tree_id, old_content):
        """L∆∞u c√¢u h·ªèi t·ª± lu·∫≠n - C·∫§U TR√öC M·ªöI"""
        # L·∫•y ƒë√°p √°n chi ti·∫øt
        detailed_answer = self.detailed_answer.toPlainText().strip()

        # Validation
        if not content.strip():
            raise ValueError("N·ªôi dung c√¢u h·ªèi kh√¥ng ƒë∆∞·ª£c tr·ªëng")

        if not detailed_answer:
            raise ValueError("ƒê√°p √°n chi ti·∫øt kh√¥ng ƒë∆∞·ª£c tr·ªëng")

        if self.current_question_id:
            # C·∫≠p nh·∫≠t
            self.db.execute_query("""
                UPDATE question_bank SET 
                    content_text=?, question_type=?, detailed_answer=?, tree_id=?,
                    modified_date=CURRENT_TIMESTAMP
                WHERE id=?
            """, (content, 'essay', detailed_answer, tree_id, self.current_question_id))

            self._save_question_history(self.current_question_id, "UPDATE", old_content, content)
            QtWidgets.QMessageBox.information(self, "C·∫≠p nh·∫≠t", "ƒê√£ c·∫≠p nh·∫≠t c√¢u h·ªèi t·ª± lu·∫≠n.")
        else:
            # Th√™m m·ªõi
            new_id = self.db.execute_query("""
                INSERT INTO question_bank(content_text, question_type, detailed_answer, tree_id) 
                VALUES (?,?,?,?)
            """, (content, 'essay', detailed_answer, tree_id))

            self.current_question_id = new_id
            self._save_question_history(new_id, "CREATE", "", content)
            QtWidgets.QMessageBox.information(self, "Th√™m m·ªõi", "ƒê√£ l∆∞u c√¢u h·ªèi t·ª± lu·∫≠n m·ªõi.")

    # C·∫¨P NH·∫¨T ph∆∞∆°ng th·ª©c save_question() ch√≠nh
    def save_question(self):
        """L∆∞u c√¢u h·ªèi - PHI√äN B·∫¢N HO√ÄN CH·ªàNH"""
        try:
            # L·∫•y n·ªôi dung v√† tree_id
            content = self.content_text.toPlainText().strip()
            tree_id = self._current_tree_id()

            if not tree_id:
                QtWidgets.QMessageBox.warning(self, "L·ªói", "Vui l√≤ng ch·ªçn ch·ªß ƒë·ªÅ tr∆∞·ªõc khi l∆∞u.")
                return

            # Validation n·ªôi dung
            if not content or len(content) < 10:
                QtWidgets.QMessageBox.warning(self, "L·ªói", "N·ªôi dung c√¢u h·ªèi ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±")
                return

            # L·∫•y n·ªôi dung c≈© ƒë·ªÉ l∆∞u history
            old_content = ""
            if self.current_question_id:
                old_q = self.db.execute_query(
                    "SELECT content_text FROM question_bank WHERE id=?",
                    (self.current_question_id,), fetch="one"
                )
                if old_q:
                    old_content = old_q["content_text"] or ""

            # X√°c ƒë·ªãnh lo·∫°i c√¢u h·ªèi v√† g·ªçi ph∆∞∆°ng th·ª©c t∆∞∆°ng ·ª©ng
            if self.multiple_choice_rb.isChecked():
                self._save_multiple_choice_question(content, tree_id, old_content)
            elif self.true_false_rb.isChecked():
                self._save_true_false_question(content, tree_id, old_content)
            elif self.essay_rb.isChecked():
                self._save_essay_question(content, tree_id, old_content)

            # Reload danh s√°ch c√¢u h·ªèi
            self._reload_question_list()

            # Th√¥ng b√°o th√†nh c√¥ng
            if self.current_question_id:
                QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ c·∫≠p nh·∫≠t c√¢u h·ªèi")
            else:
                QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ th√™m c√¢u h·ªèi m·ªõi")

            # Update preview v√† stats n·∫øu c√≥
            if hasattr(self, 'update_preview'):
                self.update_preview()
            if hasattr(self, 'update_statistics'):
                self.update_statistics()

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ l∆∞u c√¢u h·ªèi: {e}")
    # L∆∞u tags cho c√¢u h·ªèi
    def _save_question_tags(self):
        """L∆∞u tags cho c√¢u h·ªèi hi·ªán t·∫°i"""
        if not self.current_question_id or not hasattr(self, 'tags_edit'):
            return

        tags_text = self.tags_edit.text().strip()
        if not tags_text:
            return

        # X√≥a tags c≈©
        self.db.execute_query("DELETE FROM question_tags WHERE question_id=?", (self.current_question_id,))

        # Th√™m tags m·ªõi
        tag_names = [tag.strip() for tag in tags_text.split(',') if tag.strip()]
        for tag_name in tag_names:
            try:
                self.db.execute_query(
                    "INSERT INTO question_tags(question_id, tag_name) VALUES (?,?)",
                    (self.current_question_id, tag_name)
                )
            except:
                pass  # Tag ƒë√£ t·ªìn t·∫°i ho·∫∑c l·ªói kh√°c
    def clear_question_form(self):
        self.current_question_id = None
        self.content_text.clear()
        self.correct_group.setExclusive(False)
        for b in self.correct_group.buttons():
            b.setChecked(False)
        self.correct_group.setExclusive(True)
        for ent in self.option_entries.values():
            ent.clear()

    def delete_question(self):
        """X√≥a c√¢u h·ªèi ƒë∆∞·ª£c ch·ªçn"""
        if not self.current_question_id:
            QtWidgets.QMessageBox.warning(self, "Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn c√¢u h·ªèi ƒë·ªÉ xo√°.")
            return

        # X√°c nh·∫≠n x√≥a
        reply = QtWidgets.QMessageBox.question(
            self,
            "X√°c nh·∫≠n x√≥a",
            f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a c√¢u h·ªèi ID: {self.current_question_id}?",
            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
            QtWidgets.QMessageBox.No
        )

        if reply != QtWidgets.QMessageBox.Yes:
            return

        try:
            # X√≥a c√¢u h·ªèi t·ª´ database
            self.db.execute_query("DELETE FROM question_bank WHERE id=?", (self.current_question_id,))

            # Clear form
            self.clear_question_form()

            # Reload danh s√°ch c√¢u h·ªèi - S·ª¨ D·ª§NG PH∆Ø∆†NG TH·ª®C CHU·∫®N
            if hasattr(self, '_reload_question_list'):
                self._reload_question_list()
            else:
                # Fallback n·∫øu kh√¥ng c√≥ _reload_question_list
                tree_id = self._current_tree_id()
                if tree_id:
                    self.load_questions_by_tree(tree_id)

            # Th√¥ng b√°o th√†nh c√¥ng
            QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ x√≥a c√¢u h·ªèi.")

            # Update statistics n·∫øu c√≥
            if hasattr(self, 'update_statistics'):
                self.update_statistics()

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ x√≥a c√¢u h·ªèi: {e}")
    # ====================== Path helpers ======================
    def get_tree_path(self, tree_id: int) -> List[dict]:
        path = []
        while tree_id:
            row = self.db.execute_query(
                "SELECT id, parent_id, name, level FROM exercise_tree WHERE id=?",
                (tree_id,), fetch="one"
            )
            if row:
                path.insert(0, row)
                tree_id = row["parent_id"]
            else:
                break
        return path

    # ====================== Search & Filters ======================
    def get_all_subtree_ids(self, root_id: int) -> List[int]:
        ids = [root_id]
        children = self.db.execute_query("SELECT id FROM exercise_tree WHERE parent_id=?", (root_id,), fetch="all") or []
        for c in children:
            ids.extend(self.get_all_subtree_ids(c["id"]))
        return ids

    def search_questions(self):
        keyword = (self.search_edit.text() or "").strip().lower()
        if not keyword:
            self.on_tree_select()
            return

        items = self.tree.selectedItems()
        if not items:
            QtWidgets.QMessageBox.warning(self, "Ch∆∞a ch·ªçn", "H√£y ch·ªçn th∆∞ m·ª•c ƒë·ªÉ t√¨m trong ƒë√≥.")
            return

        root_id = items[0].data(0, Qt.UserRole)
        all_ids = self.get_all_subtree_ids(root_id)
        if not all_ids:
            return

        placeholders = ",".join(["?"] * len(all_ids))
        query = f"SELECT * FROM question_bank WHERE tree_id IN ({placeholders})"
        rows = self.db.execute_query(query, tuple(all_ids), fetch="all") or []

        # filter theo keyword trong content_text
        rows = [r for r in rows if keyword in (r["content_text"] or "").lower()]
        self._load_question_rows(rows)

    def load_available_subjects(self):
        rows = self.db.execute_query(
            "SELECT DISTINCT name FROM exercise_tree WHERE level='M√¥n' ORDER BY name ASC",
            fetch="all"
        ) or []
        self.subject_cb.blockSignals(True)
        self.subject_cb.clear()
        self.subject_cb.addItem("")
        for r in rows:
            self.subject_cb.addItem(r["name"])
        self.subject_cb.blockSignals(False)

    def load_available_grades(self):
        rows = self.db.execute_query(
            "SELECT DISTINCT name FROM exercise_tree WHERE level='L·ªõp' ORDER BY name ASC",
            fetch="all"
        ) or []
        self.grade_cb.blockSignals(True)
        self.grade_cb.clear()
        self.grade_cb.addItem("")
        for r in rows:
            self.grade_cb.addItem(r["name"])
        self.grade_cb.blockSignals(False)

    def load_available_topics(self):
        subject = self.subject_cb.currentText().strip()
        grade = self.grade_cb.currentText().strip()
        if not subject or not grade:
            self.topic_cb.clear(); self.type_cb.clear()
            return

        rows = self.db.execute_query("""
                SELECT name FROM exercise_tree 
                WHERE level='Ch·ªß ƒë·ªÅ' AND parent_id IN (
                    SELECT id FROM exercise_tree 
                    WHERE name=? AND level='L·ªõp' AND parent_id IN (
                        SELECT id FROM exercise_tree WHERE name=? AND level='M√¥n'
                    )
                )
            """, (grade, subject), fetch="all") or []
        self.topic_cb.blockSignals(True); self.topic_cb.clear(); self.topic_cb.addItem("")
        for r in rows:
            self.topic_cb.addItem(r["name"])
        self.topic_cb.blockSignals(False)

        self.load_available_types()  # reset types theo topic m·ªõi

    def load_available_types(self):
        topic = self.topic_cb.currentText().strip()
        if not topic:
            self.type_cb.clear()
            return
        rows = self.db.execute_query("""
                SELECT name FROM exercise_tree
                WHERE level='D·∫°ng' AND parent_id IN (
                    SELECT id FROM exercise_tree WHERE level='Ch·ªß ƒë·ªÅ' AND name=?
                )
            """, (topic,), fetch="all") or []
        self.type_cb.blockSignals(True); self.type_cb.clear(); self.type_cb.addItem("")
        for r in rows:
            self.type_cb.addItem(r["name"])
        self.type_cb.blockSignals(False)

    def filter_by_combobox(self):
        subject = self.subject_cb.currentText().strip()
        grade = self.grade_cb.currentText().strip()
        topic = self.topic_cb.currentText().strip()
        q_type = self.type_cb.currentText().strip()
        level = self.level_cb.currentText().strip()

        conditions = []
        params: List[object] = []

        if subject and grade:
            conditions.append("""
                EXISTS (
                    SELECT 1 FROM exercise_tree s 
                    WHERE s.id = q.tree_id AND s.level='M·ª©c ƒë·ªô'
                      AND s.parent_id IN (
                          SELECT id FROM exercise_tree WHERE level='D·∫°ng' AND parent_id IN (
                              SELECT id FROM exercise_tree WHERE level='Ch·ªß ƒë·ªÅ' AND parent_id IN (
                                  SELECT id FROM exercise_tree WHERE level='L·ªõp' AND name=? AND parent_id IN (
                                      SELECT id FROM exercise_tree WHERE level='M√¥n' AND name=?
                                  )
                              )
                          )
                      )
                )
            """)
            params.extend([grade, subject])
        elif subject and not grade:
            conditions.append("""
                EXISTS (
                    SELECT 1 FROM exercise_tree s 
                    WHERE s.id = q.tree_id AND s.level='M·ª©c ƒë·ªô'
                      AND s.parent_id IN (
                          SELECT id FROM exercise_tree WHERE level='D·∫°ng' AND parent_id IN (
                              SELECT id FROM exercise_tree WHERE level='Ch·ªß ƒë·ªÅ' AND parent_id IN (
                                  SELECT id FROM exercise_tree WHERE level='L·ªõp' AND parent_id IN (
                                      SELECT id FROM exercise_tree WHERE level='M√¥n' AND name=?
                                  )
                              )
                          )
                      )
                )
            """)
            params.append(subject)
        elif grade and not subject:
            conditions.append("""
                EXISTS (
                    SELECT 1 FROM exercise_tree s 
                    WHERE s.id = q.tree_id AND s.level='M·ª©c ƒë·ªô'
                      AND s.parent_id IN (
                          SELECT id FROM exercise_tree WHERE level='D·∫°ng' AND parent_id IN (
                              SELECT id FROM exercise_tree WHERE level='Ch·ªß ƒë·ªÅ' AND parent_id IN (
                                  SELECT id FROM exercise_tree WHERE level='L·ªõp' AND name=?
                              )
                          )
                      )
                )
            """)
            params.append(grade)

        if topic:
            conditions.append("""
                EXISTS (
                    SELECT 1 FROM exercise_tree s 
                    WHERE s.id = q.tree_id AND s.level='M·ª©c ƒë·ªô'
                      AND s.parent_id IN (
                          SELECT id FROM exercise_tree WHERE level='D·∫°ng' AND parent_id IN (
                              SELECT id FROM exercise_tree WHERE level='Ch·ªß ƒë·ªÅ' AND name=?
                          )
                      )
                )
            """)
            params.append(topic)

        if q_type:
            conditions.append("""
                EXISTS (
                    SELECT 1 FROM exercise_tree s 
                    WHERE s.id = q.tree_id AND s.level='M·ª©c ƒë·ªô'
                      AND s.parent_id IN (
                          SELECT id FROM exercise_tree WHERE level='D·∫°ng' AND name=?
                      )
                )
            """)
            params.append(q_type)

        if level:
            conditions.append("""
                EXISTS (
                    SELECT 1 FROM exercise_tree s 
                    WHERE s.id = q.tree_id AND s.name=? AND s.level='M·ª©c ƒë·ªô'
                )
            """)
            params.append(level)

        where_clause = " AND ".join([c.strip() for c in conditions]) if conditions else "1=1"
        query = f"SELECT q.* FROM question_bank q WHERE {where_clause}"

        rows = self.db.execute_query(query, tuple(params), fetch="all") or []
        self._load_question_rows(rows)

    # ====================== Import from Word ======================
    def import_from_word(self):
        """
        Import Word v·ªõi logic n√¢ng cao, t·ª± ƒë·ªông nh·∫≠n di·ªán lo·∫°i c√¢u h·ªèi
        d·ª±a tr√™n c·∫•u tr√∫c (vƒÉn b·∫£n, g·∫°ch ch√¢n, b·∫£ng).
        """
        try:
            from docx import Document
            from docx.text.paragraph import Paragraph
            from docx.table import Table
            # Th√™m 2 d√≤ng import n√†y ·ªü ƒë·∫ßu file n·∫øu ch∆∞a c√≥
            from docx.oxml.text.paragraph import CT_P
            from docx.oxml.table import CT_Tbl
        except ImportError:
            QtWidgets.QMessageBox.critical(self, "Thi·∫øu th∆∞ vi·ªán",
                                           "Vui l√≤ng c√†i ƒë·∫∑t python-docx: pip install python-docx")
            return

        file_path, _ = QtWidgets.QFileDialog.getOpenFileName(
            self, "Ch·ªçn file Word ch·ª©a c√¢u h·ªèi", "", "Word files (*.docx)")
        if not file_path:
            return

        tree_id = self._current_tree_id()
        if not tree_id:
            QtWidgets.QMessageBox.warning(self, "Thi·∫øu th∆∞ m·ª•c", "Vui l√≤ng ch·ªçn n∆°i l∆∞u c√¢u h·ªèi.")
            return

        # Kh·ªüi t·∫°o pattern matcher v√† danh s√°ch c√¢u h·ªèi
        pattern_matcher = FlexiblePatternMatcher()
        all_questions = []
        errors = []
        current_section = 'multiple_choice'  # M·∫∑c ƒë·ªãnh b·∫Øt ƒë·∫ßu v·ªõi tr·∫Øc nghi·ªám

        try:
            doc = Document(file_path)
            current_question = None

            # Duy·ªát qua t·ª´ng kh·ªëi trong t√†i li·ªáu (vƒÉn b·∫£n ho·∫∑c b·∫£ng)
            for block in doc.element.body:
                if isinstance(block, CT_P):  # N·∫øu kh·ªëi l√† m·ªôt Paragraph (vƒÉn b·∫£n)
                    para = Paragraph(block, doc)
                    line = para.text.strip()
                    if not line:
                        continue

                    # 1. Ki·ªÉm tra ph·∫ßn header (PH·∫¶N I, II, III)
                    section_result = pattern_matcher.detect_section_header(line)
                    if section_result.get('is_section'):
                        current_section = section_result['section_type']
                        continue

                    # 2. Ki·ªÉm tra c√¢u h·ªèi m·ªõi
                    q_result = pattern_matcher.smart_detect_question(line, current_section)
                    if q_result.get('is_question'):
                        # L∆∞u c√¢u h·ªèi c≈© n·∫øu c√≥
                        if current_question:
                            all_questions.append(current_question)

                        # B·∫Øt ƒë·∫ßu c√¢u h·ªèi m·ªõi
                        current_question = {
                            'question_type': q_result['question_type'],
                            'content': q_result['content'],
                            'options': [],
                            'sub_questions': [],
                            'answer': None,
                            'number': q_result.get('number')
                        }
                        continue

                    # 3. X·ª≠ l√Ω n·ªôi dung theo lo·∫°i c√¢u h·ªèi hi·ªán t·∫°i
                    if current_question:
                        if current_section == 'multiple_choice':
                            # X·ª≠ l√Ω ƒë√°p √°n tr·∫Øc nghi·ªám
                            option_result = pattern_matcher.smart_detect_option(line)
                            if option_result.get('is_option'):
                                current_question['options'].append({
                                    'text': f"{option_result['label']}. {option_result['text']}",
                                    'label': option_result['label']
                                })

                                # Ki·ªÉm tra ƒë√°p √°n ƒë√∫ng t·ª´ ƒë·ªãnh d·∫°ng
                                correct_result = pattern_matcher.detect_correct_answer_from_format(line)
                                if correct_result.get('is_correct'):
                                    current_question['answer'] = correct_result['answer']

                                # Ki·ªÉm tra g·∫°ch ch√¢n trong runs
                                is_underlined = any(run.underline for run in para.runs if run.underline)
                                if is_underlined:
                                    current_question['answer'] = option_result['label']
                                continue

                        elif current_section == 'true_false':
                            # X·ª≠ l√Ω sub-question cho ƒë√∫ng/sai
                            sub_result = pattern_matcher.detect_sub_question(line)
                            if sub_result.get('is_sub_question'):
                                current_question['sub_questions'].append({
                                    'label': sub_result['label'],
                                    'content': sub_result['content'],
                                    'is_correct': True  # M·∫∑c ƒë·ªãnh, s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª´ b·∫£ng
                                })
                                continue

                        elif current_section == 'short_answer':
                            # X·ª≠ l√Ω k·∫øt qu·∫£ cho c√¢u tr·∫£ l·ªùi ng·∫Øn
                            result = pattern_matcher.detect_short_answer_result(line)
                            if result.get('is_result'):
                                current_question['answer'] = result['result']
                                continue

                elif isinstance(block, CT_Tbl):  # N·∫øu kh·ªëi l√† b·∫£ng
                    table = Table(block, doc)

                    # Ch·ªâ x·ª≠ l√Ω b·∫£ng cho c√¢u ƒë√∫ng/sai
                    if current_section == 'true_false' and current_question:
                        sub_questions = self._process_true_false_table(table)
                        if sub_questions:
                            current_question['sub_questions'] = sub_questions

            # L∆∞u c√¢u h·ªèi cu·ªëi c√πng
            if current_question:
                all_questions.append(current_question)

        except Exception as e:
            errors.append(f"L·ªói khi ƒë·ªçc file: {str(e)}")
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ ƒë·ªçc file Word: {e}")
            return

    # L∆∞u c√¢u h·ªèi tr·∫£ l·ªùi ng·∫Øn import
    def _save_imported_short_answer(self, question_data, tree_id):
        """L∆∞u c√¢u h·ªèi tr·∫£ l·ªùi ng·∫Øn ƒë∆∞·ª£c import"""
        content = question_data["content"]
        answer = question_data.get("answer", "")

        if not answer:
            return None

        # L∆∞u c√¢u h·ªèi ch√≠nh
        new_id = self.db.execute_query(
            "INSERT INTO question_bank(content_text, correct, question_type, tree_id) VALUES (?,?,?,?)",
            (content, answer, 'short_answer', tree_id)
        )

        return new_id
    def _process_multiple_choice_question(self, lines, start_index, pattern_matcher, validator):
        """
        X·ª≠ l√Ω c√¢u h·ªèi tr·∫Øc nghi·ªám, h·ªó tr·ª£ n·ªôi dung v√† ƒë√°p √°n tr√™n nhi·ªÅu d√≤ng.
        """
        i = start_index
        q_result = pattern_matcher.smart_detect_question(lines[i], 'multiple_choice')
        if not q_result.get('is_question'):
            return None, i + 1

        question = {
            'question_type': 'multiple_choice',
            'content': q_result['content'],
            'options': [],
            'answer': None,
            'line_number': i + 1,
            'errors': []
        }

        i += 1
        current_option = None

        # V√≤ng l·∫∑p ch√≠nh ƒë·ªÉ gom n·ªôi dung c√¢u h·ªèi, ƒë√°p √°n v√† t√¨m c√¢u tr·∫£ l·ªùi
        while i < len(lines):
            line = lines[i]

            # Ki·ªÉm tra xem d√≤ng hi·ªán t·∫°i c√≥ ph·∫£i l√† m·ªôt th√†nh ph·∫ßn m·ªõi kh√¥ng
            next_q = pattern_matcher.smart_detect_question(line, 'multiple_choice')
            next_o = pattern_matcher.smart_detect_option(line)
            next_a = pattern_matcher.smart_detect_answer(line)

            if next_q.get('is_question'):
                # G·∫∑p c√¢u h·ªèi m·ªõi, k·∫øt th√∫c c√¢u h·ªèi hi·ªán t·∫°i
                break

            if next_o.get('is_option'):
                # G·∫∑p ƒë√°p √°n m·ªõi
                current_option = {
                    'text': f"{next_o['label']}. {next_o['text']}",
                    'label': next_o['label']
                }
                question['options'].append(current_option)
            elif next_a.get('is_answer'):
                # G·∫∑p d√≤ng ƒë√°p √°n
                question['answer'] = next_a['answer']
                i += 1
                break  # K·∫øt th√∫c khi t√¨m th·∫•y ƒë√°p √°n
            elif current_option:
                # N·∫øu ƒëang trong m·ªôt ƒë√°p √°n, gh√©p n·ªôi dung v√†o ƒë√°p √°n ƒë√≥
                current_option['text'] += " " + line
            else:
                # N·∫øu ch∆∞a g·∫∑p ƒë√°p √°n n√†o, gh√©p n·ªôi dung v√†o c√¢u h·ªèi
                question['content'] += " " + line

            i += 1

        # Ki·ªÉm tra l·ªói sau khi x·ª≠ l√Ω xong m·ªôt c√¢u h·ªèi
        if not question['options']:
            question['errors'].append(f"D√≤ng {question['line_number']}: C√¢u h·ªèi kh√¥ng c√≥ ƒë√°p √°n n√†o.")
        if not question['answer']:
            question['errors'].append(
                f"D√≤ng {question['line_number']}: Kh√¥ng t√¨m th·∫•y ƒë√°p √°n ƒë√∫ng (v√≠ d·ª•: 'ƒê√°p √°n: A').")

        return question, i
    # X·ª≠ l√Ω c√¢u h·ªèi ƒë√∫ng/sai
    def _process_true_false_question(self, lines, start_index, pattern_matcher, validator):
        """X·ª≠ l√Ω c√¢u h·ªèi ƒë√∫ng/sai v·ªõi sub-questions"""
        i = start_index
        line = lines[i] if i < len(lines) else ""

        # Ph√°t hi·ªán c√¢u h·ªèi ch√≠nh
        q_result = pattern_matcher.smart_detect_question(line, 'true_false')

        if not q_result.get('is_question'):
            return None, i + 1

        question = {
            'question_type': 'true_false',
            'content': q_result['content'],
            'sub_questions': [],
            'line_number': i + 1,
            'confidence': q_result['confidence']
        }

        i += 1

        # ƒê·ªçc c√°c sub-questions a), b), c), d)
        while i < len(lines):
            line = lines[i]

            # Ki·ªÉm tra sub-question
            sub_result = pattern_matcher.detect_sub_question(line)
            if sub_result.get('is_sub_question'):
                question['sub_questions'].append({
                    'label': sub_result['label'],
                    'content': sub_result['content'],
                    'is_correct': None  # S·∫Ω ƒë∆∞·ª£c x√°c ƒë·ªãnh sau ho·∫∑c m·∫∑c ƒë·ªãnh
                })
                i += 1
                continue

            # N·∫øu g·∫∑p c√¢u h·ªèi kh√°c th√¨ d·ª´ng
            next_q = pattern_matcher.smart_detect_question(line, 'true_false')
            if next_q.get('is_question'):
                break

            i += 1

        return question, i

    # X·ª≠ l√Ω c√¢u h·ªèi tr·∫£ l·ªùi ng·∫Øn
    def _process_short_answer_question(self, lines, start_index, pattern_matcher, validator):
        """X·ª≠ l√Ω c√¢u h·ªèi tr·∫£ l·ªùi ng·∫Øn"""
        i = start_index
        line = lines[i] if i < len(lines) else ""

        # Ph√°t hi·ªán c√¢u h·ªèi
        q_result = pattern_matcher.smart_detect_question(line, 'short_answer')

        if not q_result.get('is_question'):
            return None, i + 1

        question = {
            'question_type': 'short_answer',
            'content': q_result['content'],
            'answer': '',
            'line_number': i + 1,
            'confidence': q_result['confidence']
        }

        i += 1

        # T√¨m k·∫øt qu·∫£
        while i < len(lines):
            line = lines[i]

            # Ki·ªÉm tra k·∫øt qu·∫£
            result = pattern_matcher.detect_short_answer_result(line)
            if result.get('is_result'):
                question['answer'] = result['result']
                i += 1
                break

            # N·∫øu g·∫∑p c√¢u h·ªèi kh√°c th√¨ d·ª´ng
            next_q = pattern_matcher.smart_detect_question(line, 'short_answer')
            if next_q.get('is_question'):
                break

            i += 1

        return question, i

    # Hi·ªÉn th·ªã dialog ch·ªçn template import
    def show_import_template_choice(self):
        """Hi·ªÉn th·ªã dialog ch·ªçn template import"""
        dialog = QtWidgets.QDialog(self)
        dialog.setWindowTitle("üìã Ch·ªçn template import")
        dialog.setModal(True)
        dialog.resize(400, 300)

        layout = QtWidgets.QVBoxLayout(dialog)

        layout.addWidget(QtWidgets.QLabel("Ch·ªçn template ph√π h·ª£p v·ªõi format file Word:"))

        # Template options
        template_group = QtWidgets.QButtonGroup(dialog)

        standard_rb = QtWidgets.QRadioButton("üìö Chu·∫©n SGK (C√¢u 1:, A., B., ƒê√°p √°n: A)")
        standard_rb.setChecked(True)
        template_group.addButton(standard_rb, 0)
        layout.addWidget(standard_rb)

        exam_rb = QtWidgets.QRadioButton("üìù ƒê·ªÅ thi (Question 1:, A), B), Answer: A)")
        template_group.addButton(exam_rb, 1)
        layout.addWidget(exam_rb)

        exercise_rb = QtWidgets.QRadioButton("üìñ B√†i t·∫≠p (B√†i 1., 1., 2., Key: A)")
        template_group.addButton(exercise_rb, 2)
        layout.addWidget(exercise_rb)

        custom_rb = QtWidgets.QRadioButton("üîß T·ª± ƒë·ªông ph√°t hi·ªán")
        template_group.addButton(custom_rb, 3)
        layout.addWidget(custom_rb)

        # Buttons
        button_layout = QtWidgets.QHBoxLayout()

        ok_btn = QtWidgets.QPushButton("‚úÖ Ti·∫øp t·ª•c")
        ok_btn.clicked.connect(dialog.accept)

        cancel_btn = QtWidgets.QPushButton("‚ùå H·ªßy")
        cancel_btn.clicked.connect(dialog.reject)

        button_layout.addWidget(ok_btn)
        button_layout.addWidget(cancel_btn)
        layout.addLayout(button_layout)

        if dialog.exec() == QtWidgets.QDialog.Accepted:
            return template_group.checkedId()
        return None

    # Hi·ªÉn th·ªã k·∫øt qu·∫£ import v·ªõi th·ªëng k√™ chi ti·∫øt
    def show_import_results_dialog(self, questions, errors, warnings):
        """Hi·ªÉn th·ªã k·∫øt qu·∫£ import v·ªõi th·ªëng k√™ chi ti·∫øt"""
        dialog = QtWidgets.QDialog(self)
        dialog.setWindowTitle("üìä K·∫øt qu·∫£ Import")
        dialog.setModal(True)
        dialog.resize(600, 400)

        layout = QtWidgets.QVBoxLayout(dialog)

        # Summary
        summary_text = f"""
        üìà T√≥m t·∫Øt k·∫øt qu·∫£:

        ‚úÖ C√¢u h·ªèi h·ª£p l·ªá: {len(questions)}
        ‚ùå L·ªói: {len(errors)}
        ‚ö†Ô∏è C·∫£nh b√°o: {len(warnings)}
        """

        summary_label = QtWidgets.QLabel(summary_text)
        summary_label.setStyleSheet("font-weight: bold; background: #f0f8ff; padding: 10px; border: 1px solid #ddd;")
        layout.addWidget(summary_label)

        # Tabs for details
        tabs = QtWidgets.QTabWidget()

        # Errors tab
        if errors:
            error_text = QtWidgets.QTextEdit()
            error_text.setPlainText("\n".join(errors))
            error_text.setReadOnly(True)
            tabs.addTab(error_text, f"‚ùå L·ªói ({len(errors)})")

        # Warnings tab
        if warnings:
            warning_text = QtWidgets.QTextEdit()
            warning_text.setPlainText("\n".join(warnings))
            warning_text.setReadOnly(True)
            tabs.addTab(warning_text, f"‚ö†Ô∏è C·∫£nh b√°o ({len(warnings)})")

        # Success tab
        if questions:
            success_text = QtWidgets.QTextEdit()
            success_content = []
            for i, q in enumerate(questions[:10], 1):  # Show first 10
                success_content.append(
                    f"{i}. {q['content'][:100]}..." if len(q['content']) > 100 else f"{i}. {q['content']}")
            if len(questions) > 10:
                success_content.append(f"... v√† {len(questions) - 10} c√¢u h·ªèi kh√°c")
            success_text.setPlainText("\n\n".join(success_content))
            success_text.setReadOnly(True)
            tabs.addTab(success_text, f"‚úÖ Th√†nh c√¥ng ({len(questions)})")

        layout.addWidget(tabs)

        # Buttons
        button_layout = QtWidgets.QHBoxLayout()

        continue_btn = QtWidgets.QPushButton("‚úÖ Ti·∫øp t·ª•c Import")
        continue_btn.clicked.connect(dialog.accept)

        cancel_btn = QtWidgets.QPushButton("‚ùå H·ªßy")
        cancel_btn.clicked.connect(dialog.reject)

        button_layout.addWidget(continue_btn)
        button_layout.addWidget(cancel_btn)
        layout.addLayout(button_layout)

        return dialog.exec() == QtWidgets.QDialog.Accepted

    # X·ª≠ l√Ω c√¢u h·ªèi import v·ªõi 3 d·∫°ng
    def _process_enhanced_imported_questions(self, questions, tree_id):
        """X·ª≠ l√Ω v√† l∆∞u c√¢u h·ªèi v·ªõi enhanced validation cho 3 d·∫°ng"""
        inserted = 0

        for q in questions:
            try:
                question_type = q.get("question_type", "multiple_choice")
                content = q["content"]

                if question_type == "multiple_choice":
                    new_id = self._save_imported_multiple_choice(q, tree_id)
                elif question_type == "true_false":
                    new_id = self._save_imported_true_false(q, tree_id)
                elif question_type == "short_answer":
                    new_id = self._save_imported_short_answer(q, tree_id)
                else:
                    continue

                if new_id:
                    # Save import history
                    self._save_question_history(new_id, "IMPORT", "", content)
                    inserted += 1

            except Exception as e:
                print(f"L·ªói khi l∆∞u c√¢u h·ªèi: {e}")

        # Reload view v√† th√¥ng b√°o
        rows = self.db.execute_query("SELECT * FROM question_bank WHERE tree_id=?", (tree_id,), fetch="all") or []
        self._load_question_rows(rows)
        QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ th√™m {inserted} c√¢u h·ªèi t·ª´ file Word.")

    # L∆∞u c√¢u h·ªèi tr·∫Øc nghi·ªám import
    def _save_imported_multiple_choice(self, question_data, tree_id):
        """L∆∞u c√¢u h·ªèi tr·∫Øc nghi·ªám ƒë∆∞·ª£c import"""
        content = question_data["content"]
        answer = question_data["answer"]
        raw_options = question_data["options"]

        opts_data = []
        for opt in raw_options:
            label = opt.get('label', '')
            text = opt.get('text', '')
            if label and text:
                is_correct = (label == answer)
                opts_data.append({
                    "text": text,
                    "is_correct": is_correct
                })

        if opts_data:
            return self.db.execute_query(
                "INSERT INTO question_bank(content_text, options, correct, question_type, tree_id) VALUES (?,?,?,?,?)",
                (content, json.dumps(opts_data, ensure_ascii=False), answer, 'multiple_choice', tree_id)
            )
        return None

    # L∆∞u c√¢u h·ªèi ƒë√∫ng/sai import
    def _save_imported_true_false(self, question_data, tree_id):
        """L∆∞u c√¢u h·ªèi ƒë√∫ng/sai ƒë∆∞·ª£c import"""
        content = question_data["content"]
        sub_questions = question_data.get("sub_questions", [])

        if len(sub_questions) < 2:
            return None

        # L∆∞u c√¢u h·ªèi ch√≠nh
        new_id = self.db.execute_query(
            "INSERT INTO question_bank(content_text, question_type, sub_questions, tree_id) VALUES (?,?,?,?)",
            (content, 'true_false', json.dumps(sub_questions, ensure_ascii=False), tree_id)
        )

        # L∆∞u sub-parts
        for i, sub in enumerate(sub_questions):
            # M·∫∑c ƒë·ªãnh t·∫•t c·∫£ l√† ƒë√∫ng n·∫øu kh√¥ng c√≥ th√¥ng tin
            is_correct = sub.get("is_correct", True)
            self.db.execute_query(
                "INSERT INTO question_sub_parts(question_id, part_label, part_content, is_correct, part_order) VALUES (?,?,?,?,?)",
                (new_id, sub["label"], sub["content"], int(is_correct), i)
            )

        return new_id

    # L∆∞u c√¢u h·ªèi tr·∫£ l·ªùi ng·∫Øn import
    def _save_imported_short_answer(self, question_data, tree_id):
        """L∆∞u c√¢u h·ªèi tr·∫£ l·ªùi ng·∫Øn ƒë∆∞·ª£c import"""
        content = question_data["content"]
        answer = question_data.get("answer", "")

        if not answer:
            return None

        # Chu·∫©n b·ªã answer data
        answer_data = {
            "main_answer": answer,
            "answer_type": "S·ªë nguy√™n",  # M·∫∑c ƒë·ªãnh
            "alternative_answers": []
        }

        return self.db.execute_query(
            "INSERT INTO question_bank(content_text, correct, question_type, options, tree_id) VALUES (?,?,?,?,?)",
            (content, answer, 'short_answer', json.dumps(answer_data, ensure_ascii=False), tree_id)
        )

    # ====================== Misc ======================
    def toggle_tree_panel(self):
        # ·∫©n/hi·ªán panel tr√°i
        w = self.tree.parentWidget()
        w.setVisible(not w.isVisible())
    # T√¨m ki·∫øm c√¢u h·ªèi theo nhi·ªÅu ti√™u ch√≠
    def advanced_search(self):
        """T√¨m ki·∫øm c√¢u h·ªèi theo n·ªôi dung, ƒë·ªô kh√≥, ch·ªß ƒë·ªÅ"""
        search_text = self.search_edit.text().strip()
        selected_subject = self.subject_cb.currentText()
        selected_grade = self.grade_cb.currentText()
        selected_topic = self.topic_cb.currentText()
        selected_type = self.type_cb.currentText()
        selected_level = self.level_cb.currentText()

        conditions = []
        params = []

        if search_text:
            conditions.append("content_text LIKE ?")
            params.append(f"%{search_text}%")

        # T√¨m ki·∫øm theo c√¢y ph√¢n c·∫•p
        if selected_subject or selected_grade or selected_topic or selected_type or selected_level:
            tree_conditions = []
            tree_params = []

            if selected_level:
                tree_conditions.append("s.name = ? AND s.level = 'M·ª©c ƒë·ªô'")
                tree_params.append(selected_level)

            if selected_type:
                tree_conditions.append("s.parent_id IN (SELECT id FROM exercise_tree WHERE name = ? AND level = 'D·∫°ng')")
                tree_params.append(selected_type)

            if selected_topic:
                tree_conditions.append("s.parent_id IN (SELECT id FROM exercise_tree WHERE name = ? AND level = 'Ch·ªß ƒë·ªÅ')")
                tree_params.append(selected_topic)

            if tree_conditions:
                tree_query = " AND ".join(tree_conditions)
                conditions.append(f"EXISTS (SELECT 1 FROM exercise_tree s WHERE s.id = question_bank.tree_id AND {tree_query})")
                params.extend(tree_params)

        where_clause = " AND ".join(conditions) if conditions else "1=1"
        query = f"SELECT * FROM question_bank WHERE {where_clause}"

        rows = self.db.execute_query(query, tuple(params), fetch="all") or []
        self._load_question_rows(rows)

        QtWidgets.QMessageBox.information(self, "K·∫øt qu·∫£ t√¨m ki·∫øm", f"T√¨m th·∫•y {len(rows)} c√¢u h·ªèi.")

    # Export v·ªõi h·ªó tr·ª£ 3 d·∫°ng c√¢u h·ªèi
    def export_to_word(self):
        """Xu·∫•t danh s√°ch c√¢u h·ªèi ra file Word v·ªõi h·ªó tr·ª£ 3 d·∫°ng"""
        tree_id = self._current_tree_id()
        if not tree_id:
            QtWidgets.QMessageBox.warning(self, "Ch∆∞a ch·ªçn th∆∞ m·ª•c", "Vui l√≤ng ch·ªçn th∆∞ m·ª•c ƒë·ªÉ xu·∫•t.")
            return

        file_path, _ = QtWidgets.QFileDialog.getSaveFileName(self, "L∆∞u file Word", "", "Word files (*.docx)")
        if not file_path:
            return

        try:
            from docx import Document
            from docx.shared import Inches

            doc = Document()
            doc.add_heading('NG√ÇN H√ÄNG C√ÇU H·ªéI', 0)

            # Th√™m th√¥ng tin ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c
            path_info = self.get_tree_path(tree_id)
            if path_info:
                path_text = " > ".join([p["name"] for p in path_info])
                doc.add_paragraph(f"ƒê∆∞·ªùng d·∫´n: {path_text}")

            # L·∫•y v√† ph√¢n lo·∫°i c√¢u h·ªèi
            rows = self.db.execute_query("SELECT * FROM question_bank WHERE tree_id=? ORDER BY question_type, id",
                                         (tree_id,), fetch="all") or []

            # Ph√¢n lo·∫°i theo d·∫°ng
            questions_by_type = {
                'multiple_choice': [],
                'true_false': [],
                'short_answer': []
            }

            for row in rows:
                q_type = row.get("question_type", "multiple_choice")
                questions_by_type[q_type].append(row)

            # Export t·ª´ng ph·∫ßn
            section_num = 1

            # PH·∫¶N I: Tr·∫Øc nghi·ªám th√¥ng th∆∞·ªùng
            if questions_by_type['multiple_choice']:
                doc.add_heading(f'PH·∫¶N {section_num}. C√¢u tr·∫Øc nghi·ªám v·ªõi nhi·ªÅu ph∆∞∆°ng √°n l·ª±a ch·ªçn', level=1)
                doc.add_paragraph(
                    f'Th√≠ sinh tr·∫£ l·ªùi t·ª´ c√¢u 1 ƒë·∫øn c√¢u {len(questions_by_type["multiple_choice"])}. M·ªói c√¢u h·ªèi, th√≠ sinh ch·ªâ ch·ªçn m·ªôt ph∆∞∆°ng √°n.')

                for i, row in enumerate(questions_by_type['multiple_choice'], 1):
                    doc.add_paragraph(f'C√¢u {i}. {row["content_text"]}', style='Heading 3')

                    try:
                        options = json.loads(row["options"] or "[]")
                        for opt in options:
                            doc.add_paragraph(opt["text"], style='List Bullet')
                    except json.JSONDecodeError:
                        doc.add_paragraph("L·ªói: Kh√¥ng th·ªÉ ƒë·ªçc ƒë√°p √°n")

                    doc.add_paragraph("")  # D√≤ng tr·ªëng
                section_num += 1

            # PH·∫¶N II: ƒê√∫ng/Sai
            if questions_by_type['true_false']:
                doc.add_heading(f'PH·∫¶N {section_num}. C√¢u tr·∫Øc nghi·ªám ƒë√∫ng sai', level=1)
                doc.add_paragraph(
                    f'Th√≠ sinh tr·∫£ l·ªùi t·ª´ c√¢u 1 ƒë·∫øn c√¢u {len(questions_by_type["true_false"])}. Trong m·ªói √Ω a), b), c), d) ·ªü m·ªói c√¢u, th√≠ sinh ch·ªçn ƒë√∫ng ho·∫∑c sai (ƒëi·ªÅn d·∫•u X v√†o √¥ ch·ªçn)')

                for i, row in enumerate(questions_by_type['true_false'], 1):
                    doc.add_paragraph(f'C√¢u {i}. {row["content_text"]}', style='Heading 3')

                    # T·∫°o b·∫£ng cho ƒë√∫ng/sai
                    table = doc.add_table(rows=1, cols=3)
                    table.style = 'Table Grid'

                    # Header
                    header_cells = table.rows[0].cells
                    header_cells[0].text = 'Kh·∫≥ng ƒë·ªãnh'
                    header_cells[1].text = 'ƒê√∫ng'
                    header_cells[2].text = 'Sai'

                    # L·∫•y sub-questions
                    sub_parts = self.db.execute_query(
                        "SELECT * FROM question_sub_parts WHERE question_id=? ORDER BY part_order",
                        (row["id"],), fetch="all"
                    ) or []

                    for sub in sub_parts:
                        row_cells = table.add_row().cells
                        row_cells[0].text = f'{sub["part_label"]} {sub["part_content"]}'
                        row_cells[1].text = 'X' if sub["is_correct"] else ''
                        row_cells[2].text = '' if sub["is_correct"] else 'X'

                    doc.add_paragraph("")  # D√≤ng tr·ªëng
                section_num += 1

            # PH·∫¶N III: Tr·∫£ l·ªùi ng·∫Øn
            if questions_by_type['short_answer']:
                doc.add_heading(f'PH·∫¶N {section_num}. C√¢u tr·∫Øc nghi·ªám tr·∫£ l·ªùi ng·∫Øn', level=1)
                doc.add_paragraph(f'Th√≠ sinh tr·∫£ l·ªùi t·ª´ c√¢u 1 ƒë·∫øn c√¢u {len(questions_by_type["short_answer"])}.')

                for i, row in enumerate(questions_by_type['short_answer'], 1):
                    doc.add_paragraph(f'C√¢u {i}. {row["content_text"]}', style='Heading 3')
                    doc.add_paragraph(f'K·∫øt qu·∫£: {row["correct"]}')
                    doc.add_paragraph("")  # D√≤ng tr·ªëng

            doc.save(file_path)
            total_questions = sum(len(questions_by_type[key]) for key in questions_by_type)
            QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng",
                                              f"ƒê√£ xu·∫•t {total_questions} c√¢u h·ªèi ra file Word v·ªõi {section_num - 1} ph·∫ßn.")

        except ImportError:
            QtWidgets.QMessageBox.critical(self, "Thi·∫øu th∆∞ vi·ªán", "C·∫ßn c√†i ƒë·∫∑t python-docx: pip install python-docx")
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ xu·∫•t file: {e}")

    # Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa c√¢u h·ªèi ƒë∆∞·ª£c import
    def _validate_imported_question(self, question, line_num):
        """Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa c√¢u h·ªèi import"""
        errors = []

        if not question["content"]:
            errors.append(f"D√≤ng {line_num}: Thi·∫øu n·ªôi dung c√¢u h·ªèi")

        if len(question["options"]) < 2:
            errors.append(f"D√≤ng {line_num}: C·∫ßn √≠t nh·∫•t 2 ƒë√°p √°n")

        if not question["answer"] or question["answer"] not in "ABCDE":
            errors.append(f"D√≤ng {line_num}: ƒê√°p √°n kh√¥ng h·ª£p l·ªá")

        return errors

    # X·ª≠ l√Ω v√† l∆∞u c√°c c√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c validate
    def _process_imported_questions(self, questions, tree_id):
        """X·ª≠ l√Ω v√† l∆∞u c√¢u h·ªèi import"""
        inserted = 0
        for q in questions:
            try:
                content = q["content"]
                answer = q["answer"]
                raw_options = q["options"]

                opts_data = []
                for opt in raw_options:
                    if "." not in opt:
                        continue
                    label, text = opt.split(".", 1)
                    label = label.strip().upper()
                    if label not in "ABCDE":
                        continue
                    is_correct = (label == answer)
                    opts_data.append({
                        "text": f"{label}. {text.strip()}",
                        "is_correct": is_correct
                    })

                if opts_data:
                    self.db.execute_query(
                        "INSERT INTO question_bank(content_text, options, correct, tree_id) VALUES (?,?,?,?)",
                        (content, json.dumps(opts_data, ensure_ascii=False), answer, tree_id)
                    )
                    inserted += 1

            except Exception as e:
                print(f"L·ªói khi l∆∞u c√¢u h·ªèi: {e}")

        # Reload view v√† th√¥ng b√°o
        rows = self.db.execute_query("SELECT * FROM question_bank WHERE tree_id=?", (tree_id,), fetch="all") or []
        self._load_question_rows(rows)
        QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ th√™m {inserted} c√¢u h·ªèi t·ª´ file Word.")
    def open_tree_manager(self):
        # C·ªë g·∫Øng m·ªü b·∫£n Qt n·∫øu b·∫°n c√≥ s·∫µn; n·∫øu kh√¥ng, th√¥ng b√°o.
        try:
            from ui_qt.windows.exercise_tree_manager_qt import ExerciseTreeManagerQt  # type: ignore
            dlg = ExerciseTreeManagerQt(self.db, parent=self)
            dlg.show()
        except Exception:
            QtWidgets.QMessageBox.information(
                self, "Th√¥ng tin",
                "Ch∆∞a c√≥ c·ª≠a s·ªï 'Qu·∫£n l√Ω c√¢y' b·∫£n PySide6. B·∫°n c√≥ th·ªÉ m·ªü sau."
            )
    # T·∫°o c√¢u h·ªèi m·ªõi
    def new_question(self):
        """T·∫°o c√¢u h·ªèi m·ªõi"""
        self.clear_question_form()
        self.content_text.setFocus()

    # Focus v√†o √¥ t√¨m ki·∫øm
    def focus_search(self):
        """Focus v√†o √¥ t√¨m ki·∫øm"""
        self.search_edit.setFocus()
        self.search_edit.selectAll()

    # L√†m m·ªõi to√†n b·ªô
    def refresh_all(self):
        """L√†m m·ªõi to√†n b·ªô d·ªØ li·ªáu"""
        self.refresh_tree()
        self.load_available_subjects()
        self.load_available_grades()
        self.on_tree_select()
        self.update_statistics()

    # X√≥a b·ªô l·ªçc
    def clear_filters(self):
        """X√≥a t·∫•t c·∫£ b·ªô l·ªçc"""
        self.subject_cb.setCurrentIndex(0)
        self.grade_cb.setCurrentIndex(0)
        self.topic_cb.setCurrentIndex(0)
        self.type_cb.setCurrentIndex(0)
        self.level_cb.setCurrentIndex(0)
        self.on_tree_select()

    # Context menu cho b·∫£ng
    def show_table_context_menu(self, position):
        """Hi·ªÉn th·ªã context menu cho b·∫£ng c√¢u h·ªèi"""
        if not self.q_table.itemAt(position):
            return

        menu = QtWidgets.QMenu(self)

        # C√°c action c∆° b·∫£n
        edit_action = menu.addAction("‚úèÔ∏è Ch·ªânh s·ª≠a")
        edit_action.triggered.connect(self.edit_selected_question)

        duplicate_action = menu.addAction("üìã Nh√¢n b·∫£n")
        duplicate_action.triggered.connect(self.duplicate_question)

        menu.addSeparator()

        # Tag v√† bookmark
        tag_menu = menu.addMenu("üè∑Ô∏è Th·∫ª")
        tag_menu.addAction("Th√™m th·∫ª m·ªõi").triggered.connect(self.add_tag_to_question)
        tag_menu.addAction("Qu·∫£n l√Ω th·∫ª").triggered.connect(self.manage_question_tags)

        bookmark_action = menu.addAction("‚≠ê Bookmark")
        bookmark_action.triggered.connect(self.bookmark_question)

        menu.addSeparator()

        # Export options
        export_menu = menu.addMenu("üì§ Xu·∫•t")
        export_menu.addAction("Xu·∫•t c√¢u h·ªèi n√†y ra Word").triggered.connect(self.export_selected_question)
        export_menu.addAction("Xu·∫•t c√¢u h·ªèi n√†y ra PDF").triggered.connect(self.export_selected_to_pdf)

        menu.addSeparator()

        # X√≥a
        delete_action = menu.addAction("üóëÔ∏è X√≥a")
        delete_action.triggered.connect(self.delete_question)

        menu.exec(self.q_table.mapToGlobal(position))

    def edit_selected_question(self):
        """Ch·ªânh s·ª≠a c√¢u h·ªèi ƒë∆∞·ª£c ch·ªçn"""
        current_row = self.q_table.currentRow()
        if current_row >= 0:
            self.on_question_select()

    def duplicate_question(self):
        """Nh√¢n b·∫£n c√¢u h·ªèi hi·ªán t·∫°i"""
        if not self.current_question_id:
            QtWidgets.QMessageBox.warning(self, "Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn c√¢u h·ªèi ƒë·ªÉ nh√¢n b·∫£n.")
            return

        # L·∫•y d·ªØ li·ªáu c√¢u h·ªèi hi·ªán t·∫°i
        q = self.db.execute_query("SELECT * FROM question_bank WHERE id=?", (self.current_question_id,), fetch="one")
        if not q:
            QtWidgets.QMessageBox.warning(self, "L·ªói", "Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi ƒë·ªÉ nh√¢n b·∫£n.")
            return

        try:
            # T·∫°o c√¢u h·ªèi m·ªõi v·ªõi n·ªôi dung t∆∞∆°ng t·ª±
            content = f"[COPY] {q['content_text']}"

            self.db.execute_query(
                "INSERT INTO question_bank(content_text, options, correct, tree_id) VALUES (?,?,?,?)",
                (content, q["options"], q["correct"], q["tree_id"])
            )

            # Reload danh s√°ch
            tree_id = self._current_tree_id()
            if tree_id:
                rows = self.db.execute_query("SELECT * FROM question_bank WHERE tree_id=?", (tree_id,),
                                             fetch="all") or []
                self._load_question_rows(rows)

            QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ nh√¢n b·∫£n c√¢u h·ªèi.")

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ nh√¢n b·∫£n: {e}")
    def add_tag_to_question(self):
        """Th√™m tag cho c√¢u h·ªèi ƒë∆∞·ª£c ch·ªçn"""
        if not self.current_question_id:
            QtWidgets.QMessageBox.warning(self, "Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn c√¢u h·ªèi ƒë·ªÉ th√™m tag.")
            return

        tag_name, ok = QtWidgets.QInputDialog.getText(self, "Th√™m tag", "T√™n tag:")
        if ok and tag_name.strip():
            try:
                self.db.execute_query(
                    "INSERT INTO question_tags(question_id, tag_name) VALUES (?,?)",
                    (self.current_question_id, tag_name.strip())
                )

                # Reload table ƒë·ªÉ hi·ªÉn th·ªã tag m·ªõi
                tree_id = self._current_tree_id()
                if tree_id:
                    rows = self.db.execute_query("SELECT * FROM question_bank WHERE tree_id=?", (tree_id,),
                                                 fetch="all") or []
                    self._load_question_rows(rows)

                QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ th√™m tag '{tag_name}'")

            except Exception as e:
                QtWidgets.QMessageBox.warning(self, "L·ªói", f"Kh√¥ng th·ªÉ th√™m tag: {e}")

        # Qu·∫£n l√Ω tags c·ªßa c√¢u h·ªèi

    def manage_question_tags(self):
        """Qu·∫£n l√Ω tags c·ªßa c√¢u h·ªèi hi·ªán t·∫°i"""
        if not self.current_question_id:
            QtWidgets.QMessageBox.warning(self, "Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn c√¢u h·ªèi ƒë·ªÉ qu·∫£n l√Ω tags.")
            return

        dialog = QtWidgets.QDialog(self)
        dialog.setWindowTitle("üè∑Ô∏è Qu·∫£n l√Ω Tags")
        dialog.setModal(True)
        dialog.resize(400, 300)

        layout = QtWidgets.QVBoxLayout(dialog)

        # Danh s√°ch tags hi·ªán t·∫°i
        layout.addWidget(QtWidgets.QLabel("Tags hi·ªán t·∫°i:"))
        tags_list = QtWidgets.QListWidget()

        # Load tags c·ªßa c√¢u h·ªèi
        current_tags = self.db.execute_query(
            "SELECT * FROM question_tags WHERE question_id=?",
            (self.current_question_id,), fetch="all"
        ) or []

        for tag in current_tags:
            item = QtWidgets.QListWidgetItem(tag["tag_name"])
            item.setData(Qt.UserRole, tag["id"])
            tags_list.addItem(item)

        layout.addWidget(tags_list)

        # Buttons
        button_layout = QtWidgets.QHBoxLayout()

        add_btn = QtWidgets.QPushButton("‚ûï Th√™m")
        add_btn.clicked.connect(lambda: self.add_tag_to_question())

        remove_btn = QtWidgets.QPushButton("‚ùå X√≥a")
        remove_btn.clicked.connect(lambda: self.remove_selected_tag(tags_list, dialog))

        close_btn = QtWidgets.QPushButton("ƒê√≥ng")
        close_btn.clicked.connect(dialog.accept)

        button_layout.addWidget(add_btn)
        button_layout.addWidget(remove_btn)
        button_layout.addWidget(close_btn)

        layout.addLayout(button_layout)

        dialog.exec()

        # Bookmark c√¢u h·ªèi

    def bookmark_question(self):
        """Bookmark c√¢u h·ªèi hi·ªán t·∫°i"""
        if not self.current_question_id:
            QtWidgets.QMessageBox.warning(self, "Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn c√¢u h·ªèi ƒë·ªÉ bookmark.")
            return

        bookmark_name, ok = QtWidgets.QInputDialog.getText(
            self, "Bookmark c√¢u h·ªèi", "T√™n bookmark:", text=f"Bookmark {self.current_question_id}"
        )

        if ok and bookmark_name.strip():
            try:
                self.db.execute_query(
                    "INSERT INTO question_bookmarks(question_id, bookmark_name) VALUES (?,?)",
                    (self.current_question_id, bookmark_name.strip())
                )
                QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ bookmark v·ªõi t√™n '{bookmark_name}'")

            except Exception as e:
                QtWidgets.QMessageBox.warning(self, "L·ªói", f"Kh√¥ng th·ªÉ bookmark: {e}")

        # Formatting functions cho text editor

    def format_bold(self):
        """ƒê·ªãnh d·∫°ng ch·ªØ ƒë·∫≠m"""
        if hasattr(self, 'content_text') and isinstance(self.content_text, QtWidgets.QTextEdit):
            cursor = self.content_text.textCursor()
            fmt = cursor.charFormat()
            fmt.setFontWeight(QtGui.QFont.Bold if fmt.fontWeight() != QtGui.QFont.Bold else QtGui.QFont.Normal)
            cursor.setCharFormat(fmt)

    def format_italic(self):
        """ƒê·ªãnh d·∫°ng ch·ªØ nghi√™ng"""
        if hasattr(self, 'content_text') and isinstance(self.content_text, QtWidgets.QTextEdit):
            cursor = self.content_text.textCursor()
            fmt = cursor.charFormat()
            fmt.setFontItalic(not fmt.fontItalic())
            cursor.setCharFormat(fmt)

    def insert_math(self):
        """Ch√®n c√¥ng th·ª©c to√°n h·ªçc"""
        formula, ok = QtWidgets.QInputDialog.getText(self, "Ch√®n c√¥ng th·ª©c", "Nh·∫≠p c√¥ng th·ª©c LaTeX:")
        if ok and formula.strip():
            self.content_text.insertPlainText(f"$${formula.strip()}$$")

    def insert_image(self):
        """Ch√®n h√¨nh ·∫£nh"""
        file_path, _ = QtWidgets.QFileDialog.getOpenFileName(
            self, "Ch·ªçn h√¨nh ·∫£nh", "", "Image files (*.png *.jpg *.jpeg *.gif *.bmp)"
        )
        if file_path:
            self.content_text.insertPlainText(f"[H√¨nh ·∫£nh: {file_path}]")

        # C·∫≠p nh·∫≠t preview real-time

    # Preview v·ªõi h·ªó tr·ª£ 3 d·∫°ng c√¢u h·ªèi
    def update_preview(self):
        """C·∫≠p nh·∫≠t preview c√¢u h·ªèi cho 3 d·∫°ng"""
        if not hasattr(self, 'preview_widget'):
            return

        content = self.content_text.toPlainText() if hasattr(self, 'content_text') else ""
        question_type = self._get_current_question_type()

        # Base HTML
        html = f"""
        <div style="font-family: Arial, sans-serif; line-height: 1.6;">
            <h3 style="color: #2c3e50; border-bottom: 2px solid #3498db; padding-bottom: 10px;">
                üìù {self._get_question_type_display_name(question_type)}
            </h3>
            <p style="background: #f8f9fa; padding: 15px; border-left: 4px solid #007bff; margin: 10px 0;">
                {content or '<em>Ch∆∞a c√≥ n·ªôi dung c√¢u h·ªèi...</em>'}
            </p>
        """

        if question_type == 'multiple_choice':
            html += self._generate_multiple_choice_preview()
        elif question_type == 'true_false':
            html += self._generate_true_false_preview()
        elif question_type == 'short_answer':
            html += self._generate_short_answer_preview()

        html += "</div>"
        self.preview_widget.setHtml(html)

    # L·∫•y t√™n hi·ªÉn th·ªã cho lo·∫°i c√¢u h·ªèi
    def _get_question_type_display_name(self, question_type):
        """L·∫•y t√™n hi·ªÉn th·ªã cho lo·∫°i c√¢u h·ªèi"""
        names = {
            'multiple_choice': 'C√¢u h·ªèi Tr·∫Øc nghi·ªám',
            'true_false': 'C√¢u h·ªèi ƒê√∫ng/Sai',
            'short_answer': 'C√¢u h·ªèi Tr·∫£ l·ªùi ng·∫Øn'
        }
        return names.get(question_type, 'C√¢u h·ªèi')

    # Preview cho tr·∫Øc nghi·ªám
    def _generate_multiple_choice_preview(self):
        """T·∫°o preview cho c√¢u h·ªèi tr·∫Øc nghi·ªám"""
        html = "<h4 style='color: #2c3e50; margin-top: 20px;'>üìò ƒê√°p √°n:</h4>"

        if hasattr(self, 'option_entries'):
            for label, entry in self.option_entries.items():
                text = entry.text().strip() if entry.text() else f"<em>Ch∆∞a c√≥ ƒë√°p √°n {label}</em>"

                is_correct = False
                if hasattr(self, 'correct_group'):
                    for btn in self.correct_group.buttons():
                        if btn.isChecked() and btn.text() == label:
                            is_correct = True
                            break

                style = "background: #d4edda; border-left: 4px solid #28a745;" if is_correct else "background: #f8f9fa;"
                html += f"""
                <div style="{style} padding: 10px; margin: 5px 0; border-radius: 4px;">
                    <strong>{label}.</strong> {text}
                    {'<span style="color: #28a745; font-weight: bold;"> ‚úì (ƒê√°p √°n ƒë√∫ng)</span>' if is_correct else ''}
                </div>
                """

        return html

    # Preview cho ƒë√∫ng/sai
    def _generate_true_false_preview(self):
        """T·∫°o preview cho c√¢u h·ªèi ƒë√∫ng/sai"""
        html = "<h4 style='color: #2c3e50; margin-top: 20px;'>‚úÖ‚ùå C√°c ph·∫ßn ƒë√°nh gi√°:</h4>"

        if hasattr(self, 'sub_question_entries'):
            for label, entry in self.sub_question_entries.items():
                text = entry.text().strip() if entry.text() else f"<em>Ch∆∞a c√≥ n·ªôi dung ph·∫ßn {label}</em>"

                is_correct = self.sub_question_checkboxes[label].isChecked()

                style = "background: #d4edda; border-left: 4px solid #28a745;" if is_correct else "background: #f8d7da; border-left: 4px solid #dc3545;"
                icon = "‚úÖ" if is_correct else "‚ùå"
                status = "ƒê√öNG" if is_correct else "SAI"

                html += f"""
                <div style="{style} padding: 10px; margin: 5px 0; border-radius: 4px;">
                    <strong>{label.upper()}</strong> {text}
                    <span style="float: right; font-weight: bold;">{icon} {status}</span>
                </div>
                """

        return html

    # Preview cho tr·∫£ l·ªùi ng·∫Øn
    def _generate_short_answer_preview(self):
        """T·∫°o preview cho c√¢u h·ªèi tr·∫£ l·ªùi ng·∫Øn"""
        html = "<h4 style='color: #2c3e50; margin-top: 20px;'>üìù ƒê√°p √°n:</h4>"

        if hasattr(self, 'short_answer_edit'):
            answer = self.short_answer_edit.text().strip() or "<em>Ch∆∞a c√≥ ƒë√°p √°n</em>"
            answer_type = self.answer_type_combo.currentText() if hasattr(self, 'answer_type_combo') else "VƒÉn b·∫£n"

            html += f"""
            <div style="background: #e3f2fd; padding: 15px; border-radius: 4px; margin: 10px 0;">
                <p><strong>Lo·∫°i ƒë√°p √°n:</strong> {answer_type}</p>
                <p><strong>ƒê√°p √°n ch√≠nh:</strong> <span style="background: #fff; padding: 5px 10px; border-radius: 3px; font-family: monospace;">{answer}</span></p>
            """

            if hasattr(self, 'alternative_answers_edit'):
                alt_answers = self.alternative_answers_edit.toPlainText().strip()
                if alt_answers:
                    alt_list = [alt.strip() for alt in alt_answers.split('\n') if alt.strip()]
                    if alt_list:
                        html += "<p><strong>ƒê√°p √°n thay th·∫ø:</strong></p><ul>"
                        for alt in alt_list:
                            html += f"<li><span style='background: #f8f9fa; padding: 2px 6px; border-radius: 3px; font-family: monospace;'>{alt}</span></li>"
                        html += "</ul>"

            html += "</div>"

        return html
    def update_statistics(self):
        """C·∫≠p nh·∫≠t th·ªëng k√™ c√¢u h·ªèi"""
        if not hasattr(self, 'stats_widget'):
            return
        if hasattr(self, '_stats_cache_time'):
            from datetime import datetime, timedelta
            if datetime.now() - self._stats_cache_time < timedelta(minutes=5):
                return  # S·ª≠ d·ª•ng cache trong 5 ph√∫t
        try:
            # T·ªïng s·ªë c√¢u h·ªèi
            total_questions = self.db.execute_query("SELECT COUNT(*) as count FROM question_bank", fetch="one")["count"]

            # Th·ªëng k√™ theo m·ª©c ƒë·ªô
            level_stats = self.db.execute_query("""
                   SELECT e.name, COUNT(q.id) as count 
                   FROM question_bank q 
                   JOIN exercise_tree e ON e.id = q.tree_id 
                   WHERE e.level = 'M·ª©c ƒë·ªô'
                   GROUP BY e.name
                   ORDER BY count DESC
               """, fetch="all") or []

            # Th·ªëng k√™ theo m√¥n h·ªçc
            subject_stats = self.db.execute_query("""
                   SELECT 
                       s.name, 
                       COUNT(q.id) as count 
                   FROM question_bank q 
                   JOIN exercise_tree e ON e.id = q.tree_id 
                   JOIN exercise_tree d ON d.id = e.parent_id
                   JOIN exercise_tree c ON c.id = d.parent_id  
                   JOIN exercise_tree g ON g.id = c.parent_id
                   JOIN exercise_tree s ON s.id = g.parent_id
                   WHERE s.level = 'M√¥n'
                   GROUP BY s.name
                   ORDER BY count DESC
               """, fetch="all") or []

            # Th·ªëng k√™ tags ph·ªï bi·∫øn
            tag_stats = self.db.execute_query("""
                   SELECT tag_name, COUNT(*) as count 
                   FROM question_tags 
                   GROUP BY tag_name 
                   ORDER BY count DESC 
                   LIMIT 10
               """, fetch="all") or []

            # T·∫°o HTML th·ªëng k√™
            stats_html = f"""
               <div style="font-family: Arial, sans-serif;">
                   <h2 style="color: #2c3e50; text-align: center;">üìä Th·ªëng k√™ Ng√¢n h√†ng C√¢u h·ªèi</h2>

                   <div style="background: #e3f2fd; padding: 15px; border-radius: 8px; margin: 10px 0;">
                       <h3 style="color: #1976d2;">üìà T·ªïng quan</h3>
                       <p style="font-size: 18px;"><strong>T·ªïng s·ªë c√¢u h·ªèi:</strong> 
                          <span style="color: #1976d2; font-weight: bold;">{total_questions}</span>
                       </p>
                   </div>

                   <div style="background: #fff3e0; padding: 15px; border-radius: 8px; margin: 10px 0;">
                       <h3 style="color: #f57c00;">üéØ Ph√¢n b·ªë theo m·ª©c ƒë·ªô</h3>
                       <table style="width: 100%; border-collapse: collapse;">
                           <tr style="background: #fff8e1;">
                               <th style="border: 1px solid #ddd; padding: 8px; text-align: left;">M·ª©c ƒë·ªô</th>
                               <th style="border: 1px solid #ddd; padding: 8px; text-align: center;">S·ªë l∆∞·ª£ng</th>
                               <th style="border: 1px solid #ddd; padding: 8px; text-align: center;">T·ª∑ l·ªá</th>
                           </tr>
               """

            for stat in level_stats:
                percentage = (stat["count"] / total_questions * 100) if total_questions > 0 else 0
                stats_html += f"""
                   <tr>
                       <td style="border: 1px solid #ddd; padding: 8px;">{stat['name']}</td>
                       <td style="border: 1px solid #ddd; padding: 8px; text-align: center;">{stat['count']}</td>
                       <td style="border: 1px solid #ddd; padding: 8px; text-align: center;">{percentage:.1f}%</td>
                   </tr>
                   """

            stats_html += """
                       </table>
                   </div>

                   <div style="background: #e8f5e8; padding: 15px; border-radius: 8px; margin: 10px 0;">
                       <h3 style="color: #388e3c;">üìö Ph√¢n b·ªë theo m√¥n h·ªçc</h3>
                       <table style="width: 100%; border-collapse: collapse;">
                           <tr style="background: #f1f8e9;">
                               <th style="border: 1px solid #ddd; padding: 8px; text-align: left;">M√¥n h·ªçc</th>
                               <th style="border: 1px solid #ddd; padding: 8px; text-align: center;">S·ªë l∆∞·ª£ng</th>
                               <th style="border: 1px solid #ddd; padding: 8px; text-align: center;">T·ª∑ l·ªá</th>
                           </tr>
               """

            for stat in subject_stats:
                percentage = (stat["count"] / total_questions * 100) if total_questions > 0 else 0
                stats_html += f"""
                   <tr>
                       <td style="border: 1px solid #ddd; padding: 8px;">{stat['name']}</td>
                       <td style="border: 1px solid #ddd; padding: 8px; text-align: center;">{stat['count']}</td>
                       <td style="border: 1px solid #ddd; padding: 8px; text-align: center;">{percentage:.1f}%</td>
                   </tr>
                   """

            if tag_stats:
                stats_html += """
                       </table>
                   </div>

                   <div style="background: #fce4ec; padding: 15px; border-radius: 8px; margin: 10px 0;">
                       <h3 style="color: #c2185b;">üè∑Ô∏è Tags ph·ªï bi·∫øn nh·∫•t</h3>
                       <ul style="list-style-type: none; padding: 0;">
                   """

                for tag in tag_stats:
                    stats_html += f"""
                       <li style="background: #f8bbd9; margin: 5px 0; padding: 8px; border-radius: 4px;">
                           <strong>{tag['tag_name']}</strong>: {tag['count']} c√¢u h·ªèi
                       </li>
                       """

                stats_html += "</ul></div>"
            else:
                stats_html += "</table></div>"

            stats_html += "</div>"

            self.stats_widget.setHtml(stats_html)

        except Exception as e:
            error_html = f"""
               <div style="color: #d32f2f; padding: 20px; text-align: center;">
                   <h3>‚ùå L·ªói khi t·∫£i th·ªëng k√™</h3>
                   <p>{str(e)}</p>
               </div>
               """
            self.stats_widget.setHtml(error_html)
        from datetime import datetime
        self._stats_cache_time = datetime.now()
        # X√≥a l·ªãch s·ª≠

    def clear_history(self):
        """X√≥a l·ªãch s·ª≠ ch·ªânh s·ª≠a"""
        reply = QtWidgets.QMessageBox.question(
            self, "X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a to√†n b·ªô l·ªãch s·ª≠ ch·ªânh s·ª≠a?",
            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No
        )

        if reply == QtWidgets.QMessageBox.Yes:
            try:
                self.db.execute_query("DELETE FROM question_history")
                self.history_table.setRowCount(0)
                QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ x√≥a l·ªãch s·ª≠ ch·ªânh s·ª≠a.")
            except Exception as e:
                QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ x√≥a l·ªãch s·ª≠: {e}")

        # Export PDF cho c√¢u h·ªèi ƒë∆∞·ª£c ch·ªçn

    def export_to_pdf(self):
        """Export to√†n b·ªô c√¢u h·ªèi ra PDF"""
        tree_id = self._current_tree_id()
        if not tree_id:
            QtWidgets.QMessageBox.warning(self, "Ch∆∞a ch·ªçn th∆∞ m·ª•c", "Vui l√≤ng ch·ªçn th∆∞ m·ª•c ƒë·ªÉ xu·∫•t.")
            return

        file_path, _ = QtWidgets.QFileDialog.getSaveFileName(self, "L∆∞u file PDF", "", "PDF files (*.pdf)")
        if not file_path:
            return

        try:
            from reportlab.lib.pagesizes import A4
            from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
            from reportlab.lib.styles import getSampleStyleSheet
            from reportlab.lib.units import inch

            doc = SimpleDocTemplate(file_path, pagesize=A4)
            styles = getSampleStyleSheet()
            story = []

            # Ti√™u ƒë·ªÅ
            title = Paragraph("NG√ÇN H√ÄNG C√ÇU H·ªéI", styles['Title'])
            story.append(title)
            story.append(Spacer(1, 0.2 * inch))

            # Th√¥ng tin th∆∞ m·ª•c
            path_info = self.get_tree_path(tree_id)
            if path_info:
                path_text = " > ".join([p["name"] for p in path_info])
                path_para = Paragraph(f"<b>ƒê∆∞·ªùng d·∫´n:</b> {path_text}", styles['Normal'])
                story.append(path_para)
                story.append(Spacer(1, 0.2 * inch))

            # L·∫•y c√¢u h·ªèi
            rows = self.db.execute_query("SELECT * FROM question_bank WHERE tree_id=?", (tree_id,), fetch="all") or []

            for i, row in enumerate(rows, 1):
                # C√¢u h·ªèi
                question_para = Paragraph(f"<b>C√¢u {i}:</b> {row['content_text']}", styles['Normal'])
                story.append(question_para)
                story.append(Spacer(1, 0.1 * inch))

                # ƒê√°p √°n
                try:
                    options = json.loads(row["options"] or "[]")
                    for opt in options:
                        opt_para = Paragraph(opt["text"], styles['Normal'])
                        story.append(opt_para)

                    answer_para = Paragraph(f"<b>ƒê√°p √°n ƒë√∫ng:</b> {row['correct']}", styles['Normal'])
                    story.append(answer_para)
                    story.append(Spacer(1, 0.2 * inch))

                except json.JSONDecodeError:
                    error_para = Paragraph("L·ªói: Kh√¥ng th·ªÉ ƒë·ªçc ƒë√°p √°n", styles['Normal'])
                    story.append(error_para)
                    story.append(Spacer(1, 0.2 * inch))

            doc.build(story)
            QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ xu·∫•t {len(rows)} c√¢u h·ªèi ra file PDF.")

        except ImportError:
            QtWidgets.QMessageBox.critical(self, "Thi·∫øu th∆∞ vi·ªán", "C·∫ßn c√†i ƒë·∫∑t reportlab: pip install reportlab")
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ xu·∫•t PDF: {e}")

        # Export c√¢u h·ªèi ƒë∆∞·ª£c ch·ªçn

    def export_selected_question(self):
        """Export c√¢u h·ªèi ƒë∆∞·ª£c ch·ªçn ra Word"""
        if not self.current_question_id:
            QtWidgets.QMessageBox.warning(self, "Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn c√¢u h·ªèi ƒë·ªÉ xu·∫•t.")
            return

        file_path, _ = QtWidgets.QFileDialog.getSaveFileName(self, "L∆∞u file Word", "", "Word files (*.docx)")
        if not file_path:
            return

        try:
            from docx import Document

            doc = Document()
            doc.add_heading('C√¢u h·ªèi xu·∫•t ra', 0)

            # L·∫•y th√¥ng tin c√¢u h·ªèi
            q = self.db.execute_query("SELECT * FROM question_bank WHERE id=?", (self.current_question_id,),
                                      fetch="one")
            if not q:
                return

            doc.add_paragraph(f"ID: {q['id']}")
            doc.add_paragraph(f"N·ªôi dung: {q['content_text']}")

            # ƒê√°p √°n
            try:
                options = json.loads(q["options"] or "[]")
                for opt in options:
                    doc.add_paragraph(opt["text"], style='List Bullet')
                doc.add_paragraph(f"ƒê√°p √°n ƒë√∫ng: {q['correct']}")
            except json.JSONDecodeError:
                doc.add_paragraph("L·ªói: Kh√¥ng th·ªÉ ƒë·ªçc ƒë√°p √°n")

            doc.save(file_path)
            QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ xu·∫•t c√¢u h·ªèi ra file Word.")

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ xu·∫•t file: {e}")

        # Export c√¢u h·ªèi ƒë∆∞·ª£c ch·ªçn ra PDF

    def export_selected_to_pdf(self):
        """Export c√¢u h·ªèi ƒë∆∞·ª£c ch·ªçn ra PDF"""
        if not self.current_question_id:
            QtWidgets.QMessageBox.warning(self, "Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn c√¢u h·ªèi ƒë·ªÉ xu·∫•t.")
            return

        # Logic t∆∞∆°ng t·ª± export_to_pdf nh∆∞ng ch·ªâ cho 1 c√¢u h·ªèi
        # ... implementation details ...

        # X√≥a tag ƒë∆∞·ª£c ch·ªçn

    def remove_selected_tag(self, tags_list, dialog):
        """X√≥a tag ƒë∆∞·ª£c ch·ªçn"""
        current_item = tags_list.currentItem()
        if not current_item:
            return

        tag_id = current_item.data(Qt.UserRole)
        try:
            self.db.execute_query("DELETE FROM question_tags WHERE id=?", (tag_id,))
            tags_list.takeItem(tags_list.row(current_item))

            # Reload table
            tree_id = self._current_tree_id()
            if tree_id:
                rows = self.db.execute_query("SELECT * FROM question_bank WHERE tree_id=?", (tree_id,),
                                             fetch="all") or []
                self._load_question_rows(rows)

        except Exception as e:
            QtWidgets.QMessageBox.warning(dialog, "L·ªói", f"Kh√¥ng th·ªÉ x√≥a tag: {e}")

        # Th√™m tag m·ªõi t·ª´ input

    def add_new_tag(self):
        """Th√™m tag m·ªõi t·ª´ input field"""
        if not hasattr(self, 'tags_edit') or not self.current_question_id:
            return

        tags_text = self.tags_edit.text().strip()
        if not tags_text:
            return

        # T√°ch c√°c tag b·∫±ng d·∫•u ph·∫©y
        tag_names = [tag.strip() for tag in tags_text.split(',') if tag.strip()]

        added_count = 0
        for tag_name in tag_names:
            try:
                self.db.execute_query(
                    "INSERT INTO question_tags(question_id, tag_name) VALUES (?,?)",
                    (self.current_question_id, tag_name)
                )
                added_count += 1
            except:
                pass  # Tag ƒë√£ t·ªìn t·∫°i

        if added_count > 0:
            self.tags_edit.clear()

            # Reload table
            tree_id = self._current_tree_id()
            if tree_id:
                rows = self.db.execute_query("SELECT * FROM question_bank WHERE tree_id=?", (tree_id,),
                                             fetch="all") or []
                self._load_question_rows(rows)

            QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ th√™m {added_count} tag(s).")

        # X√≥a option

    def remove_option(self, label):
        """X√≥a option theo label"""
        if label in self.option_entries:
            self.option_entries[label].clear()
            # Uncheck radio button t∆∞∆°ng ·ª©ng
            for btn in self.correct_group.buttons():
                if btn.text() == label:
                    btn.setChecked(False)
                    break

    # Dialog t√¨m ki·∫øm n√¢ng cao
    def show_advanced_search_dialog(self):
        """Hi·ªÉn th·ªã dialog t√¨m ki·∫øm n√¢ng cao v·ªõi nhi·ªÅu t√πy ch·ªçn"""
        dialog = QtWidgets.QDialog(self)
        dialog.setWindowTitle("üîç T√¨m ki·∫øm n√¢ng cao")
        dialog.setModal(True)
        dialog.resize(600, 500)

        layout = QtWidgets.QVBoxLayout(dialog)

        # Scroll area cho n·ªôi dung d√†i
        scroll = QtWidgets.QScrollArea()
        scroll_widget = QtWidgets.QWidget()
        scroll_layout = QtWidgets.QVBoxLayout(scroll_widget)

        # T√¨m ki·∫øm theo n·ªôi dung
        content_group = QtWidgets.QGroupBox("üî§ T√¨m theo n·ªôi dung")
        content_layout = QtWidgets.QFormLayout(content_group)

        self.adv_search_content = QtWidgets.QLineEdit()
        self.adv_search_exact = QtWidgets.QCheckBox("T√¨m ch√≠nh x√°c")
        self.adv_search_case_sensitive = QtWidgets.QCheckBox("Ph√¢n bi·ªát hoa th∆∞·ªùng")
        self.adv_search_regex = QtWidgets.QCheckBox("S·ª≠ d·ª•ng Regular Expression")

        content_layout.addRow("T·ª´ kh√≥a:", self.adv_search_content)
        content_layout.addRow("", self.adv_search_exact)
        content_layout.addRow("", self.adv_search_case_sensitive)
        content_layout.addRow("", self.adv_search_regex)

        scroll_layout.addWidget(content_group)

        # T√¨m ki·∫øm theo ph√¢n lo·∫°i
        category_group = QtWidgets.QGroupBox("üìÅ T√¨m theo ph√¢n lo·∫°i")
        category_layout = QtWidgets.QFormLayout(category_group)

        self.adv_subject_cb = QtWidgets.QComboBox()
        self.adv_grade_cb = QtWidgets.QComboBox()
        self.adv_topic_cb = QtWidgets.QComboBox()
        self.adv_type_cb = QtWidgets.QComboBox()
        self.adv_level_cb = QtWidgets.QComboBox()

        # Populate combos
        self._populate_advanced_search_combos()

        category_layout.addRow("M√¥n:", self.adv_subject_cb)
        category_layout.addRow("L·ªõp:", self.adv_grade_cb)
        category_layout.addRow("Ch·ªß ƒë·ªÅ:", self.adv_topic_cb)
        category_layout.addRow("D·∫°ng:", self.adv_type_cb)
        category_layout.addRow("M·ª©c ƒë·ªô:", self.adv_level_cb)

        scroll_layout.addWidget(category_group)

        # T√¨m ki·∫øm theo tags
        tags_group = QtWidgets.QGroupBox("üè∑Ô∏è T√¨m theo Tags")
        tags_layout = QtWidgets.QVBoxLayout(tags_group)

        self.adv_tags_edit = QtWidgets.QLineEdit()
        self.adv_tags_edit.setPlaceholderText("Nh·∫≠p tags, ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y")
        tags_layout.addWidget(self.adv_tags_edit)

        self.adv_tags_all = QtWidgets.QRadioButton("C√≥ t·∫•t c·∫£ tags")
        self.adv_tags_any = QtWidgets.QRadioButton("C√≥ √≠t nh·∫•t 1 tag")
        self.adv_tags_any.setChecked(True)

        tags_layout.addWidget(self.adv_tags_all)
        tags_layout.addWidget(self.adv_tags_any)

        scroll_layout.addWidget(tags_group)

        # T√¨m ki·∫øm theo th·ªùi gian
        time_group = QtWidgets.QGroupBox("üìÖ T√¨m theo th·ªùi gian")
        time_layout = QtWidgets.QFormLayout(time_group)

        self.adv_date_from = QtWidgets.QDateEdit()
        self.adv_date_to = QtWidgets.QDateEdit()
        self.adv_date_from.setCalendarPopup(True)
        self.adv_date_to.setCalendarPopup(True)
        self.adv_date_from.setDate(QtCore.QDate.currentDate().addDays(-30))
        self.adv_date_to.setDate(QtCore.QDate.currentDate())

        self.adv_use_date_filter = QtWidgets.QCheckBox("S·ª≠ d·ª•ng b·ªô l·ªçc th·ªùi gian")

        time_layout.addRow("", self.adv_use_date_filter)
        time_layout.addRow("T·ª´ ng√†y:", self.adv_date_from)
        time_layout.addRow("ƒê·∫øn ng√†y:", self.adv_date_to)

        scroll_layout.addWidget(time_group)

        # T√¨m ki·∫øm theo ƒë√°p √°n
        answer_group = QtWidgets.QGroupBox("üéØ T√¨m theo ƒë√°p √°n")
        answer_layout = QtWidgets.QFormLayout(answer_group)

        self.adv_correct_answer = QtWidgets.QComboBox()
        self.adv_correct_answer.addItems(["", "A", "B", "C", "D", "E"])

        self.adv_min_options = QtWidgets.QSpinBox()
        self.adv_min_options.setRange(2, 10)
        self.adv_min_options.setValue(2)

        self.adv_max_options = QtWidgets.QSpinBox()
        self.adv_max_options.setRange(2, 10)
        self.adv_max_options.setValue(5)

        answer_layout.addRow("ƒê√°p √°n ƒë√∫ng:", self.adv_correct_answer)
        answer_layout.addRow("S·ªë ƒë√°p √°n t·ªëi thi·ªÉu:", self.adv_min_options)
        answer_layout.addRow("S·ªë ƒë√°p √°n t·ªëi ƒëa:", self.adv_max_options)

        scroll_layout.addWidget(answer_group)

        # Setup scroll area
        scroll.setWidget(scroll_widget)
        scroll.setWidgetResizable(True)
        layout.addWidget(scroll)

        # Buttons
        button_layout = QtWidgets.QHBoxLayout()

        search_btn = QtWidgets.QPushButton("üîç T√¨m ki·∫øm")
        search_btn.setStyleSheet("QPushButton { background: #007bff; color: white; padding: 8px 16px; }")
        search_btn.clicked.connect(lambda: self.execute_advanced_search(dialog))

        reset_btn = QtWidgets.QPushButton("üîÑ ƒê·∫∑t l·∫°i")
        reset_btn.clicked.connect(self.reset_advanced_search)

        save_preset_btn = QtWidgets.QPushButton("üíæ L∆∞u preset")
        save_preset_btn.clicked.connect(self.save_search_preset)

        load_preset_btn = QtWidgets.QPushButton("üìÇ T·∫£i preset")
        load_preset_btn.clicked.connect(self.load_search_preset)

        cancel_btn = QtWidgets.QPushButton("‚ùå H·ªßy")
        cancel_btn.clicked.connect(dialog.reject)

        button_layout.addWidget(search_btn)
        button_layout.addWidget(reset_btn)
        button_layout.addWidget(save_preset_btn)
        button_layout.addWidget(load_preset_btn)
        button_layout.addWidget(cancel_btn)

        layout.addLayout(button_layout)

        dialog.exec()

        # Dialog template c√¢u h·ªèi

    def show_template_dialog(self):
        """Hi·ªÉn th·ªã dialog ch·ªçn template c√¢u h·ªèi"""
        dialog = QtWidgets.QDialog(self)
        dialog.setWindowTitle("üìù Template c√¢u h·ªèi")
        dialog.setModal(True)
        dialog.resize(800, 600)

        layout = QtWidgets.QHBoxLayout(dialog)

        # Panel tr√°i: Danh s√°ch template
        left_panel = QtWidgets.QWidget()
        left_layout = QtWidgets.QVBoxLayout(left_panel)
        left_layout.addWidget(QtWidgets.QLabel("üìã Ch·ªçn template:"))

        template_list = QtWidgets.QListWidget()
        template_list.setMaximumWidth(250)

        # C√°c template c√≥ s·∫µn
        templates = [
            {
                "name": "üìä C√¢u h·ªèi bi·ªÉu ƒë·ªì",
                "category": "Ph√¢n t√≠ch d·ªØ li·ªáu",
                "content": "D·ª±a v√†o bi·ªÉu ƒë·ªì d∆∞·ªõi ƒë√¢y, h√£y tr·∫£ l·ªùi c√¢u h·ªèi:\n\n[Ch√®n bi·ªÉu ƒë·ªì ·ªü ƒë√¢y]\n\nC√¢u h·ªèi: Theo bi·ªÉu ƒë·ªì, xu h∆∞·ªõng n√†o sau ƒë√¢y l√† ƒë√∫ng?",
                "options": [
                    "A. Xu h∆∞·ªõng tƒÉng ƒë·ªÅu",
                    "B. Xu h∆∞·ªõng gi·∫£m ƒë·ªÅu",
                    "C. Xu h∆∞·ªõng tƒÉng-gi·∫£m xen k·∫Ω",
                    "D. Kh√¥ng c√≥ xu h∆∞·ªõng r√µ r√†ng"
                ],
                "correct": "A"
            },
            {
                "name": "üßÆ C√¢u h·ªèi t√≠nh to√°n",
                "category": "To√°n h·ªçc",
                "content": "Cho bi·∫øt:\n\n- Gi√° tr·ªã ban ƒë·∫ßu: [X]\n- T·ªâ l·ªá thay ƒë·ªïi: [Y]%\n- Th·ªùi gian: [Z] nƒÉm\n\nT√≠nh gi√° tr·ªã cu·ªëi c√πng?",
                "options": [
                    "A. [K·∫øt qu·∫£ 1]",
                    "B. [K·∫øt qu·∫£ 2]",
                    "C. [K·∫øt qu·∫£ 3]",
                    "D. [K·∫øt qu·∫£ 4]"
                ],
                "correct": "C"
            },
            {
                "name": "üìñ C√¢u h·ªèi l√Ω thuy·∫øt",
                "category": "Ki·∫øn th·ª©c c∆° b·∫£n",
                "content": "Kh√°i ni·ªám v·ªÅ [Ch·ªß ƒë·ªÅ] ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a nh∆∞ th·∫ø n√†o?",
                "options": [
                    "A. [ƒê·ªãnh nghƒ©a 1]",
                    "B. [ƒê·ªãnh nghƒ©a 2]",
                    "C. [ƒê·ªãnh nghƒ©a ƒë√∫ng]",
                    "D. [ƒê·ªãnh nghƒ©a 4]"
                ],
                "correct": "C"
            },
            {
                "name": "üî¨ C√¢u h·ªèi th√≠ nghi·ªám",
                "category": "Khoa h·ªçc",
                "content": "Trong th√≠ nghi·ªám [T√™n th√≠ nghi·ªám], khi thay ƒë·ªïi [Bi·∫øn ƒë·ªôc l·∫≠p], k·∫øt qu·∫£ quan s√°t ƒë∆∞·ª£c l√† g√¨?",
                "options": [
                    "A. [K·∫øt qu·∫£ 1]",
                    "B. [K·∫øt qu·∫£ 2]",
                    "C. [K·∫øt qu·∫£ 3]",
                    "D. [K·∫øt qu·∫£ 4]"
                ],
                "correct": "B"
            },
            {
                "name": "üåç C√¢u h·ªèi ƒë·ªãa l√Ω",
                "category": "ƒê·ªãa l√Ω",
                "content": "V·ªã tr√≠ ƒë·ªãa l√Ω c·ªßa [ƒê·ªãa danh] c√≥ ƒë·∫∑c ƒëi·ªÉm g√¨ n·ªïi b·∫≠t?",
                "options": [
                    "A. [ƒê·∫∑c ƒëi·ªÉm 1]",
                    "B. [ƒê·∫∑c ƒëi·ªÉm 2]",
                    "C. [ƒê·∫∑c ƒëi·ªÉm 3]",
                    "D. [ƒê·∫∑c ƒëi·ªÉm 4]"
                ],
                "correct": "A"
            },
            {
                "name": "üìö C√¢u h·ªèi vƒÉn h·ªçc",
                "category": "Ng·ªØ vƒÉn",
                "content": "T√°c ph·∫©m \"[T√™n t√°c ph·∫©m]\" c·ªßa t√°c gi·∫£ [T√™n t√°c gi·∫£] thu·ªôc th·ªÉ lo·∫°i n√†o?",
                "options": [
                    "A. Truy·ªán ng·∫Øn",
                    "B. Ti·ªÉu thuy·∫øt",
                    "C. Th∆°",
                    "D. K·ªãch"
                ],
                "correct": "B"
            }
        ]

        # Th√™m templates v√†o list
        for template in templates:
            item = QtWidgets.QListWidgetItem(f"{template['name']}\n({template['category']})")
            item.setData(Qt.UserRole, template)
            template_list.addItem(item)

        left_layout.addWidget(template_list)

        # N√∫t qu·∫£n l√Ω template
        template_mgmt_layout = QtWidgets.QVBoxLayout()

        new_template_btn = QtWidgets.QPushButton("‚ûï T·∫°o template m·ªõi")
        new_template_btn.clicked.connect(self.create_new_template)

        edit_template_btn = QtWidgets.QPushButton("‚úèÔ∏è Ch·ªânh s·ª≠a")
        edit_template_btn.clicked.connect(lambda: self.edit_template(template_list))

        delete_template_btn = QtWidgets.QPushButton("üóëÔ∏è X√≥a")
        delete_template_btn.clicked.connect(lambda: self.delete_template(template_list))

        template_mgmt_layout.addWidget(new_template_btn)
        template_mgmt_layout.addWidget(edit_template_btn)
        template_mgmt_layout.addWidget(delete_template_btn)

        left_layout.addLayout(template_mgmt_layout)
        layout.addWidget(left_panel)

        # Panel ph·∫£i: Preview v√† s·ª≠ d·ª•ng
        right_panel = QtWidgets.QWidget()
        right_layout = QtWidgets.QVBoxLayout(right_panel)

        right_layout.addWidget(QtWidgets.QLabel("üëÅÔ∏è Preview template:"))

        # Preview area
        preview_text = QtWidgets.QTextEdit()
        preview_text.setReadOnly(True)
        preview_text.setStyleSheet("""
                   QTextEdit {
                       background: #f8f9fa;
                       border: 2px solid #dee2e6;
                       border-radius: 8px;
                       padding: 15px;
                       font-family: Arial, sans-serif;
                       font-size: 14px;
                       line-height: 1.5;
                   }
               """)
        right_layout.addWidget(preview_text)

        # Template info
        info_group = QtWidgets.QGroupBox("‚ÑπÔ∏è Th√¥ng tin template")
        info_layout = QtWidgets.QFormLayout(info_group)

        self.template_name_label = QtWidgets.QLabel("-")
        self.template_category_label = QtWidgets.QLabel("-")
        self.template_correct_label = QtWidgets.QLabel("-")

        info_layout.addRow("T√™n:", self.template_name_label)
        info_layout.addRow("Danh m·ª•c:", self.template_category_label)
        info_layout.addRow("ƒê√°p √°n m·∫∑c ƒë·ªãnh:", self.template_correct_label)

        right_layout.addWidget(info_group)

        # Update preview khi ch·ªçn template
        def update_template_preview():
            current = template_list.currentItem()
            if current:
                template = current.data(Qt.UserRole)

                # Update preview
                preview_content = f"<h3 style='color: #2c3e50;'>üìù {template['name']}</h3>"
                preview_content += f"<div style='background: white; padding: 15px; border-left: 4px solid #007bff; margin: 10px 0;'>"
                preview_content += f"<strong>C√¢u h·ªèi:</strong><br>{template['content']}</div>"

                preview_content += "<h4 style='color: #2c3e50;'>üîò ƒê√°p √°n:</h4>"
                for i, option in enumerate(template['options']):
                    is_correct = chr(65 + i) == template['correct']
                    style = "background: #d4edda; border-left: 4px solid #28a745;" if is_correct else "background: #f8f9fa;"
                    preview_content += f"<div style='{style} padding: 10px; margin: 5px 0; border-radius: 4px;'>"
                    preview_content += f"{option}"
                    if is_correct:
                        preview_content += " <span style='color: #28a745; font-weight: bold;'>‚úì</span>"
                    preview_content += "</div>"

                preview_text.setHtml(preview_content)

                # Update info
                self.template_name_label.setText(template['name'])
                self.template_category_label.setText(template['category'])
                self.template_correct_label.setText(template['correct'])

        template_list.currentItemChanged.connect(update_template_preview)

        # Buttons
        button_layout = QtWidgets.QHBoxLayout()

        use_btn = QtWidgets.QPushButton("‚úÖ S·ª≠ d·ª•ng template")
        use_btn.setStyleSheet(
            "QPushButton { background: #28a745; color: white; padding: 10px 20px; font-weight: bold; }")
        use_btn.clicked.connect(lambda: self.apply_template(template_list.currentItem(), dialog))

        customize_btn = QtWidgets.QPushButton("üé® T√πy ch·ªânh v√† s·ª≠ d·ª•ng")
        customize_btn.clicked.connect(lambda: self.customize_and_apply_template(template_list.currentItem(), dialog))

        cancel_btn = QtWidgets.QPushButton("‚ùå H·ªßy")
        cancel_btn.clicked.connect(dialog.reject)

        button_layout.addWidget(use_btn)
        button_layout.addWidget(customize_btn)
        button_layout.addWidget(cancel_btn)

        right_layout.addLayout(button_layout)
        layout.addWidget(right_panel)

        dialog.exec()

    # Populate combos cho advanced search
    def _populate_advanced_search_combos(self):
        """Populate c√°c combobox cho advanced search"""
        # Subject combo
        subjects = self.db.execute_query("SELECT DISTINCT name FROM exercise_tree WHERE level='M√¥n' ORDER BY name",
                                         fetch="all") or []
        self.adv_subject_cb.clear()
        self.adv_subject_cb.addItem("")
        for s in subjects:
            self.adv_subject_cb.addItem(s["name"])

        # Grade combo
        grades = self.db.execute_query("SELECT DISTINCT name FROM exercise_tree WHERE level='L·ªõp' ORDER BY name",
                                       fetch="all") or []
        self.adv_grade_cb.clear()
        self.adv_grade_cb.addItem("")
        for g in grades:
            self.adv_grade_cb.addItem(g["name"])

        # Topic combo
        topics = self.db.execute_query("SELECT DISTINCT name FROM exercise_tree WHERE level='Ch·ªß ƒë·ªÅ' ORDER BY name",
                                       fetch="all") or []
        self.adv_topic_cb.clear()
        self.adv_topic_cb.addItem("")
        for t in topics:
            self.adv_topic_cb.addItem(t["name"])

        # Type combo
        types = self.db.execute_query("SELECT DISTINCT name FROM exercise_tree WHERE level='D·∫°ng' ORDER BY name",
                                      fetch="all") or []
        self.adv_type_cb.clear()
        self.adv_type_cb.addItem("")
        for tp in types:
            self.adv_type_cb.addItem(tp["name"])

        # Level combo
        self.adv_level_cb.clear()
        self.adv_level_cb.addItems(["", "Nh·∫≠n bi·∫øt", "Th√¥ng hi·ªÉu", "V·∫≠n d·ª•ng", "V·∫≠n d·ª•ng cao", "S√°ng t·∫°o"])

    # Th·ª±c hi·ªán advanced search
    def execute_advanced_search(self, dialog):
        """Th·ª±c hi·ªán t√¨m ki·∫øm n√¢ng cao"""
        try:
            conditions = []
            params = []

            # T√¨m ki·∫øm theo n·ªôi dung
            search_text = self.adv_search_content.text().strip()
            if search_text:
                if self.adv_search_exact.isChecked():
                    if self.adv_search_case_sensitive.isChecked():
                        conditions.append("content_text = ?")
                    else:
                        conditions.append("LOWER(content_text) = LOWER(?)")
                    params.append(search_text)
                else:
                    if self.adv_search_case_sensitive.isChecked():
                        conditions.append("content_text LIKE ?")
                    else:
                        conditions.append("LOWER(content_text) LIKE LOWER(?)")
                    params.append(f"%{search_text}%")

            # T√¨m ki·∫øm theo ƒë√°p √°n ƒë√∫ng
            correct_answer = self.adv_correct_answer.currentText()
            if correct_answer:
                conditions.append("correct = ?")
                params.append(correct_answer)

            # T√¨m ki·∫øm theo s·ªë l∆∞·ª£ng ƒë√°p √°n (s·ª≠ d·ª•ng c√°ch kh√°c thay v√¨ JSON_ARRAY_LENGTH)
            min_options = self.adv_min_options.value()
            max_options = self.adv_max_options.value()
            # ƒê·∫øm s·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa '"text":' trong chu·ªói options
            conditions.append("""
                ((LENGTH(options) - LENGTH(REPLACE(options, '"text":', ''))) / LENGTH('"text":')) BETWEEN ? AND ?
            """)
            params.extend([min_options, max_options])

            # T√¨m ki·∫øm theo tags
            tags_text = self.adv_tags_edit.text().strip()
            if tags_text:
                tag_names = [tag.strip() for tag in tags_text.split(',') if tag.strip()]
                if tag_names:
                    if self.adv_tags_all.isChecked():
                        # C√≥ t·∫•t c·∫£ tags
                        for tag in tag_names:
                            conditions.append(
                                "EXISTS (SELECT 1 FROM question_tags WHERE question_id = question_bank.id AND tag_name = ?)")
                            params.append(tag)
                    else:
                        # C√≥ √≠t nh·∫•t 1 tag
                        tag_placeholders = ",".join(["?"] * len(tag_names))
                        conditions.append(
                            f"EXISTS (SELECT 1 FROM question_tags WHERE question_id = question_bank.id AND tag_name IN ({tag_placeholders}))")
                        params.extend(tag_names)

            # X√¢y d·ª±ng query
            where_clause = " AND ".join(conditions) if conditions else "1=1"
            query = f"SELECT * FROM question_bank WHERE {where_clause} ORDER BY id DESC"

            rows = self.db.execute_query(query, tuple(params), fetch="all") or []
            self._load_question_rows(rows)

            dialog.accept()
            QtWidgets.QMessageBox.information(self, "K·∫øt qu·∫£ t√¨m ki·∫øm",
                                              f"T√¨m th·∫•y {len(rows)} c√¢u h·ªèi ph√π h·ª£p v·ªõi ƒëi·ªÅu ki·ªán.")

        except Exception as e:
            QtWidgets.QMessageBox.critical(dialog, "L·ªói t√¨m ki·∫øm", f"C√≥ l·ªói x·∫£y ra: {e}")
    # Reset advanced search
    def reset_advanced_search(self):
        """Reset t·∫•t c·∫£ field trong advanced search"""
        if hasattr(self, 'adv_search_content'):
            self.adv_search_content.clear()
            self.adv_search_exact.setChecked(False)
            self.adv_search_case_sensitive.setChecked(False)
            self.adv_search_regex.setChecked(False)

            self.adv_subject_cb.setCurrentIndex(0)
            self.adv_grade_cb.setCurrentIndex(0)
            self.adv_topic_cb.setCurrentIndex(0)
            self.adv_type_cb.setCurrentIndex(0)
            self.adv_level_cb.setCurrentIndex(0)

            self.adv_tags_edit.clear()
            self.adv_tags_any.setChecked(True)

            self.adv_correct_answer.setCurrentIndex(0)
            self.adv_min_options.setValue(2)
            self.adv_max_options.setValue(5)

            self.adv_use_date_filter.setChecked(False)

    # Apply template
    def apply_template(self, template_item, dialog):
        """√Åp d·ª•ng template ƒë∆∞·ª£c ch·ªçn"""
        if not template_item:
            QtWidgets.QMessageBox.warning(dialog, "Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn template ƒë·ªÉ s·ª≠ d·ª•ng.")
            return

        template = template_item.data(Qt.UserRole)

        # Clear form v√† ƒëi·ªÅn template
        self.clear_question_form()

        # ƒêi·ªÅn n·ªôi dung
        if hasattr(self, 'content_text'):
            self.content_text.setPlainText(template['content'])

        # ƒêi·ªÅn ƒë√°p √°n
        for i, option in enumerate(template['options']):
            label = chr(65 + i)  # A, B, C, D, E
            if label in self.option_entries:
                # L·∫•y ph·∫ßn sau d·∫•u ch·∫•m
                option_text = option.split('. ', 1)[1] if '. ' in option else option
                self.option_entries[label].setText(option_text)

        # Set ƒë√°p √°n ƒë√∫ng
        for btn in self.correct_group.buttons():
            if btn.text() == template['correct']:
                btn.setChecked(True)
                break

        # Update preview
        self.update_preview()

        dialog.accept()
        QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ √°p d·ª•ng template '{template['name']}'.")

    # T√πy ch·ªânh v√† apply template
    def customize_and_apply_template(self, template_item, dialog):
        """T√πy ch·ªânh template tr∆∞·ªõc khi √°p d·ª•ng"""
        if not template_item:
            QtWidgets.QMessageBox.warning(dialog, "Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn template ƒë·ªÉ t√πy ch·ªânh.")
            return

        template = template_item.data(Qt.UserRole)

        # T·∫°o dialog t√πy ch·ªânh
        customize_dialog = QtWidgets.QDialog(dialog)
        customize_dialog.setWindowTitle(f"üé® T√πy ch·ªânh: {template['name']}")
        customize_dialog.setModal(True)
        customize_dialog.resize(600, 500)

        layout = QtWidgets.QVBoxLayout(customize_dialog)

        # N·ªôi dung c√¢u h·ªèi
        layout.addWidget(QtWidgets.QLabel("N·ªôi dung c√¢u h·ªèi:"))
        content_edit = QtWidgets.QTextEdit()
        content_edit.setPlainText(template['content'])
        layout.addWidget(content_edit)

        # ƒê√°p √°n
        layout.addWidget(QtWidgets.QLabel("ƒê√°p √°n:"))
        option_edits = {}

        for i, option in enumerate(template['options']):
            label = chr(65 + i)
            row_layout = QtWidgets.QHBoxLayout()
            row_layout.addWidget(QtWidgets.QLabel(f"{label}."))

            option_edit = QtWidgets.QLineEdit()
            option_text = option.split('. ', 1)[1] if '. ' in option else option
            option_edit.setText(option_text)
            row_layout.addWidget(option_edit)

            layout.addLayout(row_layout)
            option_edits[label] = option_edit

        # ƒê√°p √°n ƒë√∫ng
        correct_layout = QtWidgets.QHBoxLayout()
        correct_layout.addWidget(QtWidgets.QLabel("ƒê√°p √°n ƒë√∫ng:"))
        correct_combo = QtWidgets.QComboBox()
        correct_combo.addItems(["A", "B", "C", "D", "E"])
        correct_combo.setCurrentText(template['correct'])
        correct_layout.addWidget(correct_combo)
        layout.addLayout(correct_layout)

        # Buttons
        button_layout = QtWidgets.QHBoxLayout()

        apply_btn = QtWidgets.QPushButton("‚úÖ √Åp d·ª•ng")
        apply_btn.clicked.connect(lambda: self._apply_customized_template(
            content_edit.toPlainText(), option_edits, correct_combo.currentText(),
            customize_dialog, dialog
        ))

        cancel_btn = QtWidgets.QPushButton("‚ùå H·ªßy")
        cancel_btn.clicked.connect(customize_dialog.reject)

        button_layout.addWidget(apply_btn)
        button_layout.addWidget(cancel_btn)
        layout.addLayout(button_layout)

        customize_dialog.exec()

    # Apply customized template
    def _apply_customized_template(self, content, option_edits, correct_answer, customize_dialog, main_dialog):
        """√Åp d·ª•ng template ƒë√£ ƒë∆∞·ª£c t√πy ch·ªânh"""
        # Clear form
        self.clear_question_form()

        # ƒêi·ªÅn n·ªôi dung
        if hasattr(self, 'content_text'):
            self.content_text.setPlainText(content)

        # ƒêi·ªÅn ƒë√°p √°n
        for label, edit in option_edits.items():
            if label in self.option_entries:
                self.option_entries[label].setText(edit.text())

        # Set ƒë√°p √°n ƒë√∫ng
        for btn in self.correct_group.buttons():
            if btn.text() == correct_answer:
                btn.setChecked(True)
                break

        # Update preview
        self.update_preview()

        customize_dialog.accept()
        main_dialog.accept()
        QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ √°p d·ª•ng template ƒë√£ t√πy ch·ªânh.")

    # L∆∞u preset t√¨m ki·∫øm
    def save_search_preset(self):
        """L∆∞u preset t√¨m ki·∫øm"""
        preset_name, ok = QtWidgets.QInputDialog.getText(self, "L∆∞u preset", "T√™n preset:")
        if ok and preset_name.strip():
            # Logic l∆∞u preset v√†o database ho·∫∑c file
            QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ l∆∞u preset '{preset_name}'.")

    # T·∫£i preset t√¨m ki·∫øm
    def load_search_preset(self):
        """T·∫£i preset t√¨m ki·∫øm"""
        # Logic load preset t·ª´ database ho·∫∑c file
        QtWidgets.QMessageBox.information(self, "Th√¥ng tin", "Ch·ª©c nƒÉng ƒëang ph√°t tri·ªÉn.")

    # T·∫°o template m·ªõi
    def create_new_template(self):
        """T·∫°o template m·ªõi"""
        QtWidgets.QMessageBox.information(self, "Th√¥ng tin", "Ch·ª©c nƒÉng t·∫°o template m·ªõi ƒëang ph√°t tri·ªÉn.")

    # Ch·ªânh s·ª≠a template
    def edit_template(self, template_list):
        """Ch·ªânh s·ª≠a template ƒë∆∞·ª£c ch·ªçn"""
        current = template_list.currentItem()
        if not current:
            QtWidgets.QMessageBox.warning(self, "Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn template ƒë·ªÉ ch·ªânh s·ª≠a.")
            return
        QtWidgets.QMessageBox.information(self, "Th√¥ng tin", "Ch·ª©c nƒÉng ch·ªânh s·ª≠a template ƒëang ph√°t tri·ªÉn.")

    # X√≥a template
    def delete_template(self, template_list):
        """X√≥a template ƒë∆∞·ª£c ch·ªçn"""
        current = template_list.currentItem()
        if not current:
            QtWidgets.QMessageBox.warning(self, "Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn template ƒë·ªÉ x√≥a.")
            return

        reply = QtWidgets.QMessageBox.question(
            self, "X√°c nh·∫≠n x√≥a",
            f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a template n√†y?",
            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No
        )

        if reply == QtWidgets.QMessageBox.Yes:
            template_list.takeItem(template_list.row(current))
            QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ x√≥a template.")

    # Helper methods cho 3 d·∫°ng c√¢u h·ªèi
    def get_question_type_statistics(self):
        """L·∫•y th·ªëng k√™ theo lo·∫°i c√¢u h·ªèi"""
        try:
            stats = {}

            # Th·ªëng k√™ t·ªïng quan
            total = self.db.execute_query("SELECT COUNT(*) as count FROM question_bank", fetch="one")["count"]
            stats['total'] = total

            # Th·ªëng k√™ theo lo·∫°i
            type_stats = self.db.execute_query("""
                SELECT 
                    question_type,
                    COUNT(*) as count
                FROM question_bank 
                GROUP BY question_type
                ORDER BY count DESC
            """, fetch="all") or []

            stats['by_type'] = {}
            for stat in type_stats:
                q_type = stat["question_type"] or "multiple_choice"
                stats['by_type'][q_type] = stat["count"]

            return stats
        except Exception as e:
            print(f"L·ªói l·∫•y th·ªëng k√™: {e}")
            return {'total': 0, 'by_type': {}}

    # Validate d·ªØ li·ªáu cho t·ª´ng lo·∫°i c√¢u h·ªèi
    def validate_question_by_type(self, question_type, data):
        """Validate d·ªØ li·ªáu theo lo·∫°i c√¢u h·ªèi"""
        errors = []

        if question_type == 'multiple_choice':
            if not data.get('options') or len(data['options']) < 2:
                errors.append("C√¢u h·ªèi tr·∫Øc nghi·ªám ph·∫£i c√≥ √≠t nh·∫•t 2 ƒë√°p √°n")
            if not data.get('correct'):
                errors.append("Ph·∫£i ch·ªçn ƒë√°p √°n ƒë√∫ng")

        elif question_type == 'true_false':
            if not data.get('sub_questions') or len(data['sub_questions']) < 2:
                errors.append("C√¢u h·ªèi ƒë√∫ng/sai ph·∫£i c√≥ √≠t nh·∫•t 2 ph·∫ßn")
            for sub in data.get('sub_questions', []):
                if not sub.get('content', '').strip():
                    errors.append(f"Ph·∫ßn {sub.get('label', '')} kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")

        elif question_type == 'short_answer':
            if not data.get('answer', '').strip():
                errors.append("C√¢u h·ªèi tr·∫£ l·ªùi ng·∫Øn ph·∫£i c√≥ ƒë√°p √°n")

        return errors

    # Export template cho import
    def export_question_template(self):
        """Xu·∫•t template m·∫´u cho vi·ªác import"""
        file_path, _ = QtWidgets.QFileDialog.getSaveFileName(
            self, "L∆∞u file template", "question_template.docx", "Word files (*.docx)"
        )
        if not file_path:
            return

        try:
            from docx import Document

            doc = Document()
            doc.add_heading('TEMPLATE NG√ÇN H√ÄNG C√ÇU H·ªéI', 0)

            # PH·∫¶N I: M·∫´u tr·∫Øc nghi·ªám
            doc.add_heading('PH·∫¶N I. C√¢u tr·∫Øc nghi·ªám v·ªõi nhi·ªÅu ph∆∞∆°ng √°n l·ª±a ch·ªçn', level=1)
            doc.add_paragraph('Th√≠ sinh tr·∫£ l·ªùi t·ª´ c√¢u 1 ƒë·∫øn c√¢u 12. M·ªói c√¢u h·ªèi, th√≠ sinh ch·ªâ ch·ªçn m·ªôt ph∆∞∆°ng √°n.')

            doc.add_paragraph('C√¢u 1. N·ªôi dung c√¢u h·ªèi tr·∫Øc nghi·ªám m·∫´u?')
            doc.add_paragraph('A. ƒê√°p √°n A')
            doc.add_paragraph('B. ƒê√°p √°n B')
            doc.add_paragraph('C. ƒê√°p √°n C')
            doc.add_paragraph('D. ƒê√°p √°n D')
            doc.add_paragraph('ƒê√°p √°n: A')
            doc.add_paragraph('')

            # PH·∫¶N II: M·∫´u ƒë√∫ng/sai
            doc.add_heading('PH·∫¶N II. C√¢u tr·∫Øc nghi·ªám ƒë√∫ng sai', level=1)
            doc.add_paragraph(
                'Th√≠ sinh tr·∫£ l·ªùi t·ª´ c√¢u 1 ƒë·∫øn c√¢u 4. Trong m·ªói √Ω a), b), c), d) ·ªü m·ªói c√¢u, th√≠ sinh ch·ªçn ƒë√∫ng ho·∫∑c sai (ƒëi·ªÅn d·∫•u X v√†o √¥ ch·ªçn)')

            doc.add_paragraph('C√¢u 1. X√©t t√≠nh ƒë√∫ng sai c·ªßa c√°c kh·∫≥ng ƒë·ªãnh sau:')
            doc.add_paragraph('a) Kh·∫≥ng ƒë·ªãnh th·ª© nh·∫•t')
            doc.add_paragraph('b) Kh·∫≥ng ƒë·ªãnh th·ª© hai')
            doc.add_paragraph('c) Kh·∫≥ng ƒë·ªãnh th·ª© ba')
            doc.add_paragraph('d) Kh·∫≥ng ƒë·ªãnh th·ª© t∆∞')
            doc.add_paragraph('')

            # PH·∫¶N III: M·∫´u tr·∫£ l·ªùi ng·∫Øn
            doc.add_heading('PH·∫¶N III. C√¢u tr·∫Øc nghi·ªám tr·∫£ l·ªùi ng·∫Øn', level=1)
            doc.add_paragraph('Th√≠ sinh tr·∫£ l·ªùi t·ª´ c√¢u 1 ƒë·∫øn c√¢u 6.')

            doc.add_paragraph('C√¢u 1. N·ªôi dung c√¢u h·ªèi tr·∫£ l·ªùi ng·∫Øn m·∫´u?')
            doc.add_paragraph('K·∫øt qu·∫£: 10')
            doc.add_paragraph('')

            doc.save(file_path)
            QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ xu·∫•t file template m·∫´u.")

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ xu·∫•t template: {e}")

    # Clear form cho t·∫•t c·∫£ lo·∫°i c√¢u h·ªèi
    def clear_all_question_forms(self):
        """Clear form cho t·∫•t c·∫£ lo·∫°i c√¢u h·ªèi"""
        self.current_question_id = None
        self.content_text.clear()

        # Clear multiple choice
        self.correct_group.setExclusive(False)
        for b in self.correct_group.buttons():
            b.setChecked(False)
        self.correct_group.setExclusive(True)
        for ent in self.option_entries.values():
            ent.clear()

        # Clear true/false
        if hasattr(self, 'sub_question_entries'):
            for entry in self.sub_question_entries.values():
                entry.clear()
            for cb in self.sub_question_checkboxes.values():
                cb.setChecked(False)

        # Clear short answer
        if hasattr(self, 'short_answer_edit'):
            self.short_answer_edit.clear()
        if hasattr(self, 'alternative_answers_edit'):
            self.alternative_answers_edit.clear()

    # Th√™m ph∆∞∆°ng th·ª©c setup tree management
    def _setup_tree_management(self):
        """Thi·∫øt l·∫≠p ch·ª©c nƒÉng qu·∫£n l√Ω c√¢y th∆∞ m·ª•c"""

        # Th√™m context menu cho tree
        self.tree.setContextMenuPolicy(Qt.CustomContextMenu)
        self.tree.customContextMenuRequested.connect(self._show_tree_context_menu)

        # Th√™m double-click ƒë·ªÉ edit
        self.tree.itemDoubleClicked.connect(self._edit_tree_node)

        # Th√™m keyboard shortcuts
        self._setup_tree_shortcuts()

    # Th√™m ph∆∞∆°ng th·ª©c context menu
    def _show_tree_context_menu(self, position):
        """Hi·ªÉn th·ªã context menu cho tree"""
        item = self.tree.itemAt(position)

        menu = QtWidgets.QMenu(self)

        # Th√™m node m·ªõi
        add_action = menu.addAction("‚ûï Th√™m nh√°nh m·ªõi")
        add_action.triggered.connect(lambda: self._add_tree_node(item))

        if item:  # N·∫øu click v√†o node
            menu.addSeparator()

            # Th√™m node con
            add_child_action = menu.addAction("üìÅ Th√™m nh√°nh con")
            add_child_action.triggered.connect(lambda: self._add_child_node(item))

            # S·ª≠a node
            edit_action = menu.addAction("‚úèÔ∏è S·ª≠a t√™n nh√°nh")
            edit_action.triggered.connect(lambda: self._edit_tree_node(item))

            # Sao ch√©p node
            copy_action = menu.addAction("üìã Sao ch√©p nh√°nh")
            copy_action.triggered.connect(lambda: self._copy_tree_node(item))

            menu.addSeparator()

            # X√≥a node
            delete_action = menu.addAction("üóëÔ∏è X√≥a nh√°nh")
            delete_action.triggered.connect(lambda: self._delete_tree_node(item))

        # Hi·ªÉn th·ªã menu
        menu.exec(self.tree.mapToGlobal(position))

    # Th√™m ph∆∞∆°ng th·ª©c keyboard shortcuts
    def _setup_tree_shortcuts(self):
        """Thi·∫øt l·∫≠p keyboard shortcuts cho tree"""
        # F2 ƒë·ªÉ edit node ƒë∆∞·ª£c ch·ªçn
        edit_shortcut = QShortcut(QKeySequence("F2"), self.tree)
        edit_shortcut.activated.connect(self._edit_selected_tree_node)

        # Delete ƒë·ªÉ x√≥a node
        delete_shortcut = QShortcut(QKeySequence("Delete"), self.tree)
        delete_shortcut.activated.connect(self._delete_selected_tree_node)

        # Ctrl+N ƒë·ªÉ th√™m node m·ªõi
        add_shortcut = QShortcut(QKeySequence("Ctrl+N"), self.tree)
        add_shortcut.activated.connect(self._add_tree_node)
    # Th√™m ph∆∞∆°ng th·ª©c th√™m node
    def _add_tree_node(self, parent_item=None):
        """Th√™m node m·ªõi"""
        try:
            dialog = TreeNodeDialog(self.db, mode="add", parent=self)

            # N·∫øu c√≥ parent item, set l√†m parent
            parent_id = None
            if parent_item:
                parent_id = parent_item.data(0, Qt.UserRole)
                if parent_id:
                    dialog.set_parent_id(parent_id)

            if dialog.exec() == QtWidgets.QDialog.Accepted:
                # Refresh tree sau khi th√™m
                self.refresh_tree()

                # T√¨m l·∫°i parent item sau khi refresh (v√¨ tree ƒë√£ ƒë∆∞·ª£c rebuild)
                if parent_id:
                    self._expand_node_by_id(parent_id)

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ th√™m node: {e}")
    # Th√™m ph∆∞∆°ng th·ª©c th√™m node con
    def _add_child_node(self, parent_item):
        """Th√™m node con"""
        if not parent_item:
            return

        parent_id = parent_item.data(0, Qt.UserRole)
        if not parent_id:
            return

        try:
            dialog = TreeNodeDialog(self.db, mode="add", parent=self)
            dialog.set_parent_id(parent_id)

            if dialog.exec() == QtWidgets.QDialog.Accepted:
                self.refresh_tree()
                # T√¨m l·∫°i v√† expand parent sau khi refresh
                self._expand_node_by_id(parent_id)

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ th√™m node con: {e}")

    # Th√™m ph∆∞∆°ng th·ª©c s·ª≠a node
    def _edit_tree_node(self, item):
        """S·ª≠a node"""
        if not item:
            return

        node_id = item.data(0, Qt.UserRole)
        if not node_id:
            return

        try:
            dialog = TreeNodeDialog(self.db, mode="edit", node_id=node_id, parent=self)

            if dialog.exec() == QtWidgets.QDialog.Accepted:
                self.refresh_tree()
                # T√¨m l·∫°i v√† select node sau khi refresh
                self._select_node_by_id(node_id)

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ s·ª≠a node: {e}")
    # Th√™m ph∆∞∆°ng th·ª©c s·ª≠a node ƒë∆∞·ª£c ch·ªçn
    def _edit_selected_tree_node(self):
        """S·ª≠a node ƒë∆∞·ª£c ch·ªçn"""
        selected_items = self.tree.selectedItems()
        if selected_items:
            self._edit_tree_node(selected_items[0])

    # Th√™m ph∆∞∆°ng th·ª©c sao ch√©p node
    def _copy_tree_node(self, item):
        """Sao ch√©p node"""
        if not item:
            return

        node_id = item.data(0, Qt.UserRole)
        if not node_id:
            return

        try:
            # L·∫•y th√¥ng tin node g·ªëc
            row = self.db.execute_query(
                "SELECT name, level, description, parent_id FROM exercise_tree WHERE id = ?",
                (node_id,), fetch="one"
            )

            if row:
                new_name = f"{row['name']} (Sao ch√©p)"

                # T·∫°o node m·ªõi
                description = row.get('description', '') if row.get('description') else ''

                self.db.execute_query(
                    "INSERT INTO exercise_tree (parent_id, name, level, description) VALUES (?, ?, ?, ?)",
                    (row['parent_id'], new_name, row['level'], description)
                )

                self.refresh_tree()
                QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ sao ch√©p '{new_name}'")

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ sao ch√©p node: {e}")
    # Th√™m ph∆∞∆°ng th·ª©c x√≥a node
    def _delete_tree_node(self, item):
        """X√≥a node v·ªõi x√°c nh·∫≠n"""
        if not item:
            return

        node_id = item.data(0, Qt.UserRole)
        node_name = item.text(0)

        if not node_id:
            return

        try:
            # Ki·ªÉm tra node con
            children_count = self.db.execute_query(
                "SELECT COUNT(*) as count FROM exercise_tree WHERE parent_id = ?",
                (node_id,), fetch="one"
            )

            if children_count and children_count["count"] > 0:
                reply = QtWidgets.QMessageBox.question(
                    self, "X√°c nh·∫≠n x√≥a",
                    f"Nh√°nh '{node_name}' c√≥ {children_count['count']} nh√°nh con.\n"
                    f"B·∫°n c√≥ mu·ªën x√≥a t·∫•t c·∫£ kh√¥ng?",
                    QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
                    QtWidgets.QMessageBox.No
                )
            else:
                reply = QtWidgets.QMessageBox.question(
                    self, "X√°c nh·∫≠n x√≥a",
                    f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a nh√°nh '{node_name}'?",
                    QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
                    QtWidgets.QMessageBox.No
                )

            if reply == QtWidgets.QMessageBox.Yes:
                # X√≥a node v√† t·∫•t c·∫£ con
                self.db.execute_query("DELETE FROM exercise_tree WHERE id = ?", (node_id,))
                self.refresh_tree()
                QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ x√≥a nh√°nh '{node_name}'")

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ x√≥a node: {e}")
    # Th√™m ph∆∞∆°ng th·ª©c x√≥a node ƒë∆∞·ª£c ch·ªçn
    def _delete_selected_tree_node(self):
        """X√≥a node ƒë∆∞·ª£c ch·ªçn"""
        selected_items = self.tree.selectedItems()
        if selected_items:
            self._delete_tree_node(selected_items[0])

    def _expand_node_by_id(self, node_id):
        """T√¨m v√† expand node theo ID"""
        try:
            root = self.tree.invisibleRootItem()
            self._find_and_expand_recursive(root, node_id)
        except Exception:
            pass  # B·ªè qua l·ªói n·∫øu kh√¥ng t√¨m th·∫•y

    def _find_and_expand_recursive(self, parent_item, target_id):
        """ƒê·ªá quy t√¨m v√† expand node"""
        for i in range(parent_item.childCount()):
            child = parent_item.child(i)
            if child and child.data(0, Qt.UserRole) == target_id:
                child.setExpanded(True)
                return True

            if self._find_and_expand_recursive(child, target_id):
                return True

        return False

    def _select_node_by_id(self, node_id):
        """T√¨m v√† select node theo ID"""
        try:
            root = self.tree.invisibleRootItem()
            self._find_and_select_recursive(root, node_id)
        except Exception:
            pass  # B·ªè qua l·ªói n·∫øu kh√¥ng t√¨m th·∫•y

    def _find_and_select_recursive(self, parent_item, target_id):
        """ƒê·ªá quy t√¨m v√† select node"""
        for i in range(parent_item.childCount()):
            child = parent_item.child(i)
            if child and child.data(0, Qt.UserRole) == target_id:
                self.tree.setCurrentItem(child)
                return True

            if self._find_and_select_recursive(child, target_id):
                return True

        return False


class TreeNodeDialog(QtWidgets.QDialog):
    """Dialog ƒë·ªÉ th√™m/s·ª≠a node trong c√¢y th∆∞ m·ª•c"""

    def __init__(self, db_manager, mode="add", node_id=None, parent=None):
        super().__init__(parent)
        self.db = db_manager
        self.mode = mode  # "add" ho·∫∑c "edit"
        self.node_id = node_id
        self.parent_id = None

        self._setup_dialog()
        self._build_ui()
        self._load_data()

    def _setup_dialog(self):
        """Thi·∫øt l·∫≠p dialog"""
        if self.mode == "add":
            self.setWindowTitle("‚ûï Th√™m nh√°nh m·ªõi")
        else:
            self.setWindowTitle("‚úèÔ∏è S·ª≠a nh√°nh")

        self.setModal(True)
        self.resize(450, 400)

        # ƒê·∫∑t icon cho dialog
        self.setWindowIcon(self.style().standardIcon(QtWidgets.QStyle.SP_DirIcon))

    def _build_ui(self):
        """X√¢y d·ª±ng giao di·ªán"""
        layout = QtWidgets.QVBoxLayout(self)
        layout.setSpacing(15)
        layout.setContentsMargins(20, 20, 20, 20)

        # Header
        header = QtWidgets.QLabel()
        if self.mode == "add":
            header.setText("‚ûï Th√™m nh√°nh m·ªõi v√†o c√¢y th∆∞ m·ª•c")
        else:
            header.setText("‚úèÔ∏è Ch·ªânh s·ª≠a th√¥ng tin nh√°nh")

        header.setStyleSheet("""
            QLabel {
                font-size: 16px;
                font-weight: bold;
                color: #2E86AB;
                padding: 15px;
                background-color: #f8f9fa;
                border-radius: 8px;
                border: 1px solid #dee2e6;
                margin-bottom: 10px;
            }
        """)
        layout.addWidget(header)

        # Form container
        form_container = QtWidgets.QWidget()
        form_container.setStyleSheet("""
            QWidget {
                background-color: white;
                border-radius: 8px;
                border: 1px solid #e1e5e9;
            }
        """)

        form_layout = QtWidgets.QFormLayout(form_container)
        form_layout.setSpacing(12)
        form_layout.setContentsMargins(20, 20, 20, 20)

        # Parent selection (ch·ªâ hi·ªán khi th√™m)
        if self.mode == "add":
            self.parent_combo = QtWidgets.QComboBox()
            self.parent_combo.addItem("(Kh√¥ng c√≥ parent - C·∫•p g·ªëc)", None)
            self._load_parent_options()

            parent_label = QtWidgets.QLabel("üìÅ Nh√°nh cha:")
            parent_label.setStyleSheet("font-weight: 500; color: #495057;")
            form_layout.addRow(parent_label, self.parent_combo)

        # T√™n nh√°nh
        self.name_edit = QtWidgets.QLineEdit()
        self.name_edit.setPlaceholderText("Nh·∫≠p t√™n nh√°nh...")

        name_label = QtWidgets.QLabel("üìù T√™n nh√°nh:")
        name_label.setStyleSheet("font-weight: 500; color: #495057;")
        form_layout.addRow(name_label, self.name_edit)

        # C·∫•p ƒë·ªô
        self.level_combo = QtWidgets.QComboBox()
        self.level_combo.addItems(["M√¥n", "L·ªõp", "Ch·ªß ƒë·ªÅ", "D·∫°ng", "M·ª©c ƒë·ªô"])

        level_label = QtWidgets.QLabel("üìä C·∫•p ƒë·ªô:")
        level_label.setStyleSheet("font-weight: 500; color: #495057;")
        form_layout.addRow(level_label, self.level_combo)

        # M√¥ t·∫£
        self.description_edit = QtWidgets.QTextEdit()
        self.description_edit.setMaximumHeight(100)
        self.description_edit.setPlaceholderText("Nh·∫≠p m√¥ t·∫£ chi ti·∫øt...")

        desc_label = QtWidgets.QLabel("üìÑ M√¥ t·∫£:")
        desc_label.setStyleSheet("font-weight: 500; color: #495057;")
        form_layout.addRow(desc_label, self.description_edit)

        # Style cho form inputs
        input_style = """
            QLineEdit, QComboBox, QTextEdit {
                padding: 10px;
                border: 2px solid #e1e5e9;
                border-radius: 6px;
                font-size: 13px;
                background-color: white;
            }
            QLineEdit:focus, QComboBox:focus, QTextEdit:focus {
                border-color: #2E86AB;
                outline: none;
                background-color: #f8fbff;
            }
            QComboBox::drop-down {
                border: none;
                background-color: transparent;
            }
            QComboBox::down-arrow {
                image: none;
                border: none;
                width: 12px;
                height: 12px;
            }
        """

        self.name_edit.setStyleSheet(input_style)
        self.level_combo.setStyleSheet(input_style)
        self.description_edit.setStyleSheet(input_style)

        if hasattr(self, 'parent_combo'):
            self.parent_combo.setStyleSheet(input_style)

        layout.addWidget(form_container)

        # Buttons container
        button_container = QtWidgets.QWidget()
        button_layout = QtWidgets.QHBoxLayout(button_container)
        button_layout.setContentsMargins(0, 10, 0, 0)

        # Cancel button
        cancel_btn = QtWidgets.QPushButton("‚ùå H·ªßy")
        cancel_btn.setFixedSize(100, 40)
        cancel_btn.clicked.connect(self.reject)
        cancel_btn.setStyleSheet("""
            QPushButton {
                background-color: #6c757d;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 6px;
                font-weight: 600;
                font-size: 13px;
            }
            QPushButton:hover {
                background-color: #5a6268;
            }
            QPushButton:pressed {
                background-color: #545b62;
            }
        """)

        # Save button
        if self.mode == "add":
            save_btn = QtWidgets.QPushButton("‚ûï Th√™m")
            save_btn.setStyleSheet("""
                QPushButton {
                    background-color: #28a745;
                    color: white;
                    border: none;
                    padding: 10px 20px;
                    border-radius: 6px;
                    font-weight: 600;
                    font-size: 13px;
                }
                QPushButton:hover {
                    background-color: #218838;
                }
                QPushButton:pressed {
                    background-color: #1e7e34;
                }
            """)
        else:
            save_btn = QtWidgets.QPushButton("üíæ L∆∞u")
            save_btn.setStyleSheet("""
                QPushButton {
                    background-color: #007bff;
                    color: white;
                    border: none;
                    padding: 10px 20px;
                    border-radius: 6px;
                    font-weight: 600;
                    font-size: 13px;
                }
                QPushButton:hover {
                    background-color: #0056b3;
                }
                QPushButton:pressed {
                    background-color: #004085;
                }
            """)

        save_btn.setFixedSize(100, 40)
        save_btn.clicked.connect(self.accept)
        save_btn.setDefault(True)

        # Add buttons to layout
        button_layout.addStretch()
        button_layout.addWidget(cancel_btn)
        button_layout.addSpacing(10)
        button_layout.addWidget(save_btn)

        layout.addWidget(button_container)

        # Focus v√†o name edit
        self.name_edit.setFocus()

        # Enter ƒë·ªÉ submit
        self.name_edit.returnPressed.connect(save_btn.click)

    def _load_parent_options(self):
        """Load danh s√°ch parent c√≥ th·ªÉ ch·ªçn"""
        if self.mode != "add":
            return

        try:
            rows = self.db.execute_query(
                "SELECT id, name, level FROM exercise_tree ORDER BY level, name",
                fetch="all"
            ) or []

            for row in rows:
                # N·∫øu ƒëang edit, kh√¥ng cho ch·ªçn ch√≠nh n√≥ l√†m parent
                if self.mode == "edit" and row["id"] == self.node_id:
                    continue

                display_text = f"{row['name']} ({row['level']})"
                self.parent_combo.addItem(display_text, row["id"])

        except Exception as e:
            print(f"L·ªói load parent options: {e}")

    def set_parent_id(self, parent_id):
        """ƒê·∫∑t parent ƒë∆∞·ª£c ch·ªçn"""
        self.parent_id = parent_id

        if self.mode == "add" and hasattr(self, 'parent_combo'):
            # T√¨m v√† ch·ªçn parent trong combo
            for i in range(self.parent_combo.count()):
                if self.parent_combo.itemData(i) == parent_id:
                    self.parent_combo.setCurrentIndex(i)
                    break

    def _load_data(self):
        """Load d·ªØ li·ªáu n·∫øu ƒëang edit"""
        if self.mode != "edit" or not self.node_id:
            return

        try:
            # Th·ª≠ query v·ªõi description tr∆∞·ªõc
            row = self.db.execute_query(
                "SELECT name, level, description FROM exercise_tree WHERE id = ?",
                (self.node_id,), fetch="one"
            )

            if row:
                self.name_edit.setText(row["name"] or "")

                # Set level
                level = row["level"] or "M√¥n"
                index = self.level_combo.findText(level)
                if index >= 0:
                    self.level_combo.setCurrentIndex(index)

                # Ki·ªÉm tra description
                description = ""
                if 'description' in row.keys() and row['description']:
                    description = row['description']

                self.description_edit.setPlainText(description)

        except Exception as e:
            # N·∫øu l·ªói do thi·∫øu c·ªôt description, th·ª≠ query kh√¥ng c√≥ description
            try:
                row = self.db.execute_query(
                    "SELECT name, level FROM exercise_tree WHERE id = ?",
                    (self.node_id,), fetch="one"
                )

                if row:
                    self.name_edit.setText(row["name"] or "")
                    level = row["level"] or "M√¥n"
                    index = self.level_combo.findText(level)
                    if index >= 0:
                        self.level_combo.setCurrentIndex(index)
                    self.description_edit.setPlainText("")

            except Exception as e2:
                QtWidgets.QMessageBox.critical(
                    self, "L·ªói",
                    f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu node: {e2}")
    def _validate_input(self):
        """Validate d·ªØ li·ªáu ƒë·∫ßu v√†o"""
        name = self.name_edit.text().strip()

        if not name:
            QtWidgets.QMessageBox.warning(
                self, "L·ªói",
                "T√™n nh√°nh kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!"
            )
            self.name_edit.setFocus()
            return False

        if len(name) > 100:
            QtWidgets.QMessageBox.warning(
                self, "L·ªói",
                "T√™n nh√°nh kh√¥ng ƒë∆∞·ª£c qu√° 100 k√Ω t·ª±!"
            )
            self.name_edit.setFocus()
            return False

        # Ki·ªÉm tra t√™n kh√¥ng b·ªã tr√πng trong c√πng parent
        if self.mode == "add":
            parent_id = None
            if hasattr(self, 'parent_combo'):
                parent_id = self.parent_combo.currentData()
            elif self.parent_id:
                parent_id = self.parent_id

            existing = self.db.execute_query(
                "SELECT id FROM exercise_tree WHERE parent_id = ? AND name = ?",
                (parent_id, name), fetch="one"
            )

            if existing:
                QtWidgets.QMessageBox.warning(
                    self, "L·ªói",
                    "ƒê√£ t·ªìn t·∫°i nh√°nh v·ªõi t√™n n√†y trong c√πng c·∫•p!"
                )
                self.name_edit.setFocus()
                return False
        else:
            # Khi edit, ki·ªÉm tra tr√πng t√™n nh∆∞ng lo·∫°i tr·ª´ ch√≠nh n√≥
            existing = self.db.execute_query(
                "SELECT id FROM exercise_tree WHERE name = ? AND id != ?",
                (name, self.node_id), fetch="one"
            )

            if existing:
                reply = QtWidgets.QMessageBox.question(
                    self, "C·∫£nh b√°o",
                    "ƒê√£ t·ªìn t·∫°i nh√°nh kh√°c v·ªõi t√™n n√†y. B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c?",
                    QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
                    QtWidgets.QMessageBox.No
                )

                if reply != QtWidgets.QMessageBox.Yes:
                    self.name_edit.setFocus()
                    return False

        return True

    def accept(self):
        """X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n Save/Add"""
        if not self._validate_input():
            return

        # L·∫•y d·ªØ li·ªáu t·ª´ form
        name = self.name_edit.text().strip()
        level = self.level_combo.currentText()
        description = self.description_edit.toPlainText().strip()

        try:
            if self.mode == "add":
                # Th√™m node m·ªõi
                parent_id = None
                if hasattr(self, 'parent_combo'):
                    parent_id = self.parent_combo.currentData()
                elif self.parent_id:
                    parent_id = self.parent_id

                # Th·ª≠ insert v·ªõi description tr∆∞·ªõc
                try:
                    self.db.execute_query(
                        "INSERT INTO exercise_tree (parent_id, name, level, description) VALUES (?, ?, ?, ?)",
                        (parent_id, name, level, description)
                    )
                except Exception:
                    # N·∫øu l·ªói, th·ª≠ insert kh√¥ng c√≥ description
                    self.db.execute_query(
                        "INSERT INTO exercise_tree (parent_id, name, level) VALUES (?, ?, ?)",
                        (parent_id, name, level)
                    )

                QtWidgets.QMessageBox.information(
                    self, "Th√†nh c√¥ng",
                    f"ƒê√£ th√™m nh√°nh '{name}' th√†nh c√¥ng!"
                )

            else:
                # C·∫≠p nh·∫≠t node
                try:
                    self.db.execute_query(
                        "UPDATE exercise_tree SET name = ?, level = ?, description = ? WHERE id = ?",
                        (name, level, description, self.node_id)
                    )
                except Exception:
                    # N·∫øu l·ªói, th·ª≠ update kh√¥ng c√≥ description
                    self.db.execute_query(
                        "UPDATE exercise_tree SET name = ?, level = ? WHERE id = ?",
                        (name, level, self.node_id)
                    )

                QtWidgets.QMessageBox.information(
                    self, "Th√†nh c√¥ng",
                    f"ƒê√£ c·∫≠p nh·∫≠t nh√°nh '{name}' th√†nh c√¥ng!"
                )

            super().accept()

        except Exception as e:
            QtWidgets.QMessageBox.critical(
                self, "L·ªói database",
                f"Kh√¥ng th·ªÉ l∆∞u d·ªØ li·ªáu:\n{str(e)}"
            )

    def reject(self):
        """X·ª≠ l√Ω khi ng∆∞·ªùi d√πng h·ªßy"""
        # Ki·ªÉm tra xem c√≥ thay ƒë·ªïi g√¨ kh√¥ng
        if self.mode == "edit" and self.node_id:
            try:
                row = self.db.execute_query(
                    "SELECT name, level, description FROM exercise_tree WHERE id = ?",
                    (self.node_id,), fetch="one"
                )

                if row:
                    current_name = self.name_edit.text().strip()
                    current_level = self.level_combo.currentText()
                    current_desc = self.description_edit.toPlainText().strip()

                    if (current_name != (row["name"] or "") or
                            current_level != (row["level"] or "M√¥n") or
                            current_desc != (row["description"] or "")):

                        reply = QtWidgets.QMessageBox.question(
                            self, "X√°c nh·∫≠n",
                            "B·∫°n c√≥ thay ƒë·ªïi ch∆∞a l∆∞u. B·∫°n c√≥ mu·ªën tho√°t?",
                            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
                            QtWidgets.QMessageBox.No
                        )

                        if reply != QtWidgets.QMessageBox.Yes:
                            return
            except:
                pass

        super().reject()