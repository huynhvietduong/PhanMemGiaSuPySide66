# ui_qt/windows/#dashboard_window_qt.py
from __future__ import annotations
import os
from functools import partial
from PySide6 import QtCore, QtGui, QtWidgets
from PySide6.QtCore import Qt
import sys
from pathlib import Path
current_dir = Path(__file__).parent
question_bank_path = current_dir / 'question_bank'
#(Debug th√¥ng tin v·ªÅ question_bank paths)
if question_bank_path.exists():
    main_window_file = question_bank_path / "views" / "main_window.py"
if str(question_bank_path) not in sys.path:
    sys.path.insert(0, str(question_bank_path))

def _safe_import(path: str, class_name: str):
    """Import ti·ªán l·ª£i: tr·∫£ v·ªÅ class ho·∫∑c None n·∫øu thi·∫øu file Qt."""
    try:
        mod = __import__(path, fromlist=[class_name])
        return getattr(mod, class_name)
    except Exception as e:
        # In ra l·ªói chi ti·∫øt ƒë·ªÉ debug
        print(f"‚ùå L·ªói import {path}.{class_name}: {e}")
        import traceback
        traceback.print_exc()
        return None
class DashboardWindowQt(QtWidgets.QMainWindow):
    def __init__(self, db_manager, parent=None):
        super().__init__(parent)
        self.db = db_manager
        self.setWindowTitle("üìö B·∫£ng ƒëi·ªÅu khi·ªÉn - Ph·∫ßn m·ªÅm Gia s∆∞ (Qt)")

        cw = QtWidgets.QWidget()
        self.setCentralWidget(cw)
        root = QtWidgets.QVBoxLayout(cw)

        # thanh ti√™u ƒë·ªÅ
        title = QtWidgets.QLabel("üìö B·∫£ng ƒëi·ªÅu khi·ªÉn")
        title.setStyleSheet("font-size:20px;font-weight:700;")
        root.addWidget(title)
        root.addSpacing(8)

        # khu v·ª±c cu·ªôn
        scroll = QtWidgets.QScrollArea()
        scroll.setWidgetResizable(True)
        root.addWidget(scroll, 1)

        inner = QtWidgets.QWidget()
        scroll.setWidget(inner)
        lay = QtWidgets.QVBoxLayout(inner)

        # ==== Nh√≥m ch·ª©c nƒÉng ====
        # Nh√≥m ch·ª©c nƒÉng qu·∫£n l√Ω h·ªçc t·∫≠p - th√™m G√≥i h·ªçc
        self._add_section(lay, "üìÇ Qu·∫£n l√Ω h·ªçc t·∫≠p", [
            ("H·ªçc sinh", "assets/icons/students.png", self._open("ui_qt.windows.student_window_qt", "StudentWindowQt")),
            ("Nh√≥m h·ªçc", "assets/icons/groups.png", self._open("ui_qt.windows.group_window_qt", "GroupWindowQt")),
            ("G√≥i h·ªçc", "assets/icons/students.png", self._open("ui_qt.windows.package_window_qt", "PackageWindowQt")),
            ("Chuy√™n c·∫ßn", "assets/icons/attendance.png",
             self._open("ui_qt.windows.attendance_report_window_qt", "AttendanceReportWindowQt")),
            ("L·ªãch d·∫°y (Main)", "assets/icons/calendar.png", self._open_main_window),
        ])

        self._add_section(lay, "üìù B√†i t·∫≠p & C√¢u h·ªèi", [
            ("Giao b√†i",           "assets/icons/assignment.png",       self._open("ui_qt.windows.assign_exercise_window_qt", "AssignExerciseWindowQt")),
            ("N·ªôp b√†i",            "assets/icons/submit.png",           self._open("ui_qt.windows.submit_exercise_window_qt", "SubmitExerciseWindowQt")),
            ("ƒê√£ n·ªôp",             "assets/icons/submitted.png",        self._open("ui_qt.windows.submitted_exercise_manager_window_qt", "SubmittedExerciseManagerWindowQt")),
            ("Ng√¢n h√†ng c√¢u h·ªèi", "assets/icons/question_bank.png",     self._open_question_bank_window),
            ("G·ª£i √Ω b√†i",          "assets/icons/suggest.png",          self._open("ui_qt.windows.exercise_suggestion_window_qt", "ExerciseSuggestionWindowQt")),
            ("T·∫°o ƒë·ªÅ PDF",         "assets/icons/test.png",             self._open("ui_qt.windows.create_test_window_qt", "CreateTestWindowQt")),
            ("C√¢y th∆∞ m·ª•c",        "assets/icons/folder.png",           self._open("ui_qt.windows.exercise_tree_manager_qt", "ExerciseTreeManagerQt")),
        ])

        self._add_section(lay, "üìä B√°o c√°o & ƒê√°nh gi√°", [
            ("Ti·∫øn ƒë·ªô",            "assets/icons/progress.png",         self._open("ui_qt.windows.progress_report_window_qt", "ProgressReportWindowQt")),
            ("NƒÉng l·ª±c",           "assets/icons/skill.png",            self._open("ui_qt.windows.student_skill_report_window_qt", "StudentSkillReportWindowQt")),
            ("ƒê√°nh gi√°",           "assets/icons/rating.png",           self._open("ui_qt.windows.skill_rating_window_qt", "SkillRatingWindowQt")),
            ("G·ª£i √Ω nh√≥m",         "assets/icons/group_suggest.png",    self._open("ui_qt.windows.group_suggestion_window_qt", "GroupSuggestionWindowQt")),
            ("H·ªçc ph√≠",            "assets/icons/salary.png",           self._open("ui_qt.windows.salary_window_qt", "SalaryWindowQt")),
        ])

        lay.addStretch(1)

        # menubar c∆° b·∫£n
        m = self.menuBar().addMenu("T·ªáp")
        act_exit = QtGui.QAction("Tho√°t", self)
        act_exit.triggered.connect(self.close)
        m.addAction(act_exit)
        self.showMaximized()

    # ---------- helpers ----------
    def _add_section(self, parent_layout: QtWidgets.QVBoxLayout, title: str, items: list[tuple[str, str, callable]]):
        lab = QtWidgets.QLabel(title)
        lab.setStyleSheet("font-weight:600;margin-top:14px;")
        parent_layout.addWidget(lab)

        grid = QtWidgets.QGridLayout()
        parent_layout.addLayout(grid)

        # ƒêi·ªÅu ch·ªânh s·ªë c·ªôt m·ªói h√†ng (m·∫∑c ƒë·ªãnh l√† 5, c√≥ th·ªÉ ƒë·ªïi th√†nh 4)
        columns_per_row = 4  # Thay ƒë·ªïi t·ª´ 5 th√†nh 4 n·∫øu mu·ªën

        for i, (text, icon_path, handler) in enumerate(items):
            w = self._make_card(text, icon_path, handler)
            grid.addWidget(w, i // columns_per_row, i % columns_per_row)
    def _make_card(self, text: str, icon_path: str, handler: callable) -> QtWidgets.QWidget:
        btn = QtWidgets.QToolButton()
        btn.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)
        btn.setText(text)
        if os.path.exists(icon_path):
            btn.setIcon(QtGui.QIcon(icon_path))
            btn.setIconSize(QtCore.QSize(64, 64))

        # T√πy ch·ªânh k√≠ch th∆∞·ªõc n·∫øu c√≥ nhi·ªÅu n√∫t trong 1 h√†ng
        btn.setFixedSize(140, 120)  # Ho·∫∑c ƒëi·ªÅu ch·ªânh theo nhu c·∫ßu

        btn.clicked.connect(handler)
        wrap = QtWidgets.QWidget()
        lay = QtWidgets.QVBoxLayout(wrap)
        lay.setContentsMargins(6, 6, 6, 6)
        lay.addWidget(btn, 0, Qt.AlignLeft)
        return wrap
    # ui_qt/windows/#dashboard_window_qt.py
    def _open(self, module_path: str, class_name: str):
        def _handler():
            cls = _safe_import(module_path, class_name)
            if not cls:
                QtWidgets.QMessageBox.information(self, "Th√¥ng tin", f"Ch·ª©c nƒÉng '{class_name}' (Qt) ch∆∞a s·∫µn s√†ng.")
                return

            # T·∫°o c·ª≠a s·ªï con
            win = cls(self.db, parent=self)

            # Ki·ªÉm tra lo·∫°i c·ª≠a s·ªï v√† x·ª≠ l√Ω hi·ªÉn th·ªã ph√π h·ª£p
            if isinstance(win, QtWidgets.QDialog):
                win.exec()
            else:
                # Fix: ƒê·∫£m b·∫£o c·ª≠a s·ªï QWidget lu√¥n hi·ªÉn th·ªã tr√™n c√πng
                win.setWindowFlags(win.windowFlags() | Qt.Window)
                try:
                    win.showMaximized()
                except:
                    # Fallback n·∫øu showMaximized() kh√¥ng ho·∫°t ƒë·ªông
                    win.show()
                    win.setWindowState(Qt.WindowMaximized)

                win.raise_()  # ƒê∆∞a l√™n tr√™n c√πng
                win.activateWindow()  # K√≠ch ho·∫°t c·ª≠a s·ªï

                # L∆∞u tham chi·∫øu ƒë·ªÉ tr√°nh b·ªã garbage collect
                if not hasattr(self, '_child_windows'):
                    self._child_windows = []
                self._child_windows.append(win)

                # X√≥a tham chi·∫øu khi c·ª≠a s·ªï ƒë√≥ng
                def on_window_closed():
                    if win in self._child_windows:
                        self._child_windows.remove(win)

                win.destroyed.connect(on_window_closed)

        return _handler
    def _open_main_window(self):
        # m·ªü ‚ÄúL·ªãch d·∫°y‚Äù / MainWindow (Qt)
        from ui_qt.main_window import MainWindow
        self._mw = MainWindow(self.db)  # gi·ªØ tham chi·∫øu

        # üîß FIX: S·ª≠ d·ª•ng showMaximized thay v√¨ show
        self._mw.showMaximized()
        self._mw.raise_()
        self._mw.activateWindow()

    def _open_question_bank_window(self):
        """M·ªü c·ª≠a s·ªï Question Bank m·ªõi v·ªõi error handling ƒë·∫ßy ƒë·ªß"""
        try:
            # (Th·ª≠ import QuestionBankMainWindow t·ª´ ƒë∆∞·ªùng d·∫´n ch√≠nh)
            from ui_qt.windows.question_bank.views.main_window import QuestionBankMainWindow

            # (T·∫°o v√† hi·ªÉn th·ªã c·ª≠a s·ªï Question Bank)
            self.question_bank_window = QuestionBankMainWindow(self.db, parent=self)
            self.question_bank_window.showMaximized()
            self.question_bank_window.raise_()
            self.question_bank_window.activateWindow()

            # (L∆∞u reference ƒë·ªÉ tr√°nh garbage collection)
            if not hasattr(self, '_child_windows'):
                self._child_windows = []
            self._child_windows.append(self.question_bank_window)

            print("‚úÖ ƒê√£ m·ªü Question Bank th√†nh c√¥ng")

        except ImportError as e:
            print(f"‚ùå L·ªói import QuestionBankMainWindow: {e}")
            # (Th·ª≠ fallback import path kh√°c)
            try:
                from question_bank.views.main_window import QuestionBankMainWindow
                self.question_bank_window = QuestionBankMainWindow(self.db, parent=self)
                self.question_bank_window.showMaximized()  # Thay v√¨ show()
                self.question_bank_window.raise_()
                self.question_bank_window.activateWindow()
                print("‚úÖ ƒê√£ m·ªü Question Bank b·∫±ng fallback path")
            except ImportError:
                # (Hi·ªÉn th·ªã dialog l·ªói v·ªõi h∆∞·ªõng d·∫´n)
                QtWidgets.QMessageBox.warning(
                    self, "Kh√¥ng th·ªÉ m·ªü Question Bank",
                    "L·ªói: Kh√¥ng t√¨m th·∫•y module Question Bank.\n\n"
                    "Ki·ªÉm tra:\n"
                    "1. File main_window.py c√≥ t·ªìn t·∫°i kh√¥ng\n"
                    "2. C√°c dependencies c√≥ ƒë·∫ßy ƒë·ªß kh√¥ng\n"
                    "3. Import path c√≥ ƒë√∫ng kh√¥ng"
                )
        except Exception as e:
            print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
            # (Hi·ªÉn th·ªã dialog l·ªói chi ti·∫øt)
            QtWidgets.QMessageBox.critical(
                self, "L·ªói kh√¥ng x√°c ƒë·ªãnh",
                f"Kh√¥ng th·ªÉ m·ªü Question Bank:\n{str(e)}\n\n"
                f"Vui l√≤ng ki·ªÉm tra console ƒë·ªÉ xem chi ti·∫øt l·ªói."
            )