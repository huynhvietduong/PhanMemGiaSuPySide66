"""
Widget l·ªçc v√† t√¨m ki·∫øm cho ng√¢n h√†ng c√¢u h·ªèi
T√°ch t·ª´ _create_filter_controls v√† quick_search trong file g·ªëc
"""

from typing import Dict, Any
from PySide6 import QtCore, QtGui, QtWidgets
from PySide6.QtCore import Qt, Signal
from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QFormLayout,
    QLabel, QLineEdit, QComboBox, QPushButton, QGroupBox,
    QCheckBox, QSlider, QSpinBox
)


class FilterWidget(QWidget):
    """Widget l·ªçc v√† t√¨m ki·∫øm c√¢u h·ªèi"""

    # Signals
    filters_changed = Signal(dict)  # Ph√°t t√≠n hi·ªáu khi filter thay ƒë·ªïi
    search_requested = Signal(str)  # Ph√°t t√≠n hi·ªáu khi t√¨m ki·∫øm

    def __init__(self, db_manager, parent=None):
        super().__init__(parent)
        self.db = db_manager
        self.current_filters = {}

        self._setup_ui()
        self._setup_connections()
        self._load_filter_data()

    def _setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán filter"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(5, 5, 5, 5)
        layout.setSpacing(8)

        # Ti√™u ƒë·ªÅ
        title_label = QLabel("üîç T√¨m ki·∫øm & L·ªçc")
        title_label.setStyleSheet("""
            QLabel {
                font-weight: bold;
                font-size: 14px;
                color: #2c3e50;
                padding: 5px;
                background: #f8f9fa;
                border: 1px solid #dee2e6;
                border-radius: 4px;
            }
        """)
        layout.addWidget(title_label)

        # Nh√≥m t√¨m ki·∫øm
        self._create_search_group(layout)

        # Nh√≥m filter c∆° b·∫£n
        self._create_basic_filter_group(layout)

        # Nh√≥m filter n√¢ng cao
        self._create_advanced_filter_group(layout)

        # Buttons
        self._create_action_buttons(layout)

        layout.addStretch()

    def _create_search_group(self, layout: QVBoxLayout):
        """T·∫°o nh√≥m t√¨m ki·∫øm"""
        search_group = QGroupBox("üîç T√¨m ki·∫øm")
        search_layout = QVBoxLayout(search_group)

        # √î t√¨m ki·∫øm ch√≠nh
        self.search_edit = QLineEdit()
        self.search_edit.setPlaceholderText("üîç T√¨m theo n·ªôi dung, tags...")
        self.search_edit.setStyleSheet("""
            QLineEdit {
                padding: 8px;
                border: 2px solid #e3f2fd;
                border-radius: 6px;
                font-size: 13px;
            }
            QLineEdit:focus {
                border-color: #2196f3;
                background: #fafafa;
            }
        """)
        search_layout.addWidget(self.search_edit)

        # T√πy ch·ªçn t√¨m ki·∫øm
        search_options_layout = QHBoxLayout()

        self.fuzzy_search_cb = QCheckBox("T√¨m m·ªù")
        self.fuzzy_search_cb.setToolTip("T√¨m ki·∫øm g·∫ßn ƒë√∫ng, b·ªè qua l·ªói ch√≠nh t·∫£")
        search_options_layout.addWidget(self.fuzzy_search_cb)

        self.case_sensitive_cb = QCheckBox("Ph√¢n bi·ªát hoa th∆∞·ªùng")
        search_options_layout.addWidget(self.case_sensitive_cb)

        search_options_layout.addStretch()
        search_layout.addLayout(search_options_layout)

        layout.addWidget(search_group)

    def _create_basic_filter_group(self, layout: QVBoxLayout):
        """T·∫°o nh√≥m filter c∆° b·∫£n"""
        basic_group = QGroupBox("üìã L·ªçc c∆° b·∫£n")
        basic_layout = QFormLayout(basic_group)
        basic_layout.setLabelAlignment(Qt.AlignRight)

        # L·ªçc theo m√¥n h·ªçc
        self.subject_cb = QComboBox()
        self.subject_cb.setMinimumWidth(150)
        basic_layout.addRow("üìö M√¥n:", self.subject_cb)

        # L·ªçc theo l·ªõp
        self.grade_cb = QComboBox()
        self.grade_cb.setMinimumWidth(150)
        basic_layout.addRow("üéì L·ªõp:", self.grade_cb)

        # L·ªçc theo ch·ªß ƒë·ªÅ
        self.topic_cb = QComboBox()
        self.topic_cb.setMinimumWidth(150)
        basic_layout.addRow("üìñ Ch·ªß ƒë·ªÅ:", self.topic_cb)

        # L·ªçc theo d·∫°ng b√†i
        self.type_cb = QComboBox()
        self.type_cb.setMinimumWidth(150)
        basic_layout.addRow("üìù D·∫°ng b√†i:", self.type_cb)

        layout.addWidget(basic_group)

    def _create_advanced_filter_group(self, layout: QVBoxLayout):
        """T·∫°o nh√≥m filter n√¢ng cao"""
        advanced_group = QGroupBox("‚öôÔ∏è L·ªçc n√¢ng cao")
        advanced_layout = QVBoxLayout(advanced_group)

        # Filter theo m·ª©c ƒë·ªô
        level_layout = QFormLayout()
        self.level_cb = QComboBox()
        self.level_cb.addItems([
            "T·∫•t c·∫£ m·ª©c ƒë·ªô",
            "üü¢ Nh·∫≠n bi·∫øt",
            "üü° Th√¥ng hi·ªÉu",
            "üü† V·∫≠n d·ª•ng",
            "üî¥ V·∫≠n d·ª•ng cao"
        ])
        level_layout.addRow("üìä M·ª©c ƒë·ªô:", self.level_cb)
        advanced_layout.addLayout(level_layout)

        # Filter theo ƒë·ªô kh√≥ (slider)
        difficulty_layout = QVBoxLayout()
        difficulty_layout.addWidget(QLabel("üéØ ƒê·ªô kh√≥:"))

        self.difficulty_slider = QSlider(Qt.Horizontal)
        self.difficulty_slider.setRange(1, 5)
        self.difficulty_slider.setValue(1)
        self.difficulty_slider.setTickPosition(QSlider.TicksBelow)
        self.difficulty_slider.setTickInterval(1)

        difficulty_labels_layout = QHBoxLayout()
        difficulty_labels = ["R·∫•t d·ªÖ", "D·ªÖ", "TB", "Kh√≥", "R·∫•t kh√≥"]
        for label in difficulty_labels:
            lbl = QLabel(label)
            lbl.setAlignment(Qt.AlignCenter)
            lbl.setStyleSheet("font-size: 10px; color: #666;")
            difficulty_labels_layout.addWidget(lbl)

        difficulty_layout.addWidget(self.difficulty_slider)
        difficulty_layout.addLayout(difficulty_labels_layout)
        advanced_layout.addLayout(difficulty_layout)

        # Filter theo lo·∫°i n·ªôi dung
        content_type_layout = QFormLayout()
        self.content_type_cb = QComboBox()
        self.content_type_cb.addItems([
            "T·∫•t c·∫£ lo·∫°i",
            "üìù Text",
            "üñºÔ∏è H√¨nh ·∫£nh",
            "üìÑ PDF",
            "üìò Word"
        ])
        content_type_layout.addRow("üíæ Lo·∫°i n·ªôi dung:", self.content_type_cb)
        advanced_layout.addLayout(content_type_layout)

        # Filter theo th·ªùi gian t·∫°o
        date_layout = QVBoxLayout()
        date_layout.addWidget(QLabel("üìÖ Th·ªùi gian t·∫°o:"))

        date_range_layout = QHBoxLayout()
        self.date_from_cb = QComboBox()
        self.date_from_cb.addItems([
            "B·∫•t k·ª≥",
            "H√¥m nay",
            "7 ng√†y qua",
            "30 ng√†y qua",
            "90 ng√†y qua",
            "1 nƒÉm qua"
        ])
        date_range_layout.addWidget(self.date_from_cb)

        date_layout.addLayout(date_range_layout)
        advanced_layout.addLayout(date_layout)

        # Filter theo tr·∫°ng th√°i
        status_layout = QVBoxLayout()
        status_layout.addWidget(QLabel("üìå Tr·∫°ng th√°i:"))

        status_checkboxes_layout = QHBoxLayout()
        self.active_cb = QCheckBox("ƒêang d√πng")
        self.active_cb.setChecked(True)
        self.draft_cb = QCheckBox("Nh√°p")
        self.archived_cb = QCheckBox("L∆∞u tr·ªØ")

        status_checkboxes_layout.addWidget(self.active_cb)
        status_checkboxes_layout.addWidget(self.draft_cb)
        status_checkboxes_layout.addWidget(self.archived_cb)

        status_layout.addLayout(status_checkboxes_layout)
        advanced_layout.addLayout(status_layout)

        layout.addWidget(advanced_group)

    def _create_action_buttons(self, layout: QVBoxLayout):
        """T·∫°o c√°c n√∫t h√†nh ƒë·ªông"""
        buttons_layout = QVBoxLayout()

        # N√∫t √°p d·ª•ng filter
        apply_btn = QPushButton("üîÑ √Åp d·ª•ng l·ªçc")
        apply_btn.setStyleSheet("""
            QPushButton {
                background: #28a745;
                color: white;
                font-weight: bold;
                padding: 8px;
                border: none;
                border-radius: 4px;
            }
            QPushButton:hover {
                background: #218838;
            }
            QPushButton:pressed {
                background: #1e7e34;
            }
        """)
        apply_btn.clicked.connect(self.apply_filters)
        buttons_layout.addWidget(apply_btn)

        # N√∫t x√≥a filter
        clear_btn = QPushButton("üóëÔ∏è X√≥a l·ªçc")
        clear_btn.setStyleSheet("""
            QPushButton {
                background: #6c757d;
                color: white;
                padding: 6px;
                border: none;
                border-radius: 4px;
            }
            QPushButton:hover {
                background: #5a6268;
            }
        """)
        clear_btn.clicked.connect(self.clear_filters)
        buttons_layout.addWidget(clear_btn)

        # N√∫t l∆∞u preset
        save_preset_btn = QPushButton("üíæ L∆∞u b·ªô l·ªçc")
        save_preset_btn.clicked.connect(self.save_filter_preset)
        buttons_layout.addWidget(save_preset_btn)

        layout.addLayout(buttons_layout)

    def _setup_connections(self):
        """Thi·∫øt l·∫≠p k·∫øt n·ªëi signals"""
        # K·∫øt n·ªëi search v·ªõi timer ƒë·ªÉ tr√°nh search qu√° nhi·ªÅu
        self.search_timer = QtCore.QTimer()
        self.search_timer.setSingleShot(True)
        self.search_timer.timeout.connect(self._perform_search)

        self.search_edit.textChanged.connect(self._on_search_text_changed)

        # K·∫øt n·ªëi c√°c filter comboboxes
        self.subject_cb.currentTextChanged.connect(self._on_subject_changed)
        self.grade_cb.currentTextChanged.connect(self._on_grade_changed)
        self.topic_cb.currentTextChanged.connect(self.apply_filters)
        self.type_cb.currentTextChanged.connect(self.apply_filters)
        self.level_cb.currentTextChanged.connect(self.apply_filters)
        self.content_type_cb.currentTextChanged.connect(self.apply_filters)
        self.date_from_cb.currentTextChanged.connect(self.apply_filters)

        # K·∫øt n·ªëi difficulty slider
        self.difficulty_slider.valueChanged.connect(self.apply_filters)

        # K·∫øt n·ªëi checkboxes
        self.active_cb.toggled.connect(self.apply_filters)
        self.draft_cb.toggled.connect(self.apply_filters)
        self.archived_cb.toggled.connect(self.apply_filters)
        self.fuzzy_search_cb.toggled.connect(self._perform_search)
        self.case_sensitive_cb.toggled.connect(self._perform_search)

    def _load_filter_data(self):
        """Load d·ªØ li·ªáu cho c√°c filter combobox"""
        try:
            # Load subjects (m√¥n h·ªçc)
            self._load_subjects()

            # Load grades (l·ªõp)
            self._load_grades()

        except Exception as e:
            print(f"L·ªói load filter data: {e}")

    def _load_subjects(self):
        """Load danh s√°ch m√¥n h·ªçc"""
        try:
            rows = self.db.execute_query(
                "SELECT DISTINCT name FROM exercise_tree WHERE level='M√¥n' ORDER BY name ASC",
                fetch="all"
            ) or []

            self.subject_cb.clear()
            self.subject_cb.addItem("T·∫•t c·∫£ m√¥n")

            for row in rows:
                self.subject_cb.addItem(row["name"])

        except Exception as e:
            print(f"L·ªói load subjects: {e}")

    def _load_grades(self):
        """Load danh s√°ch l·ªõp"""
        try:
            rows = self.db.execute_query(
                "SELECT DISTINCT name FROM exercise_tree WHERE level='L·ªõp' ORDER BY name ASC",
                fetch="all"
            ) or []

            self.grade_cb.clear()
            self.grade_cb.addItem("T·∫•t c·∫£ l·ªõp")

            for row in rows:
                self.grade_cb.addItem(row["name"])

        except Exception as e:
            print(f"L·ªói load grades: {e}")

    def _load_topics(self, subject: str, grade: str):
        """Load ch·ªß ƒë·ªÅ theo m√¥n v√† l·ªõp"""
        try:
            self.topic_cb.clear()
            self.topic_cb.addItem("T·∫•t c·∫£ ch·ªß ƒë·ªÅ")

            if not subject or subject == "T·∫•t c·∫£ m√¥n" or not grade or grade == "T·∫•t c·∫£ l·ªõp":
                return

            # T√¨m ch·ªß ƒë·ªÅ thu·ªôc v·ªÅ m√¥n v√† l·ªõp ƒë∆∞·ª£c ch·ªçn
            rows = self.db.execute_query("""
                SELECT name FROM exercise_tree 
                WHERE level='Ch·ªß ƒë·ªÅ' AND parent_id IN (
                    SELECT id FROM exercise_tree 
                    WHERE name=? AND parent_id IN (
                        SELECT id FROM exercise_tree WHERE name=?
                    )
                )
                ORDER BY name ASC
            """, (grade, subject), fetch="all") or []

            for row in rows:
                self.topic_cb.addItem(row["name"])

        except Exception as e:
            print(f"L·ªói load topics: {e}")

    def _load_types(self, subject: str, grade: str, topic: str):
        """Load d·∫°ng b√†i theo m√¥n, l·ªõp, ch·ªß ƒë·ªÅ"""
        try:
            self.type_cb.clear()
            self.type_cb.addItem("T·∫•t c·∫£ d·∫°ng")

            if not all([subject, grade, topic]) or any([
                subject == "T·∫•t c·∫£ m√¥n",
                grade == "T·∫•t c·∫£ l·ªõp",
                topic == "T·∫•t c·∫£ ch·ªß ƒë·ªÅ"
            ]):
                return

            # T√¨m d·∫°ng b√†i thu·ªôc ch·ªß ƒë·ªÅ
            rows = self.db.execute_query("""
                SELECT name FROM exercise_tree 
                WHERE level='M·ª©c ƒë·ªô' AND parent_id IN (
                    SELECT id FROM exercise_tree WHERE name=? AND level='Ch·ªß ƒë·ªÅ'
                )
                ORDER BY name ASC
            """, (topic,), fetch="all") or []

            for row in rows:
                self.type_cb.addItem(row["name"])

        except Exception as e:
            print(f"L·ªói load types: {e}")

    # ========== EVENT HANDLERS ==========

    def _on_search_text_changed(self, text: str):
        """X·ª≠ l√Ω khi text t√¨m ki·∫øm thay ƒë·ªïi"""
        # Delay search ƒë·ªÉ tr√°nh search qu√° nhi·ªÅu l·∫ßn
        self.search_timer.stop()
        if len(text.strip()) >= 2:  # T·ªëi thi·ªÉu 2 k√Ω t·ª±
            self.search_timer.start(500)  # Delay 500ms
        elif len(text.strip()) == 0:
            self._perform_search()  # Search ngay khi x√≥a h·∫øt

    def _on_subject_changed(self, subject: str):
        """X·ª≠ l√Ω khi thay ƒë·ªïi m√¥n h·ªçc"""
        grade = self.grade_cb.currentText()
        self._load_topics(subject, grade)
        self.apply_filters()

    def _on_grade_changed(self, grade: str):
        """X·ª≠ l√Ω khi thay ƒë·ªïi l·ªõp"""
        subject = self.subject_cb.currentText()
        self._load_topics(subject, grade)
        self.apply_filters()

    def _perform_search(self):
        """Th·ª±c hi·ªán t√¨m ki·∫øm"""
        search_text = self.search_edit.text().strip()
        self.search_requested.emit(search_text)

    # ========== PUBLIC METHODS ==========

    def apply_filters(self):
        """√Åp d·ª•ng t·∫•t c·∫£ filters"""
        filters = self.get_current_filters()
        self.current_filters = filters
        self.filters_changed.emit(filters)

    def get_current_filters(self) -> Dict[str, Any]:
        """L·∫•y filters hi·ªán t·∫°i"""
        filters = {}

        # Basic filters
        if self.subject_cb.currentText() != "T·∫•t c·∫£ m√¥n":
            filters['subject'] = self.subject_cb.currentText()

        if self.grade_cb.currentText() != "T·∫•t c·∫£ l·ªõp":
            filters['grade'] = self.grade_cb.currentText()

        if self.topic_cb.currentText() != "T·∫•t c·∫£ ch·ªß ƒë·ªÅ":
            filters['topic'] = self.topic_cb.currentText()

        if self.type_cb.currentText() != "T·∫•t c·∫£ d·∫°ng":
            filters['type'] = self.type_cb.currentText()

        # Advanced filters
        if self.level_cb.currentText() != "T·∫•t c·∫£ m·ª©c ƒë·ªô":
            filters['level'] = self.level_cb.currentText()

        if self.content_type_cb.currentText() != "T·∫•t c·∫£ lo·∫°i":
            filters['content_type'] = self.content_type_cb.currentText()

        if self.date_from_cb.currentText() != "B·∫•t k·ª≥":
            filters['date_range'] = self.date_from_cb.currentText()

        # Difficulty (lu√¥n c√≥ gi√° tr·ªã)
        filters['difficulty'] = self.difficulty_slider.value()

        # Status filters
        status_filters = []
        if self.active_cb.isChecked():
            status_filters.append('active')
        if self.draft_cb.isChecked():
            status_filters.append('draft')
        if self.archived_cb.isChecked():
            status_filters.append('archived')

        if status_filters:
            filters['status'] = status_filters

        # Search options
        search_text = self.search_edit.text().strip()
        if search_text:
            filters['search_text'] = search_text
            filters['fuzzy_search'] = self.fuzzy_search_cb.isChecked()
            filters['case_sensitive'] = self.case_sensitive_cb.isChecked()

        return filters

    def clear_filters(self):
        """X√≥a t·∫•t c·∫£ filters"""
        # Reset search
        self.search_edit.clear()
        self.fuzzy_search_cb.setChecked(False)
        self.case_sensitive_cb.setChecked(False)

        # Reset basic filters
        self.subject_cb.setCurrentIndex(0)
        self.grade_cb.setCurrentIndex(0)
        self.topic_cb.setCurrentIndex(0)
        self.type_cb.setCurrentIndex(0)

        # Reset advanced filters
        self.level_cb.setCurrentIndex(0)
        self.content_type_cb.setCurrentIndex(0)
        self.date_from_cb.setCurrentIndex(0)
        self.difficulty_slider.setValue(1)

        # Reset status
        self.active_cb.setChecked(True)
        self.draft_cb.setChecked(False)
        self.archived_cb.setChecked(False)

        # Apply empty filters
        self.apply_filters()

    def set_filters(self, filters: Dict[str, Any]):
        """Thi·∫øt l·∫≠p filters t·ª´ b√™n ngo√†i"""
        # Block signals ƒë·ªÉ tr√°nh trigger nhi·ªÅu l·∫ßn
        self.blockSignals(True)

        try:
            # Set search
            if 'search_text' in filters:
                self.search_edit.setText(filters['search_text'])
                self.fuzzy_search_cb.setChecked(filters.get('fuzzy_search', False))
                self.case_sensitive_cb.setChecked(filters.get('case_sensitive', False))

            # Set basic filters
            if 'subject' in filters:
                index = self.subject_cb.findText(filters['subject'])
                if index >= 0:
                    self.subject_cb.setCurrentIndex(index)

            if 'grade' in filters:
                index = self.grade_cb.findText(filters['grade'])
                if index >= 0:
                    self.grade_cb.setCurrentIndex(index)

            # Set difficulty
            if 'difficulty' in filters:
                self.difficulty_slider.setValue(filters['difficulty'])

            # Apply filters
            self.current_filters = filters

        finally:
            self.blockSignals(False)
            self.filters_changed.emit(filters)

    def save_filter_preset(self):
        """L∆∞u preset filter hi·ªán t·∫°i"""
        name, ok = QtWidgets.QInputDialog.getText(
            self,
            "L∆∞u b·ªô l·ªçc",
            "T√™n b·ªô l·ªçc:"
        )

        if ok and name.strip():
            # TODO: Implement save preset to database or config file
            QtWidgets.QMessageBox.information(
                self,
                "Th√†nh c√¥ng",
                f"ƒê√£ l∆∞u b·ªô l·ªçc '{name.strip()}'"
            )

    def get_filter_summary(self) -> str:
        """L·∫•y t√≥m t·∫Øt filters hi·ªán t·∫°i"""
        filters = self.get_current_filters()
        if not filters:
            return "Kh√¥ng c√≥ b·ªô l·ªçc n√†o"

        summary_parts = []

        if 'search_text' in filters:
            summary_parts.append(f"üîç '{filters['search_text']}'")

        if 'subject' in filters:
            summary_parts.append(f"üìö {filters['subject']}")

        if 'grade' in filters:
            summary_parts.append(f"üéì {filters['grade']}")

        if 'difficulty' in filters and filters['difficulty'] > 1:
            difficulty_names = ["", "R·∫•t d·ªÖ", "D·ªÖ", "Trung b√¨nh", "Kh√≥", "R·∫•t kh√≥"]
            summary_parts.append(f"üéØ {difficulty_names[filters['difficulty']]}")

        return " | ".join(summary_parts) if summary_parts else "B·ªô l·ªçc tr·ªëng"