# ui_qt/windows/dashboard_window_qt/views/main_dashboard.py
"""
Main Dashboard Window - C·ª≠a s·ªï ch√≠nh c·ªßa Dashboard Desktop-Style
ƒêi·ªÅu ph·ªëi t·∫•t c·∫£ c√°c components: Desktop, Taskbar, Start Menu
"""

import sys
import os
from pathlib import Path
from typing import Optional, Dict, Any, List
from datetime import datetime
import logging

from PySide6.QtCore import Qt, QTimer, QSize, QPoint, QRect, Signal, QEvent
from PySide6.QtWidgets import (
    QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QStackedWidget, QSplitter, QMdiArea, QMdiSubWindow,
    QMenuBar, QMenu, QStatusBar, QToolBar,
    QDockWidget, QMessageBox, QApplication, QSystemTrayIcon
)
from PySide6.QtGui import (
    QAction, QIcon, QPixmap, QPalette, QColor,
    QFont, QFontDatabase, QCloseEvent, QResizeEvent,
    QKeySequence, QShortcut
)
# Th√™m ƒë∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c cha (dashboard_window_qt)
current_file = Path(__file__)  # views/main_dashboard.py
project_root = current_file.parent.parent.parent.parent.parent  # L√πi v·ªÅ th∆∞ m·ª•c g·ªëc project
if str(project_root) not in sys.path:
    sys.path.insert(0, str(project_root))

# Import services
try:
    from ui_qt.windows.dashboard_window_qt.services.app_launcher_service import (
        AppLauncherService, LaunchResult, WindowMode
    )
    from ui_qt.windows.dashboard_window_qt.services.desktop_service import (
        DesktopService, ArrangeMode, SortBy
    )
    from ui_qt.windows.dashboard_window_qt.services.window_manager_service import (
        WindowManagerService
    )
    from ui_qt.windows.dashboard_window_qt.repositories.app_repository import (
        AppRepository, AppModel
    )
    from ui_qt.windows.dashboard_window_qt.repositories.settings_repository import (
        SettingsRepository
    )
    from ui_qt.windows.dashboard_window_qt.utils.assets import (
        AssetsManager, load_icon, load_wallpaper
    )
    from ui_qt.windows.dashboard_window_qt.utils.constants import (
        TASKBAR_HEIGHT,
        START_MENU_WIDTH,
        START_MENU_HEIGHT,
        DEFAULT_THEME,
        SHORTCUTS
    )

    print("‚úÖ Import th√†nh c√¥ng t·∫•t c·∫£ modules")
    MODULES_AVAILABLE = True

except ImportError as e:
    print(f"‚ùå L·ªói import: {e}")
    import traceback

    traceback.print_exc()

except ImportError as e:
    print(f"‚ùå L·ªói import: {e}")
    import traceback

    traceback.print_exc()

    # Fallback: T·∫°o dummy classes
    from PySide6.QtCore import QObject, Signal
    from PySide6.QtGui import QIcon, QPixmap


    class DummyService(QObject):
        def __init__(self, *args, **kwargs):
            super().__init__()

        def __getattr__(self, name):
            return lambda *args, **kwargs: None


    class DummyRepo:
        def __init__(self, *args, **kwargs): pass

        def __getattr__(self, name): return lambda *args, **kwargs: None


    # Dummy enums
    class LaunchResult:
        SUCCESS = "success"
        FAILED = "failed"
        NOT_FOUND = "not_found"


    class WindowMode:
        NORMAL = "normal"
        MAXIMIZED = "maximized"
        MINIMIZED = "minimized"


    class ArrangeMode:
        GRID = "grid"
        AUTO = "auto"


    class SortBy:
        NAME = "name"
        TYPE = "type"


    # Assign dummy classes
    AppLauncherService = DummyService
    DesktopService = DummyService
    WindowManagerService = DummyService
    AppRepository = DummyRepo
    AppModel = dict
    SettingsRepository = DummyRepo
    AssetsManager = DummyService


    # Dummy functions
    def load_icon(name, size=None):
        return QIcon()


    def load_wallpaper(path):
        return QPixmap()


    # Dummy constants
    TASKBAR_HEIGHT = 45
    START_MENU_WIDTH = 450
    START_MENU_HEIGHT = 600
    DEFAULT_THEME = "light"
    SHORTCUTS = {}

    MODULES_AVAILABLE = False
# Setup logger
logger = logging.getLogger(__name__)


# ========== MAIN DASHBOARD WINDOW ==========

class MainDashboard(QMainWindow):
    """
    C·ª≠a s·ªï ch√≠nh c·ªßa Dashboard Desktop-Style
    Qu·∫£n l√Ω v√† ƒëi·ªÅu ph·ªëi t·∫•t c·∫£ components
    """

    # Signals
    app_launched = Signal(str, object)  # app_id, window
    app_closed = Signal(str)  # app_id
    theme_changed = Signal(str)  # theme_name

    def __init__(self, db_manager=None, parent=None):
        """
        Initialize Main Dashboard

        Args:
            db_manager: Database manager instance
            parent: Parent widget
        """
        super().__init__(parent)

        # Core components
        self.db = db_manager
        self.settings_repo = SettingsRepository()
        self.app_repo = AppRepository()
        self.assets_manager = AssetsManager()
        # Khai b√°o c√°c attributes
        self.db_manager = db_manager

        # Services
        self.app_launcher = AppLauncherService(self.db, self)
        self.desktop_service = DesktopService(self)

        # UI Components (will be initialized)
        self.desktop_area = None
        self.taskbar = None
        self.start_menu = None
        self.system_tray = None
        self.mdi_area = None

        # State tracking
        self.is_fullscreen = False
        self.start_menu_visible = False
        self.current_theme = DEFAULT_THEME

        # Window tracking
        self.child_windows: Dict[str, QWidget] = {}

        # Initialize UI
        self.setup_ui()
        self.setup_services()
        self.setup_connections()
        self.load_settings()
        self.setup_shortcuts()

        # Start timers
        self.setup_timers()

        # Show window
        self.show_window()
        if self.mdi_area:
            self.mdi_area.installEventFilter(self)
    # ========== UI SETUP ==========
    # Ch·∫∑n c√°c event c√≥ th·ªÉ trigger auto-show
    def eventFilter(self, source, event):
        """Event filter ƒë·ªÉ ch·∫∑n auto-show windows"""
        # N·∫øu l√† MDI area v√† l√† resize event
        if source == self.mdi_area:
            if event.type() == QEvent.Resize:
                # Kh√¥ng cho resize trigger show windows
                for window in self.mdi_area.subWindowList():
                    if hasattr(window, 'is_manually_hidden') and window.is_manually_hidden:
                        # Gi·ªØ window ·∫©n n·∫øu ƒëang ·∫©n th·ªß c√¥ng
                        window.hide()

        return super().eventFilter(source, event)
    def setup_ui(self):
        """Setup main UI components"""
        self.setWindowTitle("üñ•Ô∏è Dashboard Desktop - Ph·∫ßn m·ªÅm Gia s∆∞")
        self.setObjectName("MainDashboard")

        # Set window icon
        icon = load_icon("app")
        if icon:
            self.setWindowIcon(icon)

        # Set minimum size
        self.setMinimumSize(1024, 768)

        # Create central widget
        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)

        # Main layout
        self.main_layout = QVBoxLayout(self.central_widget)
        self.main_layout.setContentsMargins(0, 0, 0, 0)
        self.main_layout.setSpacing(0)

        # Create desktop area (main content)
        self.create_desktop_area()

        # Create taskbar
        self.create_taskbar()

        # Create start menu (hidden initially)
        self.create_start_menu()

        # Create system tray
        self.create_system_tray()

        # Setup menu bar
        self.setup_menu_bar()

        # Setup status bar
        self.setup_status_bar()

        # Apply theme
        self.apply_theme()

    def create_desktop_area(self):
        """Create desktop area with wallpaper"""
        # Desktop container
        self.desktop_container = QWidget()
        self.desktop_container.setObjectName("DesktopContainer")

        # S·ª¨A: D√πng l·∫°i QVBoxLayout thay v√¨ QStackedLayout
        desktop_layout = QVBoxLayout(self.desktop_container)
        desktop_layout.setContentsMargins(0, 0, 0, 0)
        desktop_layout.setSpacing(0)

        # Import and create desktop widget
        try:
            from .desktop.desktop_area import DesktopArea
            self.desktop_area = DesktopArea(parent=self.desktop_container)
            self.desktop_area._skip_auto_load_icons = True

            # Connect signals
            if hasattr(self.desktop_area, 'icon_double_clicked'):
                self.desktop_area.icon_double_clicked.connect(self.handle_app_launch)


        except Exception as e:
            logger.error(f"Failed to create desktop area: {e}")
            self.desktop_area = None

        # MDI Area for app windows
        self.mdi_area = QMdiArea()
        self.mdi_area.setObjectName("MdiArea")
        # QUAN TR·ªåNG: Disable auto tile/cascade khi resize
        self.mdi_area.setOption(QMdiArea.DontMaximizeSubWindowOnActivation, True)

        # Disable t·ª± ƒë·ªông arrange
        self.mdi_area.setActivationOrder(QMdiArea.ActivationHistoryOrder)
        # QUAN TR·ªåNG: Set MDI area kh√¥ng ch·∫∑n mouse events khi kh√¥ng c√≥ child windows
        self.mdi_area.setAttribute(Qt.WA_TransparentForMouseEvents, True)

        # Set MDI area transparent
        self.mdi_area.setStyleSheet("""
            QMdiArea {
                background: transparent;
                border: none;
            }
            QMdiArea::viewport {
                background: transparent;
            }
        """)

        from PySide6.QtGui import QBrush
        self.mdi_area.setBackground(QBrush(Qt.transparent))

        # Add c·∫£ 2 widgets v√†o layout
        if self.desktop_area:
            desktop_layout.addWidget(self.desktop_area)

        # QUAN TR·ªåNG: Set MDI area n·∫±m ch·ªìng l√™n desktop area
        self.mdi_area.setParent(self.desktop_container)
        self.mdi_area.move(0, 0)
        self.mdi_area.resize(self.desktop_container.size())

        # Add desktop container to main layout
        self.main_layout.addWidget(self.desktop_container, 1)
    def create_taskbar(self):
        """Create taskbar at bottom"""
        try:
            from .taskbar.taskbar import Taskbar
            self.taskbar = Taskbar(self)

            # Th√™m dictionary ƒë·ªÉ l∆∞u window references
            self.taskbar.window_refs = {}  # Th√™m d√≤ng n√†y

            # Connect signal ƒë·ªÉ x·ª≠ l√Ω ƒë√≥ng app t·ª´ taskbar
            if hasattr(self.taskbar, 'close_app_requested'):
                self.taskbar.close_app_requested.connect(self.close_app_from_taskbar)
        except ImportError:
            # Fallback: Create basic taskbar
            self.taskbar = QWidget()
            self.taskbar.setObjectName("Taskbar")
            self.taskbar.setFixedHeight(TASKBAR_HEIGHT)

            # Taskbar layout
            taskbar_layout = QHBoxLayout(self.taskbar)
            taskbar_layout.setContentsMargins(5, 0, 5, 0)

            # Start button
            from PySide6.QtWidgets import QPushButton
            self.start_button = QPushButton("‚äû Start")
            self.start_button.setObjectName("StartButton")
            self.start_button.clicked.connect(self.toggle_start_menu)
            taskbar_layout.addWidget(self.start_button)

            # Search box
            from PySide6.QtWidgets import QLineEdit
            self.search_box = QLineEdit()
            self.search_box.setPlaceholderText("üîç T√¨m ki·∫øm...")
            self.search_box.setMaximumWidth(200)
            taskbar_layout.addWidget(self.search_box)

            # App buttons area
            self.app_buttons_area = QWidget()
            self.app_buttons_layout = QHBoxLayout(self.app_buttons_area)
            self.app_buttons_layout.setContentsMargins(0, 0, 0, 0)
            taskbar_layout.addWidget(self.app_buttons_area, 1)

            # System tray area
            taskbar_layout.addStretch()

            # Clock
            from PySide6.QtWidgets import QLabel
            self.clock_label = QLabel()
            self.update_clock()
            taskbar_layout.addWidget(self.clock_label)

        # Add taskbar to main layout
        self.main_layout.addWidget(self.taskbar)

    def create_start_menu(self):
        """Create start menu (hidden by default)"""
        # T·∫°o start menu ƒë∆°n gi·∫£n (kh√¥ng c·∫ßn import ph·ª©c t·∫°p)
        from PySide6.QtWidgets import QLabel, QFrame, QListWidget, QPushButton

        self.start_menu = QWidget(self)
        self.start_menu.setObjectName("StartMenu")
        self.start_menu.setFixedSize(450, 600)  # K√≠ch th∆∞·ªõc c·ªë ƒë·ªãnh

        # Start menu layout
        menu_layout = QVBoxLayout(self.start_menu)

        # User info
        user_label = QLabel("üë§ Gi√°o vi√™n")
        user_label.setObjectName("UserLabel")
        menu_layout.addWidget(user_label)

        # Separator
        separator = QFrame()
        separator.setFrameShape(QFrame.HLine)
        menu_layout.addWidget(separator)

        # Pinned apps
        menu_layout.addWidget(QLabel("üìå ·ª®ng d·ª•ng ƒë∆∞·ª£c ghim:"))

        # App list
        self.app_list = QListWidget()

        # Th√™m m·ªôt s·ªë app m·∫´u (kh√¥ng c·∫ßn load t·ª´ database)
        self.app_list.addItem("üìö Ng√¢n h√†ng c√¢u h·ªèi")
        self.app_list.addItem("üë• Qu·∫£n l√Ω h·ªçc sinh")
        self.app_list.addItem("üìä B√°o c√°o ti·∫øn ƒë·ªô")

        menu_layout.addWidget(self.app_list)

        # Power buttons
        power_layout = QHBoxLayout()
        shutdown_btn = QPushButton("‚èª T·∫Øt m√°y")
        restart_btn = QPushButton("üîÑ Kh·ªüi ƒë·ªông l·∫°i")
        power_layout.addWidget(shutdown_btn)
        power_layout.addWidget(restart_btn)
        menu_layout.addLayout(power_layout)

        # Position and hide
        self.start_menu.hide()
        self.position_start_menu()

    def create_system_tray(self):
        """Create system tray icon"""
        if QSystemTrayIcon.isSystemTrayAvailable():
            self.system_tray = QSystemTrayIcon(self)

            # Set icon
            icon = load_icon("app")
            if icon:
                self.system_tray.setIcon(icon)

            # Create context menu
            tray_menu = QMenu()

            show_action = QAction("Hi·ªán Dashboard", self)
            show_action.triggered.connect(self.show)
            tray_menu.addAction(show_action)

            tray_menu.addSeparator()

            exit_action = QAction("Tho√°t", self)
            exit_action.triggered.connect(self.close)
            tray_menu.addAction(exit_action)

            self.system_tray.setContextMenu(tray_menu)

            # Show tray icon
            self.system_tray.show()

            # Connect double click
            self.system_tray.activated.connect(self.on_tray_activated)

    def setup_menu_bar(self):
        """Setup menu bar"""
        menubar = self.menuBar()

        # File menu
        file_menu = menubar.addMenu("&File")

        new_action = QAction("M·ªõi", self)
        new_action.setShortcut("Ctrl+N")
        file_menu.addAction(new_action)

        open_action = QAction("M·ªü", self)
        open_action.setShortcut("Ctrl+O")
        file_menu.addAction(open_action)

        file_menu.addSeparator()

        exit_action = QAction("Tho√°t", self)
        exit_action.setShortcut("Alt+F4")
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)

        # View menu
        view_menu = menubar.addMenu("&View")

        fullscreen_action = QAction("To√†n m√†n h√¨nh", self)
        fullscreen_action.setShortcut("F11")
        fullscreen_action.triggered.connect(self.toggle_fullscreen)
        view_menu.addAction(fullscreen_action)

        view_menu.addSeparator()

        # Theme submenu
        theme_menu = view_menu.addMenu("Theme")

        light_theme = QAction("Light", self)
        light_theme.triggered.connect(lambda: self.change_theme("light"))
        theme_menu.addAction(light_theme)

        dark_theme = QAction("Dark", self)
        dark_theme.triggered.connect(lambda: self.change_theme("dark"))
        theme_menu.addAction(dark_theme)

        # Apps menu
        apps_menu = menubar.addMenu("&Apps")
        self.populate_apps_menu(apps_menu)

        # Window menu
        window_menu = menubar.addMenu("&Window")

        cascade_action = QAction("X·∫øp ch·ªìng", self)
        cascade_action.triggered.connect(self.cascade_windows)
        window_menu.addAction(cascade_action)

        tile_action = QAction("X·∫øp ng√≥i", self)
        tile_action.triggered.connect(self.tile_windows)
        window_menu.addAction(tile_action)

        window_menu.addSeparator()

        close_all_action = QAction("ƒê√≥ng t·∫•t c·∫£", self)
        close_all_action.triggered.connect(self.close_all_windows)
        window_menu.addAction(close_all_action)

        # Help menu
        help_menu = menubar.addMenu("&Help")

        about_action = QAction("V·ªÅ Dashboard", self)
        about_action.triggered.connect(self.show_about)
        help_menu.addAction(about_action)

    def setup_status_bar(self):
        """Setup status bar"""
        self.status_bar = self.statusBar()
        self.status_bar.showMessage("S·∫µn s√†ng")

        # Add permanent widgets
        from PySide6.QtWidgets import QLabel

        # User label
        self.user_label = QLabel("üë§ Gi√°o vi√™n")
        self.status_bar.addPermanentWidget(self.user_label)

        # App count label
        self.app_count_label = QLabel("Apps: 0")
        self.status_bar.addPermanentWidget(self.app_count_label)

    # ========== SERVICES SETUP ==========

    def setup_services(self):
        """Setup and configure services"""
        # Configure app launcher
        self.app_launcher.set_mdi_area(self.mdi_area)

        # Connect app launcher signals
        self.app_launcher.app_launched.connect(self.on_app_launched)
        self.app_launcher.app_closed.connect(self.on_app_closed)
        self.app_launcher.app_error.connect(self.on_app_error)

        # Connect desktop service signals
        self.desktop_service.icon_added.connect(self.on_icon_added)
        self.desktop_service.icon_removed.connect(self.on_icon_removed)

        # Load desktop icons
        self.load_desktop_icons()

    def setup_connections(self):
        """Setup signal/slot connections"""
        # Search box
        if hasattr(self, 'search_box'):
            self.search_box.returnPressed.connect(self.on_search)

        # App list in start menu
        if hasattr(self, 'app_list'):
            self.app_list.itemDoubleClicked.connect(self.on_app_list_double_click)

    def setup_shortcuts(self):
        """Setup keyboard shortcuts"""
        # Win key - Show start menu
        QShortcut(QKeySequence(Qt.Key_Meta), self, self.toggle_start_menu)

        # Win+D - Show desktop
        QShortcut(QKeySequence("Meta+D"), self, self.toggle_desktop)
        # Win+L - Lock screen
        QShortcut(QKeySequence("Meta+L"), self, self.lock_screen)

        # Alt+Tab - Switch apps
        QShortcut(QKeySequence("Alt+Tab"), self, self.switch_apps)

        # Win+E - File explorer
        QShortcut(QKeySequence("Meta+E"), self, self.open_file_explorer)

        # F5 - Refresh
        QShortcut(QKeySequence("F5"), self, self.refresh_desktop)

    def setup_timers(self):
        """Setup timers for updates"""
        # Clock timer
        self.clock_timer = QTimer()
        self.clock_timer.timeout.connect(self.update_clock)
        self.clock_timer.start(1000)  # Update every second

        # Auto-save timer
        self.auto_save_timer = QTimer()
        self.auto_save_timer.timeout.connect(self.auto_save)
        self.auto_save_timer.start(60000)  # Auto-save every minute

    # ========== WINDOW MANAGEMENT ==========

    def show_window(self):
        """Show main window"""
        # Set wallpaper sau khi desktop area s·∫µn s√†ng
        if self.desktop_area:
            self.set_wallpaper()

        # Check startup mode - S·ª¨A PH·∫¶N N√ÄY
        try:
            # Th·ª≠ l·∫•y setting start_maximized n·∫øu c√≥
            start_maximized = False
            if hasattr(self.settings_repo, 'get_general'):
                general_settings = self.settings_repo.get_general()
                if hasattr(general_settings, 'start_maximized'):
                    start_maximized = general_settings.start_maximized
        except:
            start_maximized = False

        # Hi·ªÉn th·ªã window
        if start_maximized:
            self.showMaximized()
        else:
            self.show()
            # Center window
            screen = QApplication.primaryScreen()
            if screen:
                self.move(
                    (screen.geometry().width() - self.width()) // 2,
                    (screen.geometry().height() - self.height()) // 2
                )

    def cascade_windows(self):
        """Cascade MDI windows"""
        if self.mdi_area:
            self.mdi_area.cascadeSubWindows()

    def tile_windows(self):
        """Tile MDI windows"""
        if self.mdi_area:
            self.mdi_area.tileSubWindows()

    def close_all_windows(self):
        """Close all MDI windows"""
        if self.mdi_area:
            self.mdi_area.closeAllSubWindows()

        # Also close app launcher windows
        self.app_launcher.close_all_apps()

    def show_desktop(self):
        """Minimize all windows to show desktop"""
        if self.mdi_area:
            for window in self.mdi_area.subWindowList():
                # Ch·ªâ ·∫©n nh·ªØng window ƒëang hi·ªÉn th·ªã
                if window.isVisible() and not window.isMinimized():
                    if hasattr(window, 'hide_manually'):
                        window.hide_manually()
                    else:
                        window.hide()

    def toggle_desktop(self):
        """Toggle show/hide desktop"""
        if not self.mdi_area:
            return

        # L·∫•y danh s√°ch windows ƒëang hi·ªÉn th·ªã
        visible_windows = []
        for window in self.mdi_area.subWindowList():
            if window.isVisible() and not window.isMinimized():
                if not (hasattr(window, 'is_manually_hidden') and window.is_manually_hidden):
                    visible_windows.append(window)

        if visible_windows:
            # ·∫®n c√°c windows ƒëang hi·ªÉn th·ªã
            for window in visible_windows:
                if hasattr(window, 'hide_manually'):
                    window.hide_manually()
                else:
                    window.hide()
        else:
            # Restore c√°c windows (tr·ª´ manually hidden)
            for window in self.mdi_area.subWindowList():
                if hasattr(window, 'is_manually_hidden') and not window.is_manually_hidden:
                    if hasattr(window, 'show_manually'):
                        window.show_manually()
                    else:
                        window.show()
    def launch_app(self, app_id: str):
        """Launch app by ID"""
        result, window = self.app_launcher.launch_app_by_id(
            app_id,
            WindowMode.NORMAL,
            self
        )

        if result == LaunchResult.SUCCESS:
            self.status_bar.showMessage(f"ƒê√£ m·ªü ·ª©ng d·ª•ng: {app_id}", 3000)
        elif result == LaunchResult.ALREADY_RUNNING:
            self.status_bar.showMessage(f"·ª®ng d·ª•ng ƒëang ch·∫°y: {app_id}", 3000)
        elif result == LaunchResult.PERMISSION_DENIED:
            QMessageBox.warning(self, "L·ªói", "B·∫°n kh√¥ng c√≥ quy·ªÅn m·ªü ·ª©ng d·ª•ng n√†y")
        else:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ m·ªü ·ª©ng d·ª•ng: {app_id}")

    def on_app_launched(self, app_id: str, window: QWidget):
        """Handle app launched"""
        logger.info(f"App launched: {app_id}")

        # Update taskbar - truy·ªÅn c·∫£ app_id v√† window
        if self.taskbar:
            try:
                self.taskbar.add_app_button(app_id, window)
                logger.info(f"Added button to taskbar for app: {app_id}")
            except Exception as e:
                logger.error(f"Error adding button to taskbar: {e}")

        # Update app count
        self.update_app_count()

        # Emit signal
        self.app_launched.emit(app_id, window)

    def on_app_closed(self, app_id: str):
        """Handle app closed"""
        logger.info(f"App closed: {app_id}")

        # Update taskbar
        if self.taskbar:
            try:
                self.taskbar.remove_app_button(app_id)
                logger.info(f"Removed button from taskbar for app: {app_id}")
            except Exception as e:
                logger.error(f"Error removing button from taskbar: {e}")

        # Update app count
        self.update_app_count()

        # Emit signal
        self.app_closed.emit(app_id)

    # ƒê√≥ng app khi click close t·ª´ taskbar
    def close_app_from_taskbar(self, app_id: str):
        """ƒê√≥ng app t·ª´ taskbar button"""
        if hasattr(self.app_launcher, 'close_app'):
            self.app_launcher.close_app(app_id)
    def on_app_error(self, app_id: str, error_msg: str):
        """Handle app error"""
        logger.error(f"App error {app_id}: {error_msg}")
        QMessageBox.critical(self, "L·ªói", f"L·ªói m·ªü ·ª©ng d·ª•ng {app_id}:\n{error_msg}")

    def update_app_count(self):
        """Update app count in status bar"""
        count = len(self.app_launcher.get_running_apps())
        self.app_count_label.setText(f"Apps: {count}")

    def handle_app_launch(self, app_id: str):
        """
        Handle khi user double-click v√†o desktop icon

        Args:
            app_id: ID c·ªßa app c·∫ßn m·ªü
        """
        try:

            # G·ªçi launch_app ƒë·ªÉ m·ªü ·ª©ng d·ª•ng
            self.launch_app(app_id)

        except Exception as e:
            logger.error(f"Error handling app launch: {e}")
            QMessageBox.warning(
                self,
                "L·ªói",
                f"Kh√¥ng th·ªÉ m·ªü ·ª©ng d·ª•ng: {str(e)}"
            )
    # ========== DESKTOP MANAGEMENT ==========

    def load_desktop_icons(self):
        """Load desktop icons t·ª´ pinned apps"""
        try:

            # Ki·ªÉm tra v√† t·∫°o desktop area n·∫øu c·∫ßn
            if not self.desktop_area:
                logger.warning("Desktop area ch∆∞a t·ªìn t·∫°i, ƒëang t·∫°o...")
                if not self._force_create_desktop_area():
                    logger.error("Kh√¥ng th·ªÉ t·∫°o desktop area")
                    return

            # ƒê·∫£m b·∫£o app_repo s·∫µn s√†ng
            if not self.app_repo:
                logger.error("App repository ch∆∞a s·∫µn s√†ng")
                return

            pinned_apps = self.app_repo.get_pinned_apps()

            # KI·ªÇM TRA XEM C√ì B·ªä C·∫ÆT KH√îNG
            if len(pinned_apps) > 4:
                logger.warning(f"Have {len(pinned_apps)} apps but may only show some!")

            # ƒê·∫£m b·∫£o lu√¥n c√≥ apps ƒë·ªÉ hi·ªÉn th·ªã
            if not pinned_apps:
                logger.warning("Kh√¥ng c√≥ pinned apps, l·∫•y apps m·∫∑c ƒë·ªãnh")
                all_apps = self.app_repo.get_all_apps()
                pinned_apps = all_apps[:6] if len(all_apps) >= 6 else all_apps  # ‚Üê D√íNG N√ÄY C√ì TH·ªÇ L√Ä V·∫§N ƒê·ªÄ

            # T·∫°o icons tr·ª±c ti·∫øp tr√™n desktop area
            self._create_desktop_icons_directly(pinned_apps)

        except Exception as e:
            logger.error(f"L·ªói load desktop icons: {e}")
            import traceback
            traceback.print_exc()
    def on_icon_added(self, icon_id: str):
        """Handle icon added to desktop"""

        # Create icon widget if desktop area exists
        if self.desktop_area and hasattr(self.desktop_area, 'create_icon_widget'):
            self.desktop_area.create_icon_widget(icon_id)

    def on_icon_removed(self, icon_id: str):
        """Handle icon removed from desktop"""

        # Remove icon widget if desktop area exists
        if self.desktop_area and hasattr(self.desktop_area, 'remove_icon_widget'):
            self.desktop_area.remove_icon_widget(icon_id)

    def refresh_desktop(self):
        """Refresh desktop"""
        self.desktop_service.refresh_desktop()
        self.status_bar.showMessage("Desktop ƒë√£ ƒë∆∞·ª£c l√†m m·ªõi", 2000)

    # T·∫°o icons tr·ª±c ti·∫øp tr√™n desktop area
    def _create_desktop_icons_directly(self, apps: list):
        """T·∫°o icons tr·ª±c ti·∫øp tr√™n desktop area"""
        try:
            if not self.desktop_area:
                logger.error("Desktop area kh√¥ng t·ªìn t·∫°i")
                return

            # Clear existing icons first ƒë·ªÉ tr√°nh duplicate
            if hasattr(self.desktop_area, 'desktop_icons'):
                for widget in self.desktop_area.desktop_icons.values():
                    widget.deleteLater()
                self.desktop_area.desktop_icons.clear()

            # Import AppIconWidget
            try:
                from .widgets.app_icon_widget import AppIconWidget
            except ImportError:
                logger.error("Kh√¥ng th·ªÉ import AppIconWidget")
                self._create_basic_icons(apps)
                return

            # X√°c ƒë·ªãnh parent container
            icon_parent = getattr(self.desktop_area, 'icon_container', self.desktop_area)

            # Load saved positions
            saved_positions = self.settings_repo.get_desktop_icon_positions()

            # Layout configuration - ƒëi·ªÅu ch·ªânh ƒë·ªÉ hi·ªÉn th·ªã nhi·ªÅu icons
            ICONS_PER_ROW = 8  # TƒÉng t·ª´ 4 l√™n 8 icons m·ªói h√†ng
            ICON_WIDTH = 90  # Gi·∫£m t·ª´ 120 xu·ªëng 90
            ICON_HEIGHT = 100  # Gi·ªØ nguy√™n 100
            START_X = 20  # Margin tr√°i
            START_Y = 20  # Margin tr√™n

            # T·∫°o icons cho t·ª´ng app
            for i, app in enumerate(apps):
                try:
                    # Check saved position first
                    if app.id in saved_positions:
                        x_pos, y_pos = saved_positions[app.id]
                        position = QPoint(x_pos, y_pos)
                    else:
                        # Calculate grid position
                        col = i % ICONS_PER_ROW
                        row = i // ICONS_PER_ROW
                        position = QPoint(
                            START_X + col * ICON_WIDTH,
                            START_Y + row * ICON_HEIGHT
                        )

                    # T·∫°o icon widget
                    icon_widget = AppIconWidget(
                        app_id=app.id,
                        name=app.display_name,
                        icon=load_icon(app.icon_name or "app", QSize(48, 48)),
                        parent=icon_parent
                    )

                    # Connect signal v·ªõi closure ƒë√∫ng c√°ch
                    def make_launcher(app_id):
                        return lambda: self.handle_app_launch(app_id)

                    icon_widget.double_clicked.connect(make_launcher(app.id))

                    # Set position v√† hi·ªÉn th·ªã
                    icon_widget.move(position)
                    icon_widget.show()

                    # L∆∞u reference
                    if hasattr(self.desktop_area, 'desktop_icons'):
                        self.desktop_area.desktop_icons[app.id] = icon_widget
                    if hasattr(self.desktop_area, 'icon_positions'):
                        self.desktop_area.icon_positions[app.id] = position

                    # Save position to settings
                    self.settings_repo.save_desktop_icon_position(app.id, position)

                except Exception as e:
                    logger.error(f"L·ªói t·∫°o icon cho {app.display_name}: {e}")

            icon_count = len(self.desktop_area.desktop_icons)

        except Exception as e:
            logger.error(f"L·ªói t·∫°o desktop icons: {e}")
    # Force t·∫°o desktop area n·∫øu import th·∫•t b·∫°i
    def _force_create_desktop_area(self):
        """Force t·∫°o desktop area v·ªõi basic widget"""
        try:
            # T·∫°o basic desktop widget
            self.desktop_area = QWidget(self.desktop_container)
            self.desktop_area.setObjectName("BasicDesktopArea")
            self.desktop_area.setMinimumSize(800, 600)

            # Th√™m v√†o layout
            if hasattr(self, 'desktop_container'):
                layout = self.desktop_container.layout()
                if layout:
                    layout.insertWidget(0, self.desktop_area)

            # T·∫°o icon container
            self.desktop_area.icon_container = QWidget(self.desktop_area)
            self.desktop_area.icon_container.setStyleSheet("background: transparent;")

            # T·∫°o storage cho icons
            self.desktop_area.desktop_icons = {}
            self.desktop_area.icon_positions = {}

            logger.info("Basic desktop area ƒë√£ ƒë∆∞·ª£c t·∫°o")
            return True

        except Exception as e:
            logger.error(f"L·ªói t·∫°o basic desktop area: {e}")
            return False
    # T·∫°o apps demo khi kh√¥ng c√≥ d·ªØ li·ªáu
    # Fallback: t·∫°o basic icons khi kh√¥ng import ƒë∆∞·ª£c AppIconWidget
    def _create_basic_icons(self, apps: list):
        """T·∫°o basic icons khi kh√¥ng import ƒë∆∞·ª£c AppIconWidget"""
        try:
            from PySide6.QtWidgets import QPushButton

            # T·∫°o basic buttons cho t·ª´ng app
            x, y = 50, 50
            for i, app in enumerate(apps):
                col = i % 4
                row = i // 4
                position = QPoint(x + col * 120, y + row * 100)

                # T·∫°o button
                button = QPushButton(app.display_name, self.desktop_area)
                button.setGeometry(position.x(), position.y(), 100, 80)
                button.clicked.connect(
                    lambda checked, app_id=app.id: self.handle_app_launch(app_id)
                )
                button.show()

                # L∆∞u reference
                if not hasattr(self.desktop_area, 'desktop_icons'):
                    self.desktop_area.desktop_icons = {}
                self.desktop_area.desktop_icons[app.id] = button


        except Exception as e:
            logger.error(f"L·ªói t·∫°o basic icons: {e}")

    # ========== START MENU ==========

    def toggle_start_menu(self):
        """Toggle start menu visibility"""
        if self.start_menu:
            if self.start_menu.isVisible():
                self.start_menu.hide()
                self.start_menu_visible = False
            else:
                self.position_start_menu()
                self.start_menu.show()
                self.start_menu.raise_()
                self.start_menu_visible = True

    def position_start_menu(self):
        """Position start menu above taskbar"""
        if self.start_menu and self.taskbar:
            # Get taskbar position
            taskbar_pos = self.taskbar.mapToGlobal(QPoint(0, 0))

            # Position start menu
            x = taskbar_pos.x()
            y = taskbar_pos.y() - self.start_menu.height()

            self.start_menu.move(x, y)

    def load_pinned_apps(self):
        """Load pinned apps v√†o Start Menu"""
        try:
            # Ki·ªÉm tra xem app_list c√≥ t·ªìn t·∫°i kh√¥ng
            if not hasattr(self, 'app_list') or not self.app_list:
                return

            # L·∫•y pinned apps t·ª´ repository
            pinned_apps = None
            if hasattr(self, 'app_repo') and self.app_repo:
                pinned_apps = self.app_repo.get_pinned_apps()

            # N·∫æU pinned_apps l√† None ho·∫∑c r·ªóng, d√πng apps m·∫∑c ƒë·ªãnh
            if not pinned_apps:
                # T·∫°o danh s√°ch apps m·∫∑c ƒë·ªãnh
                default_apps = [
                    {"id": "question_bank", "name": "üìö Ng√¢n h√†ng c√¢u h·ªèi"},
                    {"id": "student_mgr", "name": "üë• Qu·∫£n l√Ω h·ªçc sinh"},
                    {"id": "exercises", "name": "üìù B√†i t·∫≠p"},
                    {"id": "reports", "name": "üìä B√°o c√°o"},
                    {"id": "settings", "name": "‚öôÔ∏è C√†i ƒë·∫∑t"}
                ]

                # Th√™m apps m·∫∑c ƒë·ªãnh v√†o list
                for app in default_apps:
                    self.app_list.addItem(app["name"])
            else:
                # C√≥ pinned apps, th√™m v√†o list
                for app in pinned_apps:
                    if hasattr(app, 'display_name'):
                        self.app_list.addItem(f"üì± {app.display_name}")
                    elif hasattr(app, 'name'):
                        self.app_list.addItem(f"üì± {app.name}")

        except Exception as e:
            # N·∫øu c√≥ l·ªói, log v√† th√™m apps m·∫∑c ƒë·ªãnh
            print(f"L·ªói khi load apps: {e}")

            # ƒê·∫£m b·∫£o lu√¥n c√≥ √≠t nh·∫•t m·ªôt s·ªë apps
            if self.app_list and self.app_list.count() == 0:
                self.app_list.addItem("üìö Ng√¢n h√†ng c√¢u h·ªèi")
                self.app_list.addItem("üë• Qu·∫£n l√Ω h·ªçc sinh")
                self.app_list.addItem("‚öôÔ∏è C√†i ƒë·∫∑t")

    def populate_apps_menu(self, menu: QMenu):
        """Populate apps menu with all apps"""
        apps = self.app_repo.get_all_apps()

        # Group by category
        categories = {}
        for app in apps:
            if app.category not in categories:
                categories[app.category] = []
            categories[app.category].append(app)

        # Create submenus
        for category, apps_in_cat in categories.items():
            cat_menu = menu.addMenu(category.value)

            for app in apps_in_cat:
                action = QAction(app.display_name, self)
                action.triggered.connect(lambda checked, a=app.id: self.launch_app(a))
                cat_menu.addAction(action)

    # ========== THEME & APPEARANCE ==========

    def apply_theme(self):
        """Apply theme to dashboard"""
        if self.current_theme:
            theme = self.current_theme
            if theme == "dark":
                self.setStyleSheet("""
                    QMainWindow {
                        background-color: #1e1e1e;
                        color: #ffffff;
                    }
                    #Taskbar {
                        background-color: #2b2b2b;
                        border-top: 1px solid #3c3c3c;
                    }
                    #StartMenu {
                        background-color: #252525;
                        border: 1px solid #3c3c3c;
                    }
                """)
            else:
                self.setStyleSheet("""
                    QMainWindow {
                        background-color: #f0f0f0;
                        color: #000000;
                    }
                    #Taskbar {
                        background-color: #e0e0e0;
                        border-top: 1px solid #c0c0c0;
                    }
                    #StartMenu {
                        background-color: #f5f5f5;
                        border: 1px solid #c0c0c0;
                    }
                """)
        # L∆ØU √ù: Kh√¥ng c√≥ style cho QMdiArea n·ªØa
    def change_theme(self, theme_name: str):
        """Change theme"""
        self.current_theme = theme_name
        self.settings_repo.set_theme(theme_name)
        self.apply_theme()
        self.theme_changed.emit(theme_name)
        self.status_bar.showMessage(f"ƒê√£ ƒë·ªïi theme: {theme_name}", 3000)

    def set_wallpaper(self):
        """Set desktop wallpaper cho desktop area"""
        if not self.desktop_area:
            logger.warning("Desktop area ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o")
            return

        wallpaper_path = self.settings_repo.get_wallpaper()

        # G·ªçi set_wallpaper c·ªßa desktop_area
        if hasattr(self.desktop_area, 'set_wallpaper'):
            self.desktop_area.set_wallpaper(wallpaper_path)
    def toggle_fullscreen(self):
        """Toggle fullscreen mode"""
        if self.is_fullscreen:
            self.showNormal()
            if self.taskbar:
                self.taskbar.show()
            self.menuBar().show()
            self.is_fullscreen = False
        else:
            self.showFullScreen()
            if self.taskbar:
                self.taskbar.hide()
            self.menuBar().hide()
            self.is_fullscreen = True

    # ========== OTHER FEATURES ==========

    def update_clock(self):
        """Update clock display"""
        if hasattr(self, 'clock_label'):
            current_time = datetime.now().strftime("%H:%M:%S")
            current_date = datetime.now().strftime("%d/%m/%Y")
            self.clock_label.setText(f"üïê {current_time}\nüìÖ {current_date}")

    def on_search(self):
        """Handle search"""
        if hasattr(self, 'search_box'):
            query = self.search_box.text()
            if query:
                # Search apps
                results = self.app_repo.search_apps(query)
                if results:
                    # Launch first result
                    self.launch_app(results[0].id)
                else:
                    self.status_bar.showMessage(f"Kh√¥ng t√¨m th·∫•y: {query}", 3000)

    def on_app_list_double_click(self, item):
        """Handle double click on app list"""
        if item:
            # Extract app name from item text
            text = item.text()
            if text.startswith("üìå "):
                app_name = text[2:]  # Remove pin emoji

                # Find and launch app
                apps = self.app_repo.get_all_apps()
                for app in apps:
                    if app.display_name == app_name:
                        self.launch_app(app.id)
                        self.toggle_start_menu()  # Hide start menu
                        break

    def on_tray_activated(self, reason):
        """Handle system tray activation"""
        if reason == QSystemTrayIcon.DoubleClick:
            if self.isVisible():
                self.hide()
            else:
                self.show()
                self.raise_()
                self.activateWindow()

    def lock_screen(self):
        """Lock screen (placeholder)"""
        QMessageBox.information(self, "Lock Screen", "Ch·ª©c nƒÉng kh√≥a m√†n h√¨nh ch∆∞a ƒë∆∞·ª£c tri·ªÉn khai")

    def switch_apps(self):
        """Switch between apps (Alt+Tab)"""
        if self.mdi_area:
            windows = self.mdi_area.subWindowList()
            if windows:
                # Activate next window
                self.mdi_area.activateNextSubWindow()

    def open_file_explorer(self):
        """Open file explorer"""
        from ..utils.helpers import open_file_explorer
        open_file_explorer(str(Path.home()))

    def show_about(self):
        """Show about dialog"""
        QMessageBox.about(
            self,
            "V·ªÅ Dashboard Desktop",
            "Dashboard Desktop-Style v1.0\n\n"
            "Ph·∫ßn m·ªÅm qu·∫£n l√Ω gia s∆∞ v·ªõi giao di·ªán desktop hi·ªán ƒë·∫°i.\n\n"
            "¬© 2024 - Ph√°t tri·ªÉn b·ªüi Team Gia s∆∞"
        )

    # ========== SETTINGS & PERSISTENCE ==========

    def load_settings(self):
        """Load saved settings"""
        settings = self.settings_repo.get_settings()

        # Apply theme
        self.current_theme = settings.appearance.theme
        self.apply_theme()

        # Load window state
        window_state = settings.window_state.get("main_dashboard")
        if window_state and not self.isMaximized():
            self.resize(window_state.get('width', 1200), window_state.get('height', 800))

    def save_settings(self):
        """Save current settings"""
        # Save window state
        window_state = {
            'x': self.x(),
            'y': self.y(),
            'width': self.width(),
            'height': self.height(),
            'maximized': self.isMaximized()
        }

        self.settings_repo.save_window_state("main_dashboard", window_state)

        # Save desktop icon positions
        self.desktop_service.save_icon_positions()

    def auto_save(self):
        """Auto-save settings"""
        self.save_settings()

    # ========== EVENT HANDLERS ==========

    def closeEvent(self, event: QCloseEvent):
        """Handle window close event"""
        # Check if should confirm
        if self.settings_repo.get_general().confirm_exit:
            reply = QMessageBox.question(
                self,
                "X√°c nh·∫≠n tho√°t",
                "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën tho√°t Dashboard?",
                QMessageBox.Yes | QMessageBox.No,
                QMessageBox.No
            )

            if reply == QMessageBox.No:
                event.ignore()
                return

        # Save settings
        self.save_settings()

        # Close all apps
        self.app_launcher.close_all_apps()

        # Hide system tray
        if self.system_tray:
            self.system_tray.hide()

        # Accept close
        event.accept()

    def resizeEvent(self, event: QResizeEvent):
        """Handle window resize"""
        super().resizeEvent(event)

        # Update wallpaper size
        if self.mdi_area:
            self.set_wallpaper()

        # Reposition start menu
        if self.start_menu and self.start_menu.isVisible():
            self.position_start_menu()

    def eventFilter(self, obj, event: QEvent) -> bool:
        """Event filter for global events"""
        # Hide start menu when clicking outside
        if event.type() == QEvent.MouseButtonPress:
            if self.start_menu and self.start_menu.isVisible():
                if not self.start_menu.geometry().contains(event.globalPos()):
                    self.start_menu.hide()
                    self.start_menu_visible = False

        return super().eventFilter(obj, event)

    def position_start_menu(self):
        """ƒê·ªãnh v·ªã start menu ·ªü g√≥c d∆∞·ªõi tr√°i"""
        if self.start_menu:
            self.start_menu.move(10, self.height() - 650)

    def _load_desktop_items(self):
        """Load desktop icons v√† widgets"""
        try:
            # G·ªçi ph∆∞∆°ng th·ª©c load_desktop_icons n·∫øu c√≥
            if hasattr(self, 'load_desktop_icons'):
                self.load_desktop_icons()

            # Ho·∫∑c load tr·ª±c ti·∫øp t·ª´ desktop_area
            elif self.desktop_area and hasattr(self.desktop_area, '_load_desktop_icons'):
                self.desktop_area._load_desktop_icons()


        except Exception as e:
            logger.error(f"L·ªói khi load desktop items: {e}")
    # Check v√† fix desktop area n·∫øu c·∫ßn
    def _check_and_fix_desktop(self):
        """Check v√† fix desktop area n·∫øu c√≥ v·∫•n ƒë·ªÅ"""
        # Check desktop area
        if not self.desktop_area:
            logger.warning("Desktop area kh√¥ng t·ªìn t·∫°i, ƒëang t·∫°o l·∫°i...")
            self._force_create_desktop_area()
            # Sau khi t·∫°o m·ªõi th√¨ m·ªõi load icons
            if self.desktop_area:
                self.load_desktop_icons()
        else:
            # Desktop area ƒë√£ t·ªìn t·∫°i
            if hasattr(self.desktop_area, 'desktop_icons'):
                icon_count = len(self.desktop_area.desktop_icons)

                # KH√îNG load l·∫°i n·∫øu ƒë√£ c√≥ icons
                # Ch·ªâ log warning th√¥i
                if icon_count == 0:
                    logger.warning("Desktop kh√¥ng c√≥ icons!")
                    # KH√îNG G·ªåI load_desktop_icons() ·ªü ƒë√¢y
            else:
                logger.warning("Desktop area kh√¥ng c√≥ attribute desktop_icons")

        logger.info("=== END CHECK ===")
    # ph∆∞∆°ng th·ª©c debug desktop icons
    def debug_desktop_icons(self):
        """Debug desktop icons status"""
        logger.info("=== DEBUG DESKTOP ICONS ===")

        # Check desktop area
        if not self.desktop_area:
            logger.error("Desktop area is None!")
            return

        logger.info(f"Desktop area type: {type(self.desktop_area)}")

        # Check icon container
        if hasattr(self.desktop_area, 'icon_container'):
            container = self.desktop_area.icon_container
        else:
            logger.warning("No icon_container attribute")

        # Check desktop icons dict
        if hasattr(self.desktop_area, 'desktop_icons'):
            icons = self.desktop_area.desktop_icons
            for app_id, widget in icons.items():
                logger.info(f"  - {app_id}: visible={widget.isVisible()}, pos={widget.pos()}")
        else:
            logger.warning("No desktop_icons dict")

        logger.info("=== END DEBUG ===")
