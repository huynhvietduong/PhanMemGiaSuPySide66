# ui_qt/windows/add_exercise_window_qt.py
from __future__ import annotations
from PySide6.QtCore import Qt
from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit, QTextEdit, QComboBox,
    QPushButton, QFileDialog, QMessageBox, QFormLayout
)
import os
import json

class AddExerciseWindowQt(QWidget):
    """
    Th√™m b√†i t·∫≠p v√†o b·∫£ng exercises.
    C·ªôt tham chi·∫øu (theo app c≈©): chu_de, ten_bai, loai_tap, noi_dung, ghi_chu
    - loai_tap: text | image | link
    - noi_dung:
        + text  -> n·ªôi dung vƒÉn b·∫£n trong QTextEdit
        + image -> ƒë∆∞·ªùng d·∫´n file ·∫£nh
        + link  -> URL (Google doc/drive, v.v‚Ä¶)
    """

    def __init__(self, db_manager, parent=None):
        super().__init__(parent)
        self.db = db_manager
        self._ensure_table()
        self._build_ui()

    # T·∫°o b·∫£ng n·∫øu thi·∫øu (gi·ªØ t∆∞∆°ng th√≠ch d·ª± √°n c≈©)
    def _ensure_table(self):
        self.db.execute_query("""
            CREATE TABLE IF NOT EXISTS exercises (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                chu_de   TEXT NOT NULL,
                ten_bai  TEXT NOT NULL,
                loai_tap TEXT NOT NULL,     -- text | image | link
                noi_dung TEXT NOT NULL,     -- json/text tu·ª≥ lo·∫°i
                ghi_chu  TEXT
            )
        """)

    def _build_ui(self):
        root = QVBoxLayout(self)
        root.setContentsMargins(12, 12, 12, 12)

        title = QLabel("‚ûï Th√™m b√†i t·∫≠p")
        title.setStyleSheet("font-size:18px; font-weight:600;")
        root.addWidget(title)

        form = QFormLayout()
        form.setLabelAlignment(Qt.AlignRight)

        # Tr∆∞·ªùng c∆° b·∫£n
        self.ed_chude = QLineEdit()
        self.ed_tenbai = QLineEdit()

        self.cb_loai = QComboBox()
        self.cb_loai.addItems(["text", "image", "link"])
        self.cb_loai.currentTextChanged.connect(self._on_kind_changed)

        # Khu n·ªôi dung theo lo·∫°i
        self.txt_noidung = QTextEdit()     # cho lo·∫°i "text"
        self.ed_link = QLineEdit()         # cho lo·∫°i "link"
        self.ed_image = QLineEdit()        # path ·∫£nh
        self.btn_browse = QPushButton("Ch·ªçn ·∫£nh‚Ä¶")
        self.btn_browse.clicked.connect(self._pick_image)

        # ghi ch√∫
        self.ed_ghichu = QLineEdit()

        form.addRow("Ch·ªß ƒë·ªÅ:", self.ed_chude)
        form.addRow("T√™n b√†i:", self.ed_tenbai)
        form.addRow("Lo·∫°i:", self.cb_loai)

        # container cho n·ªôi dung (s·∫Ω thay ƒë·ªïi theo lo·∫°i)
        self._content_stack = QVBoxLayout()

        # widget text
        self._w_text = QWidget()
        lay_text = QVBoxLayout(self._w_text)
        lay_text.addWidget(QLabel("N·ªôi dung vƒÉn b·∫£n:"))
        lay_text.addWidget(self.txt_noidung)

        # widget image
        self._w_image = QWidget()
        lay_img = QHBoxLayout(self._w_image)
        lay_img.addWidget(self.ed_image)
        lay_img.addWidget(self.btn_browse)

        # widget link
        self._w_link = QWidget()
        lay_link = QVBoxLayout(self._w_link)
        lay_link.addWidget(QLabel("URL / li√™n k·∫øt:"))
        lay_link.addWidget(self.ed_link)

        # m·∫∑c ƒë·ªãnh hi·ªÉn th·ªã theo lo·∫°i hi·ªán t·∫°i
        self._set_content_widget("text")

        form.addRow(QLabel("N·ªôi dung:"), self._wrap(self._content_stack))
        form.addRow("Ghi ch√∫:", self.ed_ghichu)

        root.addLayout(form)

        # N√∫t l·ªánh
        btns = QHBoxLayout()
        btns.addStretch(1)
        btn_save = QPushButton("üíæ L∆∞u")
        btn_clear = QPushButton("L√†m m·ªõi")
        btn_save.clicked.connect(self._save)
        btn_clear.clicked.connect(self._clear)
        btns.addWidget(btn_clear)
        btns.addWidget(btn_save)
        root.addLayout(btns)

    def _wrap(self, layout: QVBoxLayout) -> QWidget:
        w = QWidget()
        w.setLayout(layout)
        return w

    def _set_content_widget(self, kind: str):
        # clear layout
        while self._content_stack.count():
            item = self._content_stack.takeAt(0)
            w = item.widget()
            if w:
                w.setParent(None)

        if kind == "text":
            self._content_stack.addWidget(self._w_text)
        elif kind == "image":
            self._content_stack.addWidget(self._w_image)
        else:
            self._content_stack.addWidget(self._w_link)

    def _on_kind_changed(self, kind: str):
        self._set_content_widget(kind)

    def _pick_image(self):
        path, _ = QFileDialog.getOpenFileName(self, "Ch·ªçn ·∫£nh", "", "·∫¢nh (*.png *.jpg *.jpeg *.bmp *.gif);;T·∫•t c·∫£ (*.*)")
        if path:
            self.ed_image.setText(path)

    def _validate(self) -> tuple[bool, str]:
        chu_de = self.ed_chude.text().strip()
        ten_bai = self.ed_tenbai.text().strip()
        kind = self.cb_loai.currentText()

        if not chu_de or not ten_bai:
            return False, "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß 'Ch·ªß ƒë·ªÅ' v√† 'T√™n b√†i'."

        if kind == "text":
            content = self.txt_noidung.toPlainText().strip()
            if not content:
                return False, "B·∫°n ch·ªçn lo·∫°i 'text' nh∆∞ng n·ªôi dung ƒëang tr·ªëng."
        elif kind == "image":
            p = self.ed_image.text().strip()
            if not p:
                return False, "B·∫°n ch·ªçn lo·∫°i 'image' nh∆∞ng ch∆∞a ch·ªçn file."
            if not os.path.exists(p):
                return False, f"File ·∫£nh kh√¥ng t·ªìn t·∫°i:\n{p}"
        elif kind == "link":
            url = self.ed_link.text().strip()
            if not url:
                return False, "B·∫°n ch·ªçn lo·∫°i 'link' nh∆∞ng ch∆∞a nh·∫≠p URL."
        return True, ""

    def _save(self):
        ok, msg = self._validate()
        if not ok:
            QMessageBox.warning(self, "Thi·∫øu d·ªØ li·ªáu", msg)
            return

        chu_de = self.ed_chude.text().strip()
        ten_bai = self.ed_tenbai.text().strip()
        kind = self.cb_loai.currentText()
        ghi_chu = self.ed_ghichu.text().strip()

        if kind == "text":
            # L∆∞u n·ªôi dung text tr·ª±c ti·∫øp
            noi_dung = self.txt_noidung.toPlainText().strip()
        elif kind == "image":
            # L∆∞u metadata d·∫°ng JSON ƒë·ªÉ d·ªÖ m·ªü r·ªông
            noi_dung = json.dumps({"type": "image", "path": self.ed_image.text().strip()}, ensure_ascii=False)
        else:  # link
            noi_dung = json.dumps({"type": "link", "url": self.ed_link.text().strip()}, ensure_ascii=False)

        self.db.execute_query(
            "INSERT INTO exercises (chu_de, ten_bai, loai_tap, noi_dung, ghi_chu) VALUES (?, ?, ?, ?, ?)",
            (chu_de, ten_bai, kind, noi_dung, ghi_chu)
        )
        QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ th√™m b√†i t·∫≠p.")
        self._clear()

    def _clear(self):
        self.ed_chude.clear()
        self.ed_tenbai.clear()
        self.cb_loai.setCurrentText("text")
        self.txt_noidung.clear()
        self.ed_link.clear()
        self.ed_image.clear()
        self.ed_ghichu.clear()
