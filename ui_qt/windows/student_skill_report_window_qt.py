# ui_qt/windows/student_skill_report_window_qt.py
from __future__ import annotations

from PySide6 import QtWidgets, QtCore
from PySide6.QtCore import QDate, Qt
from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QComboBox, QTableWidget,
    QTableWidgetItem, QPushButton, QDialog, QFormLayout, QDateEdit,
    QSpinBox, QTextEdit, QLineEdit, QMessageBox
)

from datetime import datetime


class StudentSkillReportWindowQt(QWidget):
    """
    H·ªì s∆° nƒÉng l·ª±c h·ªçc sinh (PySide6)
    - Ch·ªçn h·ªçc sinh
    - B·∫£ng t·ªïng h·ª£p theo ch·ªß ƒë·ªÅ: (Ch·ªß ƒë·ªÅ | ƒêi·ªÉm TB | L·∫ßn cu·ªëi ƒë√°nh gi√° | X·∫øp lo·∫°i)
    - Double-click 1 ch·ªß ƒë·ªÅ ƒë·ªÉ m·ªü chi ti·∫øt: xem c√°c l·∫ßn ƒë√°nh gi√°, th√™m/s·ª≠a/xo√°
    """
    def __init__(self, db_manager, parent=None):
        super().__init__(parent)
        self.db = db_manager

        root = QVBoxLayout(self)
        title = QLabel("H·ªì s∆° nƒÉng l·ª±c theo ch·ªß ƒë·ªÅ")
        title.setStyleSheet("font-size:18px; font-weight:700;")
        root.addWidget(title)

        # ---- B·ªô l·ªçc: ch·ªçn h·ªçc sinh ----
        filt = QHBoxLayout()
        filt.addWidget(QLabel("Ch·ªçn h·ªçc sinh:"))
        self.student_cb = QComboBox()
        self.student_cb.currentIndexChanged.connect(self.load_report)
        filt.addWidget(self.student_cb, 1)

        self.refresh_btn = QPushButton("L√†m m·ªõi")
        self.refresh_btn.clicked.connect(self.reload_students)
        filt.addWidget(self.refresh_btn)

        root.addLayout(filt)

        # ---- B·∫£ng t·ªïng h·ª£p ----
        self.table = QTableWidget()
        self.table.setColumnCount(4)
        self.table.setHorizontalHeaderLabels(["Ch·ªß ƒë·ªÅ", "ƒêi·ªÉm TB", "L·∫ßn cu·ªëi ƒë√°nh gi√°", "X·∫øp lo·∫°i"])
        self.table.verticalHeader().setVisible(False)
        self.table.setAlternatingRowColors(True)
        self.table.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.table.horizontalHeader().setStretchLastSection(True)
        self.table.itemDoubleClicked.connect(self.open_detail_dialog)
        root.addWidget(self.table, 1)

        # G·ª£i √Ω s·ª≠ d·ª•ng
        hint = QLabel("M·∫πo: Double‚Äëclick v√†o 1 d√≤ng ch·ªß ƒë·ªÅ ƒë·ªÉ xem/nh·∫≠p c√°c l·∫ßn ƒë√°nh gi√° chi ti·∫øt.")
        hint.setStyleSheet("color: gray;")
        root.addWidget(hint)

        self.reload_students()

    # ---------------- Data loading ----------------
    def reload_students(self):
        try:
            rows = self.db.execute_query(
                "SELECT id, name FROM students ORDER BY name", fetch='all'
            ) or []
            self.student_cb.blockSignals(True)
            self.student_cb.clear()
            self._students = []  # list of (id, name)
            for r in rows:
                sid = r["id"] if isinstance(r, dict) else r[0]
                name = r["name"] if isinstance(r, dict) else r[1]
                self.student_cb.addItem(f"{name} (ID {sid})")
                self._students.append((sid, name))
            self.student_cb.blockSignals(False)
            self.load_report()
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng t·∫£i ƒë∆∞·ª£c danh s√°ch h·ªçc sinh:\n{e}")

    def current_student_id(self) -> int | None:
        idx = self.student_cb.currentIndex()
        if idx < 0 or idx >= len(getattr(self, "_students", [])):
            return None
        return self._students[idx][0]

    def load_report(self):
        self.table.setRowCount(0)
        sid = self.current_student_id()
        if not sid:
            return
        try:
            query = """
                SELECT chu_de, ROUND(AVG(diem),1) AS avg_score, MAX(ngay_danh_gia) AS last_date
                FROM student_skills
                WHERE student_id = ?
                GROUP BY chu_de
                ORDER BY chu_de
            """
            rows = self.db.execute_query(query, (sid,), fetch='all') or []
            self.table.setRowCount(len(rows))
            for i, r in enumerate(rows):
                topic = r["chu_de"] if isinstance(r, dict) else r[0]
                avg = r["avg_score"] if isinstance(r, dict) else r[1]
                last_date = r["last_date"] if isinstance(r, dict) else r[2]
                rating = self.get_rating_label(avg)

                self._set_item(i, 0, topic)
                self._set_item(i, 1, f"{avg:.1f}" if avg is not None else "", align=Qt.AlignCenter)
                self._set_item(i, 2, str(last_date or ""), align=Qt.AlignCenter)
                self._set_item(i, 3, rating, align=Qt.AlignCenter)

            self.table.resizeColumnsToContents()
            self.table.horizontalHeader().setStretchLastSection(True)

        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng t·∫£i ƒë∆∞·ª£c b√°o c√°o:\n{e}")

    def _set_item(self, row: int, col: int, text: str, align: Qt.AlignmentFlag | None = None):
        it = QTableWidgetItem(text)
        if align is not None:
            it.setTextAlignment(align | Qt.AlignVCenter)
        self.table.setItem(row, col, it)

    @staticmethod
    def get_rating_label(score):
        if score is None:
            return ""
        try:
            s = float(score)
        except Exception:
            return ""
        if s >= 4.5:
            return "Gi·ªèi"
        elif s >= 3.5:
            return "Kh√°"
        elif s >= 2.5:
            return "Trung b√¨nh"
        else:
            return "Y·∫øu"

    # ---------------- Detail dialog ----------------
    def open_detail_dialog(self, item: QTableWidgetItem):
        row = item.row()
        topic_item = self.table.item(row, 0)
        if not topic_item:
            return
        topic = topic_item.text().strip()
        sid = self.current_student_id()
        if not sid or not topic:
            return

        dlg = SkillDetailDialog(self.db, student_id=sid, student_name=self._students[self.student_cb.currentIndex()][1],
                                topic=topic, parent=self)
        if dlg.exec() == QDialog.Accepted:
            # reload summary after changes
            self.load_report()


class SkillDetailDialog(QDialog):
    """
    H·ªôp tho·∫°i chi ti·∫øt ƒë√°nh gi√° cho 1 (h·ªçc sinh, ch·ªß ƒë·ªÅ)
    - Li·ªát k√™ t·∫•t c·∫£ l·∫ßn ƒë√°nh gi√°
    - Th√™m / S·ª≠a / Xo√°
    """
    def __init__(self, db_manager, student_id: int, student_name: str, topic: str, parent=None):
        super().__init__(parent)
        self.db = db_manager
        self.student_id = student_id
        self.student_name = student_name
        self.topic = topic

        self.setWindowTitle(f"Chi ti·∫øt ƒë√°nh gi√° ‚Äì {student_name} | {topic}")
        self.resize(720, 480)

        root = QVBoxLayout(self)

        header = QLabel(f"H·ªçc sinh: <b>{student_name}</b> &nbsp;&nbsp;|&nbsp;&nbsp; Ch·ªß ƒë·ªÅ: <b>{topic}</b>")
        root.addWidget(header)

        # B·∫£ng chi ti·∫øt
        self.table = QTableWidget()
        self.table.setColumnCount(4)
        self.table.setHorizontalHeaderLabels(["ID", "Ng√†y ƒë√°nh gi√°", "ƒêi·ªÉm (1‚Äì5)", "Nh·∫≠n x√©t"])
        self.table.verticalHeader().setVisible(False)
        self.table.setAlternatingRowColors(True)
        self.table.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.table.horizontalHeader().setStretchLastSection(True)
        root.addWidget(self.table, 1)

        # Form nh·∫≠p / ch·ªânh s·ª≠a
        form_box = QtWidgets.QGroupBox("Nh·∫≠p/Ch·ªânh s·ª≠a")
        form = QFormLayout(form_box)

        self.date_edit = QDateEdit()
        self.date_edit.setCalendarPopup(True)
        self.date_edit.setDisplayFormat("yyyy-MM-dd")
        self.date_edit.setDate(QDate.currentDate())

        self.score_spin = QSpinBox()
        self.score_spin.setRange(1, 5)
        self.score_spin.setValue(3)

        self.comment_text = QTextEdit()
        self.comment_text.setPlaceholderText("Nh·∫≠n x√©t (tu·ª≥ ch·ªçn)")

        # ID ƒëang ch·ªânh (n·∫øu c√≥)
        self.id_edit = QLineEdit()
        self.id_edit.setReadOnly(True)
        self.id_edit.setPlaceholderText("ID b·∫£n ghi (auto)")

        form.addRow("ID:", self.id_edit)
        form.addRow("Ng√†y ƒë√°nh gi√°:", self.date_edit)
        form.addRow("ƒêi·ªÉm (1‚Äì5):", self.score_spin)
        form.addRow("Nh·∫≠n x√©t:", self.comment_text)

        root.addWidget(form_box)

        # Buttons
        btns = QHBoxLayout()
        self.btn_add = QPushButton("‚ûï Th√™m")
        self.btn_update = QPushButton("üíæ C·∫≠p nh·∫≠t")
        self.btn_delete = QPushButton("üóëÔ∏è Xo√°")
        self.btn_close = QPushButton("ƒê√≥ng")
        btns.addWidget(self.btn_add)
        btns.addWidget(self.btn_update)
        btns.addWidget(self.btn_delete)
        btns.addStretch(1)
        btns.addWidget(self.btn_close)
        root.addLayout(btns)

        # Signals
        self.table.itemSelectionChanged.connect(self.on_row_selected)
        self.btn_add.clicked.connect(self.add_entry)
        self.btn_update.clicked.connect(self.update_entry)
        self.btn_delete.clicked.connect(self.delete_entry)
        self.btn_close.clicked.connect(self.accept)

        self.load_details()

    # --------- Helpers ---------
    def load_details(self):
        self.table.setRowCount(0)
        rows = self.db.execute_query(
            """
            SELECT id, ngay_danh_gia, diem, nhan_xet
            FROM student_skills
            WHERE student_id = ? AND chu_de = ?
            ORDER BY ngay_danh_gia DESC, id DESC
            """,
            (self.student_id, self.topic),
            fetch='all'
        ) or []

        self.table.setRowCount(len(rows))
        for i, r in enumerate(rows):
            rid = r["id"] if isinstance(r, dict) else r[0]
            ngay = r["ngay_danh_gia"] if isinstance(r, dict) else r[1]
            diem = r["diem"] if isinstance(r, dict) else r[2]
            nx = r["nhan_xet"] if isinstance(r, dict) else r[3]

            self._set(i, 0, str(rid), center=True)
            self._set(i, 1, str(ngay), center=True)
            self._set(i, 2, str(diem), center=True)
            self._set(i, 3, str(nx or ""))

        self.table.resizeColumnsToContents()
        self.table.horizontalHeader().setStretchLastSection(True)
        self.clear_form()

    def _set(self, r, c, text, center=False):
        it = QTableWidgetItem(text)
        if center:
            it.setTextAlignment(Qt.AlignCenter)
        self.table.setItem(r, c, it)

    def clear_form(self):
        self.id_edit.clear()
        self.date_edit.setDate(QDate.currentDate())
        self.score_spin.setValue(3)
        self.comment_text.clear()

    def on_row_selected(self):
        sel = self.table.currentRow()
        if sel < 0:
            self.clear_form()
            return
        rid = self.table.item(sel, 0).text()
        ngay = self.table.item(sel, 1).text()
        diem = self.table.item(sel, 2).text()
        nx = self.table.item(sel, 3).text()

        self.id_edit.setText(rid)
        try:
            d = datetime.strptime(ngay, "%Y-%m-%d").date()
            self.date_edit.setDate(QDate(d.year, d.month, d.day))
        except Exception:
            pass
        try:
            self.score_spin.setValue(int(diem))
        except Exception:
            self.score_spin.setValue(3)
        self.comment_text.setPlainText(nx)

    # --------- CRUD ---------
    def add_entry(self):
        try:
            qd = self.date_edit.date()
            ngay = f"{qd.year():04d}-{qd.month():02d}-{qd.day():02d}"
            diem = int(self.score_spin.value())
            nhan_xet = self.comment_text.toPlainText().strip()

            self.db.add_student_skill(self.student_id, self.topic, ngay, diem, nhan_xet)
            QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ th√™m ƒë√°nh gi√°.")
            self.load_details()
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ th√™m ƒë√°nh gi√°:\n{e}")

    def update_entry(self):
        rid = self.id_edit.text().strip()
        if not rid:
            QMessageBox.warning(self, "Thi·∫øu th√¥ng tin", "H√£y ch·ªçn 1 b·∫£n ghi ƒë·ªÉ c·∫≠p nh·∫≠t.")
            return
        try:
            diem = int(self.score_spin.value())
            nhan_xet = self.comment_text.toPlainText().strip()
            self.db.update_student_skill(int(rid), diem, nhan_xet)
            QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ c·∫≠p nh·∫≠t ƒë√°nh gi√°.")
            self.load_details()
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t:\n{e}")

    def delete_entry(self):
        rid = self.id_edit.text().strip()
        if not rid:
            QMessageBox.warning(self, "Thi·∫øu th√¥ng tin", "H√£y ch·ªçn 1 b·∫£n ghi ƒë·ªÉ xo√°.")
            return
        if QMessageBox.question(self, "X√°c nh·∫≠n", "Xo√° b·∫£n ghi n√†y?") != QMessageBox.Yes:
            return
        try:
            self.db.delete_student_skill(int(rid))
            QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ xo√° ƒë√°nh gi√°.")
            self.load_details()
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ xo√°:\n{e}")
