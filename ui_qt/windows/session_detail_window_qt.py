# ui_qt/windows/session_detail_window_qt.py
from __future__ import annotations
import os, re, time, platform, shutil, subprocess, json
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any, Optional

from PySide6 import QtCore, QtGui, QtWidgets
from PySide6.QtCore import Qt, QUrl
from PySide6.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QLabel, QGroupBox, QScrollArea, QWidget,
    QComboBox, QPushButton, QPlainTextEdit, QMessageBox, QFileDialog
)

def _to_date_str(d) -> str:
    if isinstance(d, datetime):
        return d.strftime("%Y-%m-%d")
    # allow 'YYYY-MM-DD'
    try:
        return datetime.strptime(str(d), "%Y-%m-%d").strftime("%Y-%m-%d")
    except Exception:
        return datetime.now().strftime("%Y-%m-%d")


# L·ªõp controller x·ª≠ l√Ω logic nghi·ªáp v·ª•
class SessionController:
    """Controller qu·∫£n l√Ω logic nghi·ªáp v·ª• cho session"""

    def __init__(self, db_manager):
        self.db = db_manager

    # X·ª≠ l√Ω l∆∞u ƒëi·ªÉm danh h·ªçc sinh
    def save_attendance_data(self, students_status: Dict, group_id: int, session_date: str, makeup_joiners: List):
        """L∆∞u d·ªØ li·ªáu ƒëi·ªÉm danh h·ªçc sinh"""
        for sid, widget in students_status.items():
            # B·ªè qua c√°c em ƒë√£ x·ª≠ l√Ω h·ªçc b√π
            if any(s["student_id"] == sid for s in makeup_joiners):
                continue

            status = widget.currentText()
            make_up_status = "Ch∆∞a s·∫Øp x·∫øp" if "Ngh·ªâ" in status else ""

            self.db.execute_query(
                "INSERT INTO attendance (student_id, group_id, session_date, status, make_up_status) "
                "VALUES (?, ?, ?, ?, ?) "
                "ON CONFLICT(student_id, group_id, session_date) DO UPDATE SET "
                "status = excluded.status, make_up_status = excluded.make_up_status",
                (sid, group_id, session_date, status, make_up_status)
            )

    # X·ª≠ l√Ω l∆∞u nh·∫≠t k√Ω bu·ªïi h·ªçc
    def save_session_log_data(self, group_id: int, session_date: str, topic: str, homework: str):
        """L∆∞u nh·∫≠t k√Ω bu·ªïi h·ªçc"""
        self.db.execute_query(
            "INSERT OR REPLACE INTO session_logs (group_id, session_date, topic, homework) "
            "VALUES (?, ?, ?, ?)",
            (group_id, session_date, topic, homework)
        )
class SessionDetailWindowQt(QDialog):
    """
    PySide6 port c·ªßa SessionDetailWindow (Tkinter)
    - ƒêi·ªÉm danh h·ªçc sinh (c·∫£ h·ªçc b√π)
    - Ghi nh·∫≠t k√Ω bu·ªïi h·ªçc (topic/homework)
    - G·∫Øn & m·ªü file b√†i gi·∫£ng
    - M·ªü b·∫£ng v·∫Ω / Paint (Windows)
    - M·ªü c·ª≠a s·ªï 'ƒê√°nh gi√° nƒÉng l·ª±c'
    """
    def __init__(self,parent: QtWidgets.QWidget,db_manager,session_date,group_id: Optional[int] = None,group_name: Optional[str] = None,makeup_info: Optional[List[Dict[str, Any]]] = None):
        super().__init__(parent)
        self.setWindowTitle("Chi ti·∫øt Bu·ªïi h·ªçc")
        self.resize(900, 680)
        self.setModal(True)

        self.db = db_manager
        self.controller = SessionController(db_manager)
        self.is_makeup_session = makeup_info is not None
        self.session_date = _to_date_str(session_date)
        self.group_id = group_id
        self.group_name = group_name or ""
        self.makeup_list: List[Dict[str, Any]] = makeup_info or []
        self.session_id: Optional[int] = None
        self.student_status: Dict[int, QComboBox] = {}  # student_id -> widget ch·ªçn tr·∫°ng th√°i

        root = QVBoxLayout(self)

        # ====== Th√¥ng tin chung ======
        box_info = QGroupBox("Th√¥ng tin chung ‚ÑπÔ∏è")
        info_l = QVBoxLayout(box_info)
        if self.is_makeup_session:
            info_l.addWidget(QLabel(f"Bu·ªïi h·ªçc b√π cho {len(self.makeup_list)} h·ªçc sinh"))
            info_l.addWidget(QLabel(f"Ng√†y: {self.session_date}"))
            self.setWindowTitle("Chi ti·∫øt Bu·ªïi h·ªçc b√π")
        else:
            last = self.db.execute_query(
                "SELECT topic FROM session_logs WHERE group_id=? AND session_date < ? "
                "ORDER BY session_date DESC LIMIT 1",
                (self.group_id, self.session_date), fetch="one"
            )
            info_l.addWidget(QLabel(f"Nh√≥m: {self.group_name}"))
            info_l.addWidget(QLabel(f"Ng√†y: {self.session_date}"))
            last_topic = (last[0] if isinstance(last, (list, tuple)) else (last["topic"] if last else None)) if last else None
            lab = QLabel(f"Bu·ªïi tr∆∞·ªõc ƒë√£ h·ªçc: {last_topic or 'Ch∆∞a c√≥'}")
            lab.setStyleSheet("color: #1976d2;")
            info_l.addWidget(lab)
        root.addWidget(box_info)

        # ====== ƒêi·ªÉm danh ======
        box_att = QGroupBox("ƒêi·ªÉm danh ‚úÖ")
        att_l = QVBoxLayout(box_att)

        # danh s√°ch h√†ng ƒëi·ªÉm danh trong scroll
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        att_container = QWidget()
        self.att_rows = QVBoxLayout(att_container)
        self.att_rows.setContentsMargins(6, 6, 6, 6)
        scroll.setWidget(att_container)
        att_l.addWidget(scroll)

        # makeup joiners (v·ªõi bu·ªïi th∆∞·ªùng)
        self.makeup_joiners: List[Dict[str, Any]] = []
        if self.is_makeup_session:
            for info in self.makeup_list:
                self._add_attendance_row(info["student_id"], info["student_name"])
        else:
            self.makeup_joiners = self._get_makeup_joiners()
            students = self.db.execute_query(
                "SELECT id, name FROM students WHERE group_id = ?",
                (self.group_id,), fetch="all"
            ) or []
            if not students and not self.makeup_joiners:
                self.att_rows.addWidget(QLabel("Ch∆∞a c√≥ h·ªçc sinh n√†o trong nh√≥m n√†y."))
            else:
                for sid, sname in students:
                    self._add_attendance_row(sid, sname)
                if self.makeup_joiners:
                    self.att_rows.addWidget(self._hr())
                    for mk in self.makeup_joiners:
                        self._add_attendance_row(mk["student_id"], f"[B√π] {mk['student_name']}")
        root.addWidget(box_att, 1)

        # ====== Nh·∫≠t k√Ω bu·ªïi h·ªçc ======
        box_log = QGroupBox("Nh·∫≠t k√Ω bu·ªïi d·∫°y h√¥m nay ‚úçÔ∏è")
        log_l = QVBoxLayout(box_log)
        log_l.addWidget(QLabel("Ch·ªß ƒë·ªÅ ƒë√£ d·∫°y:"))
        self.topic_text = QPlainTextEdit()
        self.topic_text.setPlaceholderText("V√≠ d·ª•: √în t·∫≠p ph∆∞∆°ng tr√¨nh b·∫≠c hai; b·∫•t ƒë·∫≥ng th·ª©c Cauchy‚Ä¶")
        self.topic_text.setMaximumBlockCount(300)
        log_l.addWidget(self.topic_text)
        log_l.addWidget(QLabel("B√†i t·∫≠p v·ªÅ nh√†:"))
        self.homework_text = QPlainTextEdit()
        self.homework_text.setMaximumBlockCount(200)
        log_l.addWidget(self.homework_text)

        # N√∫t 'Th√™m file b√†i gi·∫£ng' + list file ƒë√£ g·∫Øn
        btn_add_file = QPushButton("üìÇ Th√™m file b√†i gi·∫£ng")
        btn_add_file.clicked.connect(self._choose_lesson_file)
        log_l.addWidget(btn_add_file)

        self.files_box = QGroupBox("üìé File b√†i gi·∫£ng ƒë√£ g·∫Øn:")
        self.files_l = QVBoxLayout(self.files_box)
        log_l.addWidget(self.files_box)

        root.addWidget(box_log)

        # ====== Buttons ======
        btn_row = QHBoxLayout()
        if not self.is_makeup_session:
            btn_skill = QPushButton("ƒê√°nh gi√° nƒÉng l·ª±c")
            btn_skill.clicked.connect(self._open_skill_rating)
            btn_row.addWidget(btn_skill)

        btn_board = QPushButton("üñçÔ∏è B·∫£ng V·∫Ω B√†i Gi·∫£ng")
        btn_board.clicked.connect(self._open_board_chooser)
        btn_row.addWidget(btn_board)

        btn_save = QPushButton("L∆∞u & K·∫øt th√∫c bu·ªïi h·ªçc")
        btn_save.clicked.connect(self._save_session)
        btn_row.addWidget(btn_save)

        btn_close = QPushButton("ƒê√≥ng")
        btn_close.clicked.connect(self.reject)
        btn_row.addWidget(btn_close)

        root.addLayout(btn_row)
        self._ensure_session_row()
        # ====== Kh·ªüi t·∫°o session_id n·∫øu ƒë√£ c√≥ log ======
        if not self.is_makeup_session:
            row = self.db.execute_query(
                "SELECT id FROM session_logs WHERE group_id = ? AND session_date = ?",
                (self.group_id, self.session_date), fetch="one"
            )
            if row:
                self.session_id = row["id"] if isinstance(row, dict) else row[0]

        self._load_today_log()
        self._render_lesson_files()

    # ---------- helpers ----------
    def _hr(self) -> QWidget:
        line = QtWidgets.QFrame()
        line.setFrameShape(QtWidgets.QFrame.HLine)
        line.setFrameShadow(QtWidgets.QFrame.Sunken)
        return line

    def _add_attendance_row(self, student_id: int, display_name: str):
        row = QHBoxLayout()
        lab = QLabel(display_name)
        lab.setMinimumWidth(240)
        row.addWidget(lab)

        cb = QComboBox()
        cb.addItems(["C√≥ m·∫∑t", "Ngh·ªâ c√≥ ph√©p", "Ngh·ªâ kh√¥ng ph√©p"])
        cb.setCurrentIndex(0)
        row.addWidget(cb)
        self.student_status[student_id] = cb

        wrap = QWidget()
        wrap.setLayout(row)
        self.att_rows.addWidget(wrap)

    def _get_makeup_joiners(self) -> List[Dict[str, Any]]:
        """L·∫•y danh s√°ch h·ªçc sinh h·ªçc b√π v·ªõi truy v·∫•n t·ªëi ∆∞u"""
        if not self.group_id:
            return []

        # S·ª≠ d·ª•ng INNER JOIN thay v√¨ JOIN v√† th√™m ORDER BY
        query = """
        SELECT m.attendance_id, m.student_id, s.name 
        FROM makeup_sessions m 
        INNER JOIN students s ON m.student_id = s.id 
        WHERE m.host_group_id = ? AND m.session_date = ?
        ORDER BY s.name ASC
        """

        rows = self.db.execute_query(query, (self.group_id, self.session_date), fetch="all") or []

        # X·ª≠ l√Ω k·∫øt qu·∫£ m·ªôt c√°ch hi·ªáu qu·∫£
        result = []
        for r in rows:
            att_id = r[0] if isinstance(r, (list, tuple)) else r["attendance_id"]
            sid = r[1] if isinstance(r, (list, tuple)) else r["student_id"]
            name = r[2] if isinstance(r, (list, tuple)) else r["name"]
            result.append({
                "attendance_id": att_id,
                "student_id": sid,
                "student_name": name
            })

        return result
    # ---------- load / save ----------

    def _load_today_log(self):
        def _get_val(row, key_or_idx, default=""):
            try:
                # sqlite3.Row h·ªó tr·ª£ truy c·∫≠p theo t√™n c·ªôt
                if hasattr(row, "keys"):
                    return row[key_or_idx]
                # tuple/list
                if isinstance(row, (list, tuple)):
                    return row[key_or_idx if isinstance(key_or_idx, int) else 0]
                # dict (ph√≤ng khi ·ªü n∆°i kh√°c b·∫°n tr·∫£ v·ªÅ dict)
                if isinstance(row, dict):
                    return row.get(key_or_idx, default)
            except Exception:
                pass
            return default
        group_id_for_log = self.group_id if not self.is_makeup_session else None
        if not group_id_for_log:
            return

        row = self.db.execute_query(
            "SELECT topic, homework FROM session_logs WHERE group_id = ? AND session_date = ?",
            (group_id_for_log, self.session_date),
            fetch='one'
        )

        if row:
            topic = _get_val(row, 'topic')  # ho·∫∑c index 0
            homework = _get_val(row, 'homework')  # ho·∫∑c index 1
            self.topic_text.setPlainText(topic or "")
            self.homework_text.setPlainText(homework or "")

    # Ki·ªÉm tra t√≠nh h·ª£p l·ªá d·ªØ li·ªáu bu·ªïi h·ªçc
    def _validate_session_data(self) -> bool:
        """Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa d·ªØ li·ªáu bu·ªïi h·ªçc tr∆∞·ªõc khi l∆∞u"""

        # Ki·ªÉm tra c√≥ √≠t nh·∫•t 1 h·ªçc sinh ƒë∆∞·ª£c ƒëi·ªÉm danh
        if not self.student_status:
            QMessageBox.warning(self, "Thi·∫øu d·ªØ li·ªáu", "Ch∆∞a c√≥ h·ªçc sinh n√†o ƒë∆∞·ª£c ƒëi·ªÉm danh.")
            return False

        # Ki·ªÉm tra ƒë·ªô d√†i topic kh√¥ng qu√° 500 k√Ω t·ª±
        topic = self.topic_text.toPlainText().strip()
        if len(topic) > 500:
            QMessageBox.warning(self, "D·ªØ li·ªáu qu√° d√†i", "Ch·ªß ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 500 k√Ω t·ª±.")
            return False

        # Ki·ªÉm tra ƒë·ªô d√†i homework kh√¥ng qu√° 1000 k√Ω t·ª±
        homework = self.homework_text.toPlainText().strip()
        if len(homework) > 1000:
            QMessageBox.warning(self, "D·ªØ li·ªáu qu√° d√†i", "B√†i t·∫≠p v·ªÅ nh√† kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 1000 k√Ω t·ª±.")
            return False

        # Ki·ªÉm tra ng√†y h·ªçc h·ª£p l·ªá
        try:
            session_date = datetime.strptime(self.session_date, "%Y-%m-%d")
            if session_date > datetime.now():
                QMessageBox.warning(self, "Ng√†y kh√¥ng h·ª£p l·ªá", "Kh√¥ng th·ªÉ t·∫°o bu·ªïi h·ªçc trong t∆∞∆°ng lai.")
                return False
        except ValueError:
            QMessageBox.critical(self, "L·ªói ng√†y th√°ng", "ƒê·ªãnh d·∫°ng ng√†y kh√¥ng h·ª£p l·ªá.")
            return False

        return True
    def _save_session(self, keep_open: bool = False) -> bool:
        """
        L∆∞u ƒëi·ªÉm danh + nh·∫≠t k√Ω bu·ªïi h·ªçc.
        - keep_open=True: ch·ªâ l∆∞u v√† REFRESH, KH√îNG ƒë√≥ng c·ª≠a s·ªï (d√πng khi chu·∫©n b·ªã m·ªü B·∫£ng v·∫Ω).
        - keep_open=False: l∆∞u xong s·∫Ω ƒë√≥ng c·ª≠a s·ªï nh∆∞ h√†nh vi c≈©.
        Tr·∫£ v·ªÅ True n·∫øu l∆∞u th√†nh c√¥ng, ng∆∞·ª£c l·∫°i False.
        """
        try:
            # Validate d·ªØ li·ªáu tr∆∞·ªõc khi l∆∞u
            if not self._validate_session_data():
                return False
            # 1) X·ª≠ l√Ω danh s√°ch h·ªçc b√π (n·∫øu l√† bu·ªïi b√π ho·∫∑c bu·ªïi th∆∞·ªùng c√≥ h·ªçc sinh h·ªçc b√π)
            list_to_process = self.makeup_list if self.is_makeup_session else self.makeup_joiners
            for mk in list_to_process:
                sid = mk["student_id"]
                status = self.student_status.get(sid).currentText() if sid in self.student_status else "C√≥ m·∫∑t"
                original_att_id = mk.get("att_id") or mk.get("attendance_id")
                new_status = "ƒê√£ d·∫°y b√π" if status == "C√≥ m·∫∑t" else "V·∫Øng bu·ªïi b√π"
                self.db.execute_query(
                    "UPDATE attendance SET make_up_status=? WHERE id=?",
                    (new_status, original_att_id)
                )
                self.db.execute_query(
                    "DELETE FROM makeup_sessions WHERE attendance_id=?",
                    (original_att_id,)
                )

            # 2) ƒêi·ªÉm danh & ghi log cho bu·ªïi TH∆Ø·ªúNG
            if not self.is_makeup_session:
                for sid, widget in self.student_status.items():
                    # B·ªè qua c√°c em ƒë√£ x·ª≠ l√Ω h·ªçc b√π ·ªü tr√™n
                    if any(s["student_id"] == sid for s in self.makeup_joiners):
                        continue
                    status = widget.currentText()
                    make_up_status = "Ch∆∞a s·∫Øp x·∫øp" if "Ngh·ªâ" in status else ""
                    self.db.execute_query(
                        "INSERT INTO attendance (student_id, group_id, session_date, status, make_up_status) "
                        "VALUES (?, ?, ?, ?, ?) "
                        "ON CONFLICT(student_id, group_id, session_date) DO UPDATE SET "
                        "status = excluded.status, make_up_status = excluded.make_up_status",
                        (sid, self.group_id, self.session_date, status, make_up_status)
                    )

                topic = self.topic_text.toPlainText().strip()
                homework = self.homework_text.toPlainText().strip()
                self.db.execute_query(
                    "INSERT OR REPLACE INTO session_logs (group_id, session_date, topic, homework) "
                    "VALUES (?, ?, ?, ?)",
                    (self.group_id, self.session_date, topic, homework)
                )

                # L·∫•y/ c·∫≠p nh·∫≠t session_id ngay sau khi l∆∞u ƒë·ªÉ g·∫Øn file/b·∫£ng v·∫Ω
                row = self.db.execute_query(
                    "SELECT id FROM session_logs WHERE group_id=? AND session_date=?",
                    (self.group_id, self.session_date), fetch="one"
                )
                if row:
                    self.session_id = row["id"] if isinstance(row, dict) else row[0]

            # 3) Th√¥ng b√°o & refresh c√°c m√†n h√¨nh li√™n quan
            QtWidgets.QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ l∆∞u th√¥ng tin bu·ªïi h·ªçc.")

            if hasattr(self.parent(), "update_all_schedules"):
                try:
                    self.parent().update_all_schedules()
                except Exception:
                    pass

            if hasattr(self.parent(), "page_attendance") and hasattr(self.parent().page_attendance, "load_report"):
                try:
                    self.parent().page_attendance.load_report()
                except Exception:
                    pass

            # 4) ƒê√≥ng hay gi·ªØ c·ª≠a s·ªï
            if not keep_open:
                self.accept()

            return True

        except Exception as e:
            # X·ª≠ l√Ω l·ªói chi ti·∫øt theo lo·∫°i
            if "UNIQUE constraint failed" in str(e):
                QtWidgets.QMessageBox.warning(self, "Tr√πng l·∫∑p d·ªØ li·ªáu",
                                              "D·ªØ li·ªáu bu·ªïi h·ªçc n√†y ƒë√£ t·ªìn t·∫°i. Vui l√≤ng ki·ªÉm tra l·∫°i.")
            elif "database is locked" in str(e):
                QtWidgets.QMessageBox.critical(self, "L·ªói c∆° s·ªü d·ªØ li·ªáu",
                                               "C∆° s·ªü d·ªØ li·ªáu ƒëang b·ªã kh√≥a. Vui l√≤ng th·ª≠ l·∫°i sau.")
            elif "no such table" in str(e):
                QtWidgets.QMessageBox.critical(self, "L·ªói c·∫•u tr√∫c d·ªØ li·ªáu",
                                               "C∆° s·ªü d·ªØ li·ªáu ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o ƒë√∫ng c√°ch.")
            else:
                QtWidgets.QMessageBox.critical(self, "L·ªói kh√¥ng x√°c ƒë·ªãnh",
                                               f"ƒê√£ c√≥ l·ªói khi l∆∞u d·ªØ li·ªáu:\n{str(e)}\n\nVui l√≤ng li√™n h·ªá h·ªó tr·ª£ k·ªπ thu·∫≠t.")
            return False

    # ---------- Lesson files ----------
    def _choose_lesson_file(self):
        if not self.session_id:
            QMessageBox.critical(self, "Ch∆∞a l∆∞u bu·ªïi h·ªçc", "Vui l√≤ng l∆∞u bu·ªïi h·ªçc tr∆∞·ªõc khi g·∫Øn file.")
            return
        file_path, _ = QFileDialog.getOpenFileName(
            self, "Ch·ªçn file b√†i gi·∫£ng",
            "", "T·∫•t c·∫£ (*.*);;PDF (*.pdf);;PowerPoint (*.pptx);;Word (*.docx);;EasiNote (*.enb);;OneNote (*.one)"
        )
        if file_path:
            self._save_lesson_file(file_path)

    def _save_lesson_file(self, file_path: str):
        """L∆∞u file b√†i gi·∫£ng v·ªõi ki·ªÉm tra b·∫£o m·∫≠t v√† validation"""
        try:
            # Ki·ªÉm tra file t·ªìn t·∫°i v√† c√≥ th·ªÉ ƒë·ªçc
            if not os.path.exists(file_path):
                raise FileNotFoundError("File kh√¥ng t·ªìn t·∫°i")

            if not os.access(file_path, os.R_OK):
                raise PermissionError("Kh√¥ng c√≥ quy·ªÅn ƒë·ªçc file")

            # Ki·ªÉm tra ƒë·ªãnh d·∫°ng file cho ph√©p
            allowed_extensions = {'.pdf', '.pptx', '.docx', '.enb', '.one', '.jpg', '.png', '.txt', '.ppt', '.xls',
                                  '.xlsx'}
            file_ext = Path(file_path).suffix.lower()
            if file_ext not in allowed_extensions:
                raise ValueError(f"ƒê·ªãnh d·∫°ng file {file_ext} kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£")

            # Ki·ªÉm tra k√≠ch th∆∞·ªõc file (t·ªëi ƒëa 50MB)
            file_size = os.path.getsize(file_path)
            max_size = 50 * 1024 * 1024  # 50MB
            if file_size > max_size:
                raise ValueError(f"File qu√° l·ªõn (t·ªëi ƒëa 50MB). K√≠ch th∆∞·ªõc hi·ªán t·∫°i: {file_size // 1024 // 1024}MB")

            # Ki·ªÉm tra t√™n file h·ª£p l·ªá
            file_name = Path(file_path).name
            if len(file_name) > 255:
                raise ValueError("T√™n file qu√° d√†i (t·ªëi ƒëa 255 k√Ω t·ª±)")

            file_type = Path(file_path).suffix
            title = Path(file_path).stem

            # L∆∞u v√†o database
            self.db.add_lesson_file(self.session_id, file_path, file_type, title, "")
            QMessageBox.information(self, "‚úÖ Th√†nh c√¥ng", "ƒê√£ l∆∞u file b√†i gi·∫£ng v√†o CSDL.")
            self._render_lesson_files()

        except FileNotFoundError as e:
            QMessageBox.critical(self, "L·ªói file", f"File kh√¥ng t√¨m th·∫•y: {str(e)}")
        except PermissionError as e:
            QMessageBox.critical(self, "L·ªói quy·ªÅn truy c·∫≠p", f"Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p: {str(e)}")
        except ValueError as e:
            QMessageBox.warning(self, "L·ªói ƒë·ªãnh d·∫°ng", str(e))
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ l∆∞u file b√†i gi·∫£ng: {e}")
    def _render_lesson_files(self):
        # clear
        for i in reversed(range(self.files_l.count())):
            w = self.files_l.itemAt(i).widget()
            if w:
                w.deleteLater()
            else:
                self.files_l.removeItem(self.files_l.itemAt(i))

        if not self.session_id:
            self.files_l.addWidget(QLabel("‚õî Ch∆∞a c√≥ file b√†i gi·∫£ng."))
            return

        rows = self.db.execute_query(
            "SELECT id, file_path, title, file_type FROM lesson_files "
            "WHERE session_id = ? ORDER BY id DESC",
            (self.session_id,), fetch="all"
        ) or []

        if not rows:
            self.files_l.addWidget(QLabel("‚õî Ch∆∞a c√≥ file b√†i gi·∫£ng."))
            return

        for r in rows:
            file_path = r["file_path"] if isinstance(r, dict) else r[1]
            title = (r["title"] if isinstance(r, dict) else r[2]) or os.path.basename(file_path)
            ftype = (r["file_type"] if isinstance(r, dict) else r[3] or "").lower()

            roww = QHBoxLayout()
            roww.addWidget(QLabel(title))
            open_btn = QPushButton("üìÇ M·ªü")
            open_btn.clicked.connect(lambda _, p=file_path: self._open_file(p))
            roww.addWidget(open_btn)

            if ftype == "board" or str(file_path).endswith(".board.json"):
                edit_btn = QPushButton("üñçÔ∏è M·ªü & S·ª≠a")
                edit_btn.clicked.connect(lambda _, p=file_path: self._open_board(board_path=p))
                roww.addWidget(edit_btn)

            roww.addStretch(1)
            wrap = QWidget(); wrap.setLayout(roww)
            self.files_l.addWidget(wrap)

    def _open_file(self, file_path: str):
        if not os.path.exists(file_path):
            QMessageBox.critical(self, "L·ªói", f"File kh√¥ng t·ªìn t·∫°i:\n{file_path}")
            return
        # m·ªü theo h·ªá th·ªëng
        QtGui.QDesktopServices.openUrl(QUrl.fromLocalFile(file_path))

    # ---------- Board chooser / Board / Paint ----------
    def _open_board_chooser(self):
        if not self.session_id:
            ok = self._save_session(keep_open=True)
            if not ok or not self.session_id:
                QtWidgets.QMessageBox.critical(self, "Ch∆∞a c√≥ bu·ªïi h·ªçc",
                                               "Kh√¥ng th·ªÉ m·ªü B·∫£ng v·∫Ω do ch∆∞a l∆∞u ƒë∆∞·ª£c bu·ªïi h·ªçc.")
                return

        dlg = QtWidgets.QDialog(self)
        dlg.setWindowTitle("Ch·ªçn ph·∫ßn m·ªÅm b·∫£ng v·∫Ω")
        v = QVBoxLayout(dlg)
        v.addWidget(QLabel("Ch·ªçn c√¥ng c·ª• ƒë·ªÉ m·ªü:"))
        btn_default = QPushButton("B·∫£ng v·∫Ω m·∫∑c ƒë·ªãnh")
        btn_paint = QPushButton("Paint (Windows)")
        btn_easinote = QPushButton("EasiNote")
        btn_word = QPushButton("Word")
        btn_onenote = QPushButton("OneNote")
        v.addWidget(btn_default); v.addWidget(btn_paint); v.addWidget(btn_easinote); v.addWidget(btn_word); v.addWidget(btn_onenote)

        btn_default.clicked.connect(lambda: (dlg.accept(), self._open_board()))
        btn_paint.clicked.connect(lambda: (dlg.accept(), self._launch_external_board("paint")))
        btn_easinote.clicked.connect(lambda: (dlg.accept(), self._launch_external_board("easinote")))
        btn_word.clicked.connect(lambda: (dlg.accept(), self._launch_external_board("word")))
        btn_onenote.clicked.connect(lambda: (dlg.accept(), self._launch_external_board("onenote")))

        cancel = QPushButton("H·ªßy"); cancel.clicked.connect(dlg.reject); v.addWidget(cancel)
        dlg.exec()

    def _lesson_dir(self) -> str:
        d = os.path.join(os.getcwd(), "data", "lessons", str(self.session_id))
        os.makedirs(d, exist_ok=True)
        return d

    def _compose_paint_filepath(self) -> tuple[str, str]:
        date_str = self.session_date
        group = self._sanitize_filename(self.group_name or "Nhom")
        topic = self._sanitize_filename((self.topic_text.toPlainText().strip().splitlines() or ["ChuDe"])[0])
        base = f"{group}+{topic}+{date_str}"
        lesson_dir = self._lesson_dir()
        candidate = os.path.join(lesson_dir, base + ".png")
        idx = 1
        while os.path.exists(candidate):
            candidate = os.path.join(lesson_dir, f"{base}({idx}).png")
            idx += 1
        title = Path(candidate).stem
        return candidate, title

    def _create_blank_png(self, path: str, width: int = 1400, height: int = 575, color=(255, 255, 255, 255)):
        import struct, zlib
        sig = b'\x89PNG\r\n\x1a\n'
        def chunk(typ: bytes, data: bytes) -> bytes:
            return struct.pack("!I", len(data)) + typ + data + struct.pack("!I", zlib.crc32(typ + data) & 0xFFFFFFFF)
        ihdr = struct.pack("!IIBBBBB", width, height, 8, 6, 0, 0, 0)
        r, g, b, a = color
        pixel = bytes((r, g, b, a))
        row = b'\x00' + pixel * width
        raw = row * height
        idat = zlib.compress(raw, 9)
        png = sig + chunk(b'IHDR', ihdr) + chunk(b'IDAT', idat) + chunk(b'IEND', b'')
        os.makedirs(os.path.dirname(path), exist_ok=True)
        with open(path, "wb") as f:
            f.write(png)

    def _launch_external_board(self, app_name: str):
        try:
            if app_name == "paint":
                if platform.system() != "Windows":
                    QMessageBox.critical(self, "Kh√¥ng h·ªó tr·ª£", "Paint ch·ªâ kh·∫£ d·ª•ng tr√™n Windows.")
                    return
                paint_cmd = shutil.which("mspaint") or r"C:\Windows\System32\mspaint.exe"
                if not os.path.exists(paint_cmd):
                    QMessageBox.critical(self, "Kh√¥ng t√¨m th·∫•y Paint", "Kh√¥ng t√¨m th·∫•y mspaint tr√™n m√°y.")
                    return
                target_path, title = self._compose_paint_filepath()
                if not os.path.exists(target_path):
                    self._create_blank_png(target_path)
                start_time = time.time()
                proc = subprocess.Popen([paint_cmd, target_path])
                # ch·ªù ƒë·∫øn khi Paint ƒë√≥ng r·ªìi t·ª± g·∫Øn v√†o DB
                self._poll_paint_and_attach(proc, target_path, title, start_time)
                return

            QMessageBox.information(self, "Ch∆∞a h·ªó tr·ª£", f"'{app_name}' s·∫Ω ƒë∆∞·ª£c th√™m ·ªü b∆∞·ªõc ti·∫øp theo.")
        except Exception as e:
            QMessageBox.critical(self, "L·ªói m·ªü ·ª©ng d·ª•ng", f"Kh√¥ng th·ªÉ m·ªü {app_name}:\n{e}")

    def _poll_paint_and_attach(self, proc, target_path: str, title: str, start_time: float):
        # d√πng QTimer thay v√¨ after()
        timer = QtCore.QTimer(self)
        timer.setInterval(700)

        def check():
            if proc.poll() is None:
                return  # v·∫´n ƒëang m·ªü
            timer.stop()
            ok = (
                os.path.exists(target_path)
                and os.path.getsize(target_path) > 0
                and os.path.getmtime(target_path) >= start_time
            )
            if not ok:
                QMessageBox.warning(self, "Kh√¥ng c√≥ thay ƒë·ªïi", "Kh√¥ng th·∫•y file ƒë∆∞·ª£c l∆∞u/ch·ªânh s·ª≠a trong Paint.")
                return
            self.db.add_lesson_file(self.session_id, target_path, Path(target_path).suffix, title, "")
            self._render_lesson_files()
            QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ l∆∞u v√† g·∫Øn file: {os.path.basename(target_path)}")

        timer.timeout.connect(check)
        timer.start()

    def _open_board(self, board_path: Optional[str] = None):
        if not self.session_id:
            QMessageBox.critical(self, "Ch∆∞a c√≥ bu·ªïi h·ªçc", "Vui l√≤ng l∆∞u bu·ªïi h·ªçc tr∆∞·ªõc khi m·ªü B·∫£ng v·∫Ω.")
            return
        lesson_dir = self._lesson_dir()

        # ∆Øu ti√™n phi√™n b·∫£n Qt (n·∫øu c√≥)
        try:
            from ui_qt.board.window import DrawingBoardWindowQt  # type: ignore
        except Exception:
            DrawingBoardWindowQt = None

        if DrawingBoardWindowQt is None:
            QMessageBox.information(self, "Th√¥ng tin", "B·∫£ng v·∫Ω Qt s·∫Ω ƒë∆∞·ª£c b·ªï sung sau.")
            return

        def _on_saved(path: str, title: str):
            self.db.add_lesson_file(self.session_id, path, "board", title, "")
            self._render_lesson_files()

        # Fix: T·∫°o DrawingBoard ƒë·ªôc l·∫≠p ƒë·ªÉ tr√°nh xung ƒë·ªôt modal
        win = DrawingBoardWindowQt(
            parent=None,  # Thay ƒë·ªïi t·ª´ self th√†nh None
            group_name=self.group_name,
            session_date=self.session_date,
            session_id=self.session_id,
            lesson_dir=lesson_dir,
            board_path=board_path,
            on_saved=_on_saved
        )

        # Fix: Th√™m window flags ƒë·ªÉ ƒë·∫£m b·∫£o ho·∫°t ƒë·ªông ƒë·ªôc l·∫≠p
        win.setWindowFlags(win.windowFlags() | Qt.Window)

        # Fix: ·∫®n SessionDetailWindow t·∫°m th·ªùi ƒë·ªÉ tr√°nh xung ƒë·ªôt
        self.hide()

        # Fix: X·ª≠ l√Ω khi ƒë√≥ng DrawingBoard - hi·ªán l·∫°i SessionDetailWindow
        def on_board_closed():
            # Ki·ªÉm tra xem ƒë·ªëi t∆∞·ª£ng c√≤n t·ªìn t·∫°i kh√¥ng tr∆∞·ªõc khi g·ªçi show()
            try:
                if not self.isVisible():
                    self.show()
                    self.raise_()
                    self.activateWindow()
            except RuntimeError:
                # ƒê·ªëi t∆∞·ª£ng ƒë√£ b·ªã x√≥a, b·ªè qua
                pass

        win.destroyed.connect(on_board_closed)
        win.show()
        win.raise_()
        win.activateWindow()

    # Ph∆∞∆°ng th·ª©c kh√¥i ph·ª•c c·ª≠a s·ªï m·ªôt c√°ch an to√†n
    def _restore_window_safely(self):
        """Kh√¥i ph·ª•c hi·ªÉn th·ªã c·ª≠a s·ªï SessionDetail m·ªôt c√°ch an to√†n sau khi ƒë√≥ng DrawingBoard"""
        try:
            # Ki·ªÉm tra xem ƒë·ªëi t∆∞·ª£ng c√≤n h·ª£p l·ªá kh√¥ng
            if hasattr(self, 'isVisible') and not self.isVisible():
                self.show()
                self.raise_()
                self.activateWindow()
        except (RuntimeError, AttributeError):
            # ƒê·ªëi t∆∞·ª£ng ƒë√£ b·ªã x√≥a ho·∫∑c kh√¥ng h·ª£p l·ªá, b·ªè qua
            pass
    def _open_skill_rating(self):
        # l·∫•y danh s√°ch h·ªçc sinh
        if self.is_makeup_session:
            students = [(i["student_id"], i["student_name"]) for i in self.makeup_list]
        else:
            students = self.db.execute_query(
                "SELECT id, name FROM students WHERE group_id=?",
                (self.group_id,), fetch="all"
            ) or []
        # t√°ch ch·ªß ƒë·ªÅ t·ª´ √¥ topic (ph√¢n t√°ch , ;)
        raw = self.topic_text.toPlainText().strip()
        topics: List[str] = []
        for part in raw.replace(";", ",").split(","):
            if part.strip():
                topics.append(part.strip())

        try:
            from ui_qt.windows.skill_rating_window_qt import SkillRatingWindowQt  # type: ignore
        except Exception:
            QMessageBox.information(self, "Th√¥ng tin", "C·ª≠a s·ªï ƒê√°nh gi√° nƒÉng l·ª±c (Qt) ch∆∞a s·∫µn s√†ng.")
            return

        dlg = SkillRatingWindowQt(self.db, students, default_topics=topics, parent=self)
        dlg.exec()

    def _ensure_session_row(self) -> None:
        """ƒê·∫£m b·∫£o c√≥ 1 d√≤ng trong session_logs cho (group_id, session_date) v√† set self.session_id.
           Ch·ªâ d√πng cho bu·ªïi th∆∞·ªùng (kh√¥ng √°p d·ª•ng bu·ªïi b√π)."""
        if self.is_makeup_session or not self.group_id:
            return

        # 1) th·ª≠ l·∫•y s·∫µn
        row = self.db.execute_query(
            "SELECT id FROM session_logs WHERE group_id=? AND session_date=?",
            (self.group_id, self.session_date), fetch="one"
        )
        if row:
            self.session_id = row["id"] if isinstance(row, dict) else row[0]
            return

        # 2) ch∆∞a c√≥ -> kh·ªüi t·∫°o d√≤ng tr·ªëng
        _ = self.db.execute_query(
            "INSERT INTO session_logs (group_id, session_date, topic, homework) VALUES (?, ?, ?, ?)",
            (self.group_id, self.session_date, "", "")
        )

        # 3) l·∫•y l·∫°i id
        row2 = self.db.execute_query(
            "SELECT id FROM session_logs WHERE group_id=? AND session_date=?",
            (self.group_id, self.session_date), fetch="one"
        )
        if row2:
            self.session_id = row2["id"] if isinstance(row2, dict) else row2[0]

